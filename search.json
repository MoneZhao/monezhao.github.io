[{"title":"ES6 入门学习","url":"/2017/08/22/ES6-note/","content":"<h2 id=\"数组的扩展\"><a href=\"#数组的扩展\" class=\"headerlink\" title=\"数组的扩展\"></a>数组的扩展</h2><h3 id=\"Array-from\"><a href=\"#Array-from\" class=\"headerlink\" title=\"Array.from()\"></a>Array.from()</h3><p>Array.from 方法用于将两类对象转为真正的数组：</p>\n<ul>\n<li>类似数组的对象（ array-like object） </li>\n<li>可遍历（ iterable） 的对象（ 包括ES6新增的数据结构Set和Map）</li>\n</ul>\n<p>Array.from 还可以接受第二个参数, 作用类似于数组的 map 方法, 用来对每个<br>元素进行处理, 将处理后的值放入返回的数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(arrayLike, <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * x);</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h3 id=\"Array-of\"><a href=\"#Array-of\" class=\"headerlink\" title=\"Array.of()\"></a>Array.of()</h3><p>Array.of 方法用于将一组值, 转换为数组</p>\n<h3 id=\"数组实例的copyWithin\"><a href=\"#数组实例的copyWithin\" class=\"headerlink\" title=\"数组实例的copyWithin()\"></a>数组实例的copyWithin()</h3><p>数组实例的 copyWithin 方法, 在当前数组内部, 将指定位置的成员复制到其他<br>位置（ 会覆盖原有成员） , 然后返回当前数组。也就是说, 使用这个方法, 会修改<br>当前数组, 它接受三个参数:</p>\n<ul>\n<li>target（必需） ：从该位置开始替换数据</li>\n<li>start（可选） ：从该位置开始读取数据, 默认为0。如果为负值, 表示倒数</li>\n<li>end（可选） ：到该位置前停止读取数据, 默认等于数组长度。如果为负值,<br>表示倒数</li>\n</ul>\n<p>这三个参数都应该是数值, 如果不是, 会自动转为数值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].<span class=\"title function_\">copyWithin</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">// [4, 5, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码表示将从3号位直到数组结束的成员（ 4和5） , 复制到从0号位开始的位<br>置, 结果覆盖了原来的1和2</p>\n<h3 id=\"数组实例的find-和findIndex\"><a href=\"#数组实例的find-和findIndex\" class=\"headerlink\" title=\"数组实例的find()和findIndex()\"></a>数组实例的find()和findIndex()</h3><p>数组实例的 find 方法, 用于找出第一个符合条件的数组成员。它的参数是一个回<br>调函数, 所有数组成员依次执行该回调函数, 直到找出第一个返回值为 true 的成<br>员, 然后返回该成员。如果没有符合条件的成员, 则返回 undefined 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>].<span class=\"title function_\">find</span>(<span class=\"keyword\">function</span>(<span class=\"params\">value, index, arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value &gt; <span class=\"number\">9</span>;</span><br><span class=\"line\">&#125;) <span class=\"comment\">// 10</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>].<span class=\"title function_\">find</span>(<span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> n &gt; <span class=\"number\">9</span>)<span class=\"comment\">//10</span></span><br></pre></td></tr></table></figure>\n\n<p>find 方法的回调函数可以接受三个参数, 依次为当前的值、当前的<br>位置和原数组</p>\n<p>数组实例的 findIndex 方法的用法与 find 方法非常类似, 返回第一个符合条件<br>的数组成员的位置, 如果所有成员都不符合条件, 则返回 -1</p>\n<h3 id=\"数组实例的fill\"><a href=\"#数组实例的fill\" class=\"headerlink\" title=\"数组实例的fill()\"></a>数组实例的fill()</h3><p>fill 方法使用给定值, 填充一个数组。fill 方法还可以接受第二个和第三个参数, 用于指定填充的起始位置和结束位置。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>].<span class=\"title function_\">fill</span>(<span class=\"number\">7</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">// [&#x27;a&#x27;, 7, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数组实例的entries-keys-和values\"><a href=\"#数组实例的entries-keys-和values\" class=\"headerlink\" title=\"数组实例的entries(), keys()和values()\"></a>数组实例的entries(), keys()和values()</h3><p>ES6提供三个新的方法—— entries(),  keys() 和 values() ——用于遍历数<br>组。它们都返回一个遍历器对象, 可以用 for…of 循环进行遍历, 唯一的区别是 keys() 是对键名的遍历、 values() 是对键值的遍历,  entries() 是对键值对的遍历。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [index, elem] <span class=\"keyword\">of</span> [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>].<span class=\"title function_\">entries</span>()) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(index, elem);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">// 0 &quot;a&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 1 &quot;b&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数组实例的includes\"><a href=\"#数组实例的includes\" class=\"headerlink\" title=\"数组实例的includes()\"></a>数组实例的includes()</h3><p>includes 方法返回一个布尔值, 表示某个数组是否包含给定<br>的值, 与字符串的 includes 方法类似。该方法属于ES7, 但Babel转码器已经支<br>持。</p>\n<p>该方法的第二个参数表示搜索的起始位置, 默认为0。如果第二个参数为负数, 则<br>表示倒数的位置, 如果这时它大于数组长度（ 比如第二个参数为-4, 但数组长度为<br>3） , 则会重置为从0开始。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].<span class=\"title function_\">includes</span>(<span class=\"number\">3</span>, <span class=\"number\">3</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].<span class=\"title function_\">includes</span>(<span class=\"number\">3</span>, -<span class=\"number\">1</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数的扩展\"><a href=\"#函数的扩展\" class=\"headerlink\" title=\"函数的扩展\"></a>函数的扩展</h2><h3 id=\"扩展运算符\"><a href=\"#扩展运算符\" class=\"headerlink\" title=\"扩展运算符\"></a>扩展运算符</h3><p>扩展运算符（ spread） 是三个点（… ）。它好比rest参数的逆运算, 将一个数组转为用逗号分隔的参数序列。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(...[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"扩展运算符的应用\"><a href=\"#扩展运算符的应用\" class=\"headerlink\" title=\"扩展运算符的应用\"></a>扩展运算符的应用</h4><ol>\n<li> 合并数组</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"string\">&#x27;c&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = [<span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>];</span><br><span class=\"line\"><span class=\"comment\">// ES5的合并数组</span></span><br><span class=\"line\">arr1.<span class=\"title function_\">concat</span>(arr2, arr3);</span><br><span class=\"line\"><span class=\"comment\">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27; ]</span></span><br><span class=\"line\"><span class=\"comment\">// ES6的合并数组</span></span><br><span class=\"line\">[...arr1, ...arr2, ...arr3]</span><br><span class=\"line\"><span class=\"comment\">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27; ]</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li> 与解构赋值结合</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\">a = list[<span class=\"number\">0</span>], rest = list.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\">[a, ...rest] = list</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [first, ...rest] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">first <span class=\"comment\">// 1</span></span><br><span class=\"line\">rest <span class=\"comment\">// [2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n\n<p>如果将扩展运算符用于数组赋值, 只能放在参数的最后一位, 否则会报错。</p>\n<ol start=\"3\">\n<li> 字符串</li>\n</ol>\n<p>扩展运算符还可以将字符串转为真正的数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">[...<span class=\"string\">&#x27;hello&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">// [ &quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot; ]</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li> Map和Set结构, Generator函数</li>\n</ol>\n<p>扩展运算符内部调用的是数据结构的Iterator接口, 因此只要具有Iterator接口的对<br>象, 都可以使用扩展运算符, 比如Map结构。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>([</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"string\">&#x27;one&#x27;</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>, <span class=\"string\">&#x27;two&#x27;</span>],</span><br><span class=\"line\">  [<span class=\"number\">3</span>, <span class=\"string\">&#x27;three&#x27;</span>],</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [...map.<span class=\"title function_\">keys</span>()]; <span class=\"comment\">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数绑定\"><a href=\"#函数绑定\" class=\"headerlink\" title=\"函数绑定\"></a>函数绑定</h3><p>函数绑定运算符是并排的两个双冒号（::） , 双冒号左边是一个对象, 右边是一个<br>函数。该运算符会自动将左边的对象, 作为上下文环境（ 即this对象） , 绑定到右<br>边的函数上面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">foo</span>::bar;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">bar.<span class=\"title function_\">bind</span>(foo);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">foo</span>::<span class=\"title function_\">bar</span>(...<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">bar.<span class=\"title function_\">apply</span>(foo, <span class=\"variable language_\">arguments</span>);</span><br></pre></td></tr></table></figure>\n\n<p>如果双冒号左边为空, 右边是一个对象的方法, 则等于将该方法绑定在该对象上<br>面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> method = <span class=\"attr\">obj</span>::obj.<span class=\"property\">foo</span>;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> method = ::obj.<span class=\"property\">foo</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> log = ::<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> log = <span class=\"variable language_\">console</span>.<span class=\"property\">log</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">console</span>);</span><br></pre></td></tr></table></figure>\n\n<p>由于双冒号运算符返回的还是原对象, 因此可以采用链式写法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; find, html &#125; = jake;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&quot;div.myClass&quot;</span>)</span><br><span class=\"line\">::<span class=\"title function_\">find</span>(<span class=\"string\">&quot;p&quot;</span>)</span><br><span class=\"line\">::<span class=\"title function_\">html</span>(<span class=\"string\">&quot;hahaha&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对象的扩展\"><a href=\"#对象的扩展\" class=\"headerlink\" title=\"对象的扩展\"></a>对象的扩展</h2><h3 id=\"属性的简洁表示法\"><a href=\"#属性的简洁表示法\" class=\"headerlink\" title=\"属性的简洁表示法\"></a>属性的简洁表示法</h3><p>ES6允许直接写入变量和函数, 作为对象的属性和方法。这样的书写更加简洁。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"string\">&#x27;bar&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> baz = &#123;foo&#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// &#123;foo: &quot;bar&quot;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> baz = &#123;<span class=\"attr\">foo</span>: foo&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;x, y&#125;;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> &#123;<span class=\"attr\">x</span>: x, <span class=\"attr\">y</span>: y&#125;;</span><br><span class=\"line\">&#125; f</span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>) <span class=\"comment\">// Object &#123;x: 1, y: 2&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">method</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello!&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">  <span class=\"attr\">method</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello!&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>如果某个方法的值是一个Generator函数, 前面需要加上星号。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  * <span class=\"title function_\">m</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;hello world&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Object-is\"><a href=\"#Object-is\" class=\"headerlink\" title=\"Object.is()\"></a>Object.is()</h3><p>ES5比较两个值是否相等, 只有两个运算符：相等运算符（== ） 和严格相等运算<br>符（=== ） 。它们都有缺点, 前者会自动转换数据类型, 后者的 NaN 不等于自<br>身, 以及 +0 等于 -0 。JavaScript缺乏一种运算, 在所有环境中, 只要两个值是<br>一样的, 它们就应该相等。</p>\n<p>Object.is 用来比较两个值是否严格相等, 与严格比较运算符（ ===） 的行为基本一致。不同之处只有两个：一是 +0 不等于 -0 , 二是 NaN 等于自身。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">+<span class=\"number\">0</span> === -<span class=\"number\">0</span> <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"title class_\">NaN</span> === <span class=\"title class_\">NaN</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(+<span class=\"number\">0</span>, -<span class=\"number\">0</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"title class_\">NaN</span>, <span class=\"title class_\">NaN</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Object-assign\"><a href=\"#Object-assign\" class=\"headerlink\" title=\"Object.assign()\"></a>Object.assign()</h3><p>Object.assign 方法用于对象的合并, 将源对象（ source） 的所有可枚举属性,<br>复制到目标对象（ target） 。Object.assign 方法的第一个参数是目标对象, 后面的参数都是源对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> target = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> source1 = &#123; <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> source2 = &#123; <span class=\"attr\">c</span>: <span class=\"number\">3</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(target, source1, source2);</span><br><span class=\"line\">target <span class=\"comment\">// &#123;a:1, b:2, c:3&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Object.assign 方法实行的是浅拷贝, 而不是深拷贝。也就是说, 如果源对象某<br>个属性的值是对象, 那么目标对象拷贝得到的是这个对象的引用。</p>\n<h2 id=\"Generator-函数\"><a href=\"#Generator-函数\" class=\"headerlink\" title=\"Generator 函数\"></a>Generator 函数</h2><p>形式上, Generator函数是一个普通函数, 但是有两个特征。一是,  function 关<br>键字与函数名之间有一个星号；二是, 函数体内部使用 yield 语句, 定义不同的<br>内部状态（ yield语句在英语里的意思就是“产出”）。</p>\n<h3 id=\"yield语句\"><a href=\"#yield语句\" class=\"headerlink\" title=\"yield语句\"></a>yield语句</h3><p>由于Generator函数返回的遍历器对象, 只有调用 next 方法才会遍历下一个内部<br>状态, 所以其实提供了一种可以暂停执行的函数。 yield 语句就是暂停标志。<br>遍历器对象的 next 方法的运行逻辑如下。</p>\n<p>（1） 遇到 yield 语句, 就暂停执行后面的操作, 并将紧跟在 yield 后面的那个<br>表达式的值, 作为返回的对象的 value 属性值。</p>\n<p>（2） 下一次调用 next 方法时, 再继续往下执行, 直到遇到下一个 yield 语<br>句。</p>\n<p>（3） 如果没有再遇到新的 yield 语句, 就一直运行到函数结束, 直<br>到 return 语句为止, 并将 return 语句后面的表达式的值, 作为返回的对象<br>的 value 属性值。</p>\n<p>（4） 如果该函数没有 return 语句, 则返回的对象的 value 属性值<br>为 undefined 。</p>\n","tags":["JavaScript"]},{"title":"JDK8 新特性","url":"/2019/07/02/JDK8-new-things/","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>JDK 8 是自JDK 5以来，Oracle对JDK做出的最重大的更新，这个版本中包含了语言、编译器、库、工具、JVM等多种新特性。针对我们平时常用的一些场景，接下来将介绍JDK 8中的新特性。</p>\n<h2 id=\"JAVA-语言的新特性\"><a href=\"#JAVA-语言的新特性\" class=\"headerlink\" title=\"JAVA 语言的新特性\"></a>JAVA 语言的新特性</h2><h3 id=\"Lambda表达式和函数式接口\"><a href=\"#Lambda表达式和函数式接口\" class=\"headerlink\" title=\"Lambda表达式和函数式接口\"></a>Lambda表达式和函数式接口</h3><p>Lambda的设计者们为了让现有的功能与Lambda表达式良好兼容，考虑了很多方法，于是产生了函数接口这个概念，所以我们先讲函数式接口。</p>\n<h4 id=\"函数式接口\"><a href=\"#函数式接口\" class=\"headerlink\" title=\"函数式接口\"></a>函数式接口</h4><p>函数式接口(Functional Interface)就是一个有且仅有一个抽象方法，但是可以有多个非抽象方法的接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">GreetingService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">sayMessage</span><span class=\"params\">(String message)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>Java 8为函数式接口引入了一个新注解@FunctionalInterface，主要用于编译级错误检查，加上该注解，当你写的接口不符合函数式接口定义的时候，编译器会报错。</p>\n<blockquote>\n<p>加不加 <strong>@FunctionalInterface</strong> 对于接口是不是函数式接口没有影响，该注解只是提醒编译器去检查该接口是否仅包含一个抽象方法。</p>\n</blockquote>\n<p><strong>函数式接口里允许定义默认方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">GreetingService</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">sayMessage</span><span class=\"params\">(String message)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doSomeMoreWork1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Method body</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doSomeMoreWork2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Method body</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>函数式接口里允许定义静态方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">GreetingService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">sayMessage</span><span class=\"params\">(String message)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printHello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>函数式接口里允许定义 java.lang.Object 里的 public 方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">GreetingService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">sayMessage</span><span class=\"params\">(String message)</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object obj)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>默认方法和静态方法也是JDK 8的新特性，之后会详细的介绍。</p>\n</blockquote>\n<p>JDK 1.8 之前已有的函数式接口:</p>\n<ul>\n<li>java.lang.Runnable</li>\n<li>java.util.concurrent.Callable</li>\n<li>java.security.PrivilegedAction</li>\n<li>java.util.Comparator</li>\n<li>java.io.FileFilter</li>\n<li>java.nio.file.PathMatcher</li>\n<li>java.lang.reflect.InvocationHandler</li>\n<li>java.beans.PropertyChangeListener</li>\n<li>java.awt.event.ActionListener</li>\n<li>javax.swing.event.ChangeListener</li>\n</ul>\n<p>JDK 1.8 新增加的函数接口：</p>\n<ul>\n<li>java.util.function</li>\n</ul>\n<h4 id=\"Lambda表达式\"><a href=\"#Lambda表达式\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h4><p>Lambda表达式（也称为闭包）允许我们将函数当成参数传递给某个方法，或者把代码本身当作数据处理。之前的JDK中只能使用匿名内部类代替Lambda表达式。</p>\n<p>之前的写法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;eat something&quot;</span> + s);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        p.eat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>JDK 8的写法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> (s) -&gt; System.out.println(<span class=\"string\">&quot;eat something&quot;</span> + s);</span><br><span class=\"line\">        p.eat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个操作就像是将<code>(s) -&gt; System.out.println(&quot;eat something&quot; + s)</code>这段代码赋值给了p这个实例。</p>\n<p>我们对比一下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">  System.out.println(<span class=\"string\">&quot;eat something&quot;</span> + s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p = (s) -&gt; System.out.println(<span class=\"string\">&quot;eat something&quot;</span> + s);</span><br></pre></td></tr></table></figure>\n\n<p>Lambda表达式移除了多余的 <code>public void eat</code> , 移除了传入参数的类型 String，一行代码所以可以移除大括号，在参数和函数之间加入了 <code>-&gt;</code>符号。传统的Java 7必须要求你定义一个“污染环境”的接口实现InterfaceImpl或者使用匿名内部类，而相较之下Java 8的Lambda, 就显得干净很多。</p>\n<p><strong>Lambda表达式并非匿名内部类的语法糖</strong></p>\n<p>实际上，匿名内部类存在着影响应用性能的问题。</p>\n<p>首先，编译器会为每一个匿名内部类创建一个类文件。创建出来的类文件的名称通常按照这样的规则 ClassName 符合和数字。生成如此多的文件就会带来问题，因为类在使用之前需要加载类文件并进行验证，这个过程则会影响应用的启动性能。类文件的加载很有可能是一个耗时的操作，这其中包含了磁盘 IO 和解压 JAR 文件。</p>\n<p>假设 Lambda 表达式翻译成匿名内部类，那么每一个 Lambda 表达式都会有一个对应的类文件。随着匿名内部类进行加载，其必然要占用 JVM 中的元空间（从 Java 8 开始永久代的一种替代实现）。如果匿名内部类的方法被 JIT 编译成机器代码，则会存储到代码缓存中。同时，匿名内部类都需要实例化成独立的对象。以上关于匿名内部类的种种会使得应用的内存占用增加。因此我们有必要引入新的缓存机制减少过多的内存占用，这也就意味着我们需要引入某种抽象层。</p>\n<p>总的来说，lambda的大致思路如下：</p>\n<ol>\n<li>lamdba表达式被编译生成当前类的一个私有静态方法</li>\n<li>在原调用Lamdba方法的地方编译成了一个invokedynamic指令（java7 JVM中增加了一个新的指令）调用，同时呢也生成了一个对应的BootstrapMethod</li>\n<li>当lamdba表达式被JVM执行，也就是碰到2中说到的invokedynamic指令，该指令引导调用LambdaMetafactory.metafactory方法，该方法返回一个CallSite实例</li>\n<li>这个CallSite实例中的target对象，也就是直接引用到一个MethodHandle实例，而这个MethodHandle实例会调用到1中生成的静态方法，在上面的例子就是lambda$main$0这个方法，完成整个lamdba表达式的使用</li>\n</ol>\n<p><strong>查看原文：</strong><a href=\"http://www.infoq.com/articles/Java-8-Lambdas-A-Peek-Under-the-Hood\">Java 8 Lambdas - A Peek Under the Hood</a></p>\n<h3 id=\"接口的默认方法和静态方法\"><a href=\"#接口的默认方法和静态方法\" class=\"headerlink\" title=\"接口的默认方法和静态方法\"></a>接口的默认方法和静态方法</h3><p>默认方法和抽象方法之间的区别在于抽象方法需要实现，而默认方法不需要。接口提供的默认方法会被接口的实现类继承或者覆写，例子代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Defaulable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">default</span> String <span class=\"title function_\">notRequired</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Default implementation&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Defaulable <span class=\"title function_\">create</span><span class=\"params\">( Supplier&lt; Defaulable &gt; supplier )</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> supplier.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DefaultableImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Defaulable</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OverridableImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Defaulable</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">notRequired</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Overridden implementation&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法引用\"><a href=\"#方法引用\" class=\"headerlink\" title=\"方法引用\"></a>方法引用</h3><p>方法引用使得开发者可以直接引用现存的方法、Java类的构造方法或者实例对象，总的来说，一共有以下几种形式：</p>\n<ul>\n<li>静态方法引用：ClassName::methodName;</li>\n<li>实例上的实例方法引用：instanceName::methodName;</li>\n<li>超类上的实例方法引用：supper::methodName;</li>\n<li>类的实例方法引用：ClassName:methodName;</li>\n<li>构造方法引用Class:new;</li>\n<li>数组构造方法引用::TypeName[]::new</li>\n</ul>\n<p>构造器引用，语法是<strong>Class::new</strong>，或者更一般的形式：<strong>Class<T>::new</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">Test</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> Test::<span class=\"keyword\">new</span>;</span><br></pre></td></tr></table></figure>\n\n<p>静态方法引用，语法是<strong>Class::static_method</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">list.forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"重复注解\"><a href=\"#重复注解\" class=\"headerlink\" title=\"重复注解\"></a>重复注解</h3><p>在Java 8中使用**@Repeatable**注解定义重复注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target( ElementType.TYPE )</span></span><br><span class=\"line\"><span class=\"meta\">@Retention( RetentionPolicy.RUNTIME )</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Filters &#123;</span><br><span class=\"line\">    Filter[] value();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Target( ElementType.TYPE )</span></span><br><span class=\"line\"><span class=\"meta\">@Retention( RetentionPolicy.RUNTIME )</span></span><br><span class=\"line\"><span class=\"meta\">@Repeatable( Filters.class )</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Filter &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">value</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Filter( &quot;filter1&quot; )</span></span><br><span class=\"line\"><span class=\"meta\">@Filter( &quot;filter2&quot; )</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Filterable</span> &#123;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Java官方库的新特性\"><a href=\"#Java官方库的新特性\" class=\"headerlink\" title=\"Java官方库的新特性\"></a>Java官方库的新特性</h2><h3 id=\"Optional\"><a href=\"#Optional\" class=\"headerlink\" title=\"Optional\"></a>Optional</h3><p>Java应用中最常见的bug就是<strong>NullPointerException</strong>，JDK参考了Guava的<strong>Optionals</strong>类来解决<strong>NullPointerException</strong>，从而避免源码被各种<strong>null</strong>检查污染。</p>\n<p>看一个简单样例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Optional&lt; String &gt; firstName = Optional.of( <span class=\"string\">&quot;Tom&quot;</span> );</span><br><span class=\"line\">System.out.println( <span class=\"string\">&quot;First Name is set? &quot;</span> + firstName.isPresent() );</span><br><span class=\"line\">System.out.println( <span class=\"string\">&quot;First Name: &quot;</span> + firstName.orElseGet( () -&gt; <span class=\"string\">&quot;[none]&quot;</span> ) );</span><br><span class=\"line\">System.out.println( firstName.map( s -&gt; <span class=\"string\">&quot;Hey &quot;</span> + s + <span class=\"string\">&quot;!&quot;</span> ).orElse( <span class=\"string\">&quot;Hey Stranger!&quot;</span> ) );</span><br><span class=\"line\">System.out.println();</span><br></pre></td></tr></table></figure>\n\n<p>更直接的例子，使用JPA访问数据库（最新的Mybatis已经支持，但是代码生成工具还没有支持）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Repository</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserInfoRepository</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">JpaRepository</span>&lt;UserInfo, String&gt; &#123;</span><br><span class=\"line\">    UserInfo <span class=\"title function_\">findByName</span><span class=\"params\">(String name)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">business</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">UserInfo</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> userInfoRepository.findByName(<span class=\"string\">&quot;dumdum&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Objects.isNull(user)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// throw exception</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//----------------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">//使用Optional</span></span><br><span class=\"line\"><span class=\"meta\">@Repository</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserInfoRepository</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">JpaRepository</span>&lt;UserInfo, String&gt; &#123;</span><br><span class=\"line\">    Optional&lt;Userinfo&gt; <span class=\"title function_\">findByName</span><span class=\"params\">(String name)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">business</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    Optional&lt;Userinfo&gt; userOpt = userInfoRepository.findByName(<span class=\"string\">&quot;dumdum&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">UserInfo</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> userOpt.orElseThrow(() -&gt;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Exception</span>(<span class=\"string\">&quot;查無 userInfo(dumdum) 資訊.&quot;</span>));</span><br><span class=\"line\">    <span class=\"comment\">// UserInfo user = userOpt.orElse(new UserInfo(&quot;Rocko&quot;)));</span></span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Streams\"><a href=\"#Streams\" class=\"headerlink\" title=\"Streams\"></a>Streams</h3><p>有了函数式编程之后，配合StreamAPI，极大得简化了集合操作（后面我们会看到不止是集合）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Status</span> &#123;</span><br><span class=\"line\">  OPEN, CLOSED</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Collection&lt; Task &gt; tasks = Arrays.asList(</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Task</span>( Status.OPEN, <span class=\"number\">5</span> ),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Task</span>( Status.OPEN, <span class=\"number\">13</span> ),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Task</span>( Status.CLOSED, <span class=\"number\">8</span> )</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如何计算集合中每个任务的点数在集合中所占的比重</span></span><br><span class=\"line\"> Collection&lt; String &gt; result = tasks</span><br><span class=\"line\">    .stream()                                        <span class=\"comment\">// Stream&lt; String &gt;</span></span><br><span class=\"line\">    .mapToInt( Task::getPoints )                     <span class=\"comment\">// IntStream</span></span><br><span class=\"line\">    .asLongStream()                                  <span class=\"comment\">// LongStream</span></span><br><span class=\"line\">    .mapToDouble( points -&gt; points / totalPoints )   <span class=\"comment\">// DoubleStream</span></span><br><span class=\"line\">    .boxed()                                         <span class=\"comment\">// Stream&lt; Double &gt;</span></span><br><span class=\"line\">    .mapToLong( weigth -&gt; ( <span class=\"type\">long</span> )( weigth * <span class=\"number\">100</span> ) ) <span class=\"comment\">// LongStream</span></span><br><span class=\"line\">    .mapToObj( percentage -&gt; percentage + <span class=\"string\">&quot;%&quot;</span> )      <span class=\"comment\">// Stream&lt; String&gt;</span></span><br><span class=\"line\">    .collect( Collectors.toList() );                 <span class=\"comment\">// List&lt; String &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println( result );</span><br></pre></td></tr></table></figure>\n\n<p>传统的IO操作（从文件或者网络一行一行得读取数据）可以受益于steam处理, 配合try-with-resource写法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Path</span> <span class=\"variable\">path</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>( filename ).toPath();</span><br><span class=\"line\"><span class=\"keyword\">try</span>( Stream&lt; String &gt; lines = Files.lines( path, StandardCharsets.UTF_8 ) ) &#123;</span><br><span class=\"line\">    lines.onClose( () -&gt; System.out.println(<span class=\"string\">&quot;Done!&quot;</span>) ).forEach( System.out::println );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Date-Time-API-JSR-310\"><a href=\"#Date-Time-API-JSR-310\" class=\"headerlink\" title=\"Date/Time API(JSR 310)\"></a>Date/Time API(JSR 310)</h3><p><strong>java.util.Date</strong>和后来的<strong>java.util.Calendar</strong>一直存在着诸多的问题，比如：</p>\n<ol>\n<li><p>线程安全问题：java.util.Date是非线程安全的，所有的日期类都是可变的；</p>\n</li>\n<li><p>设计很差：在java.util和java.sql的包中都有日期类，此外，用于格式化和解析的类在java.text包中也有定义。而每个包将其合并在一起，也是不合理的；</p>\n</li>\n<li><p>时区处理麻烦：日期类不提供国际化，没有时区支持，因此Java中引入了java.util.Calendar和Java.util.TimeZone类；</p>\n</li>\n</ol>\n<p>从而催生了第三方库Joda-Time，Java 8中新的时间和日期管理API深受Joda-Time影响，并吸收了很多Joda-Time的精华。</p>\n<p>在java.util.time包中常用的几个类有：</p>\n<ul>\n<li>它通过指定一个时区，然后就可以获取到当前的时刻，日期与时间。Clock可以替换System.currentTimeMillis()与TimeZone.getDefault()</li>\n<li>Instant:一个instant对象表示时间轴上的一个时间点，Instant.now()方法会返回当前的瞬时点（格林威治时间）；</li>\n<li>Duration:用于表示两个瞬时点相差的时间量；</li>\n<li>LocalDate:一个带有年份，月份和天数的日期，可以使用静态方法now或者of方法进行创建；</li>\n<li>LocalTime:表示一天中的某个时间，同样可以使用now和of进行创建；</li>\n<li>LocalDateTime：兼有日期和时间；</li>\n<li>ZonedDateTime：通过设置时间的id来创建一个带时区的时间；</li>\n<li>DateTimeFormatter：日期格式化类，提供了多种预定义的标准格式；</li>\n</ul>\n<h4 id=\"Spring-中-LocalDateTime格式处理\"><a href=\"#Spring-中-LocalDateTime格式处理\" class=\"headerlink\" title=\"Spring 中 LocalDateTime格式处理\"></a>Spring 中 LocalDateTime格式处理</h4><h5 id=\"Controller接收LocalDateTime参数\"><a href=\"#Controller接收LocalDateTime参数\" class=\"headerlink\" title=\"Controller接收LocalDateTime参数\"></a>Controller接收LocalDateTime参数</h5><p>@RequestParam @DateTimeFormat(pattern = “yyyy-MM-dd HH:mm:ss”) LocalDateTime date</p>\n<h5 id=\"ResponseBody格式化LocalDateTime\"><a href=\"#ResponseBody格式化LocalDateTime\" class=\"headerlink\" title=\"ResponseBody格式化LocalDateTime\"></a>ResponseBody格式化LocalDateTime</h5><p>Spring默认使用jackson来进行json格式转换，我们只需要使用@Bean注解创建一个ObjectMapperbean，并将JavaTimeModule注册到ObjectMapper中即可，spring会使用该bean创建MappingJackson2HttpMessageConverter进行json格式转换。这里需要加入<code>jackson</code>的<code>jsr310</code>扩展包。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.fasterxml.jackson.datatype&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;jackson-datatype-jsr310&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">2.8</span><span class=\"number\">.9</span>&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean(name = &quot;mapperObject&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ObjectMapper <span class=\"title function_\">getObjectMapper</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">ObjectMapper</span> <span class=\"variable\">om</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>();</span><br><span class=\"line\">    <span class=\"type\">JavaTimeModule</span> <span class=\"variable\">javaTimeModule</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JavaTimeModule</span>();</span><br><span class=\"line\">    javaTimeModule.addSerializer(LocalDateTime.class, <span class=\"keyword\">new</span> <span class=\"title class_\">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)));</span><br><span class=\"line\">    javaTimeModule.addSerializer(LocalDate.class, <span class=\"keyword\">new</span> <span class=\"title class_\">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyy-MM-dd&quot;</span>)));</span><br><span class=\"line\">    javaTimeModule.addSerializer(LocalTime.class, <span class=\"keyword\">new</span> <span class=\"title class_\">LocalTimeSerializer</span>(DateTimeFormatter.ofPattern(<span class=\"string\">&quot;HH:mm:ss&quot;</span>)));</span><br><span class=\"line\">    om.registerModule(javaTimeModule);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> om;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>或者使用（缺点是每一个变量都需要加这个注解）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JsonSerialize(using = LocalDateTimeSerializer.class)</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>另外，如果持久层框架使用mybatis，同样需要加入<code>mybatis</code>的<code>jsr310</code> 扩展包。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mybatis-typehandlers-jsr310&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">1.0</span><span class=\"number\">.2</span>&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Base64\"><a href=\"#Base64\" class=\"headerlink\" title=\"Base64\"></a>Base64</h3><p>对Base64编码的支持已经被加入到Java 8官方库中，这样不需要使用第三方库就可以进行Base64编码，例子代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Base64 finally in Java 8!&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">encoded</span> <span class=\"operator\">=</span> Base64.getEncoder()</span><br><span class=\"line\">  .encodeToString( text.getBytes( StandardCharsets.UTF_8 ) );</span><br><span class=\"line\">System.out.println( encoded );</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">decoded</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(</span><br><span class=\"line\">  Base64.getDecoder()</span><br><span class=\"line\">  .decode( encoded ),StandardCharsets.UTF_8</span><br><span class=\"line\">);</span><br><span class=\"line\">System.out.println( decoded );</span><br></pre></td></tr></table></figure>\n","tags":["Java"]},{"title":"Java NIO详解","url":"/2018/03/16/NIO/","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>BIO是面向字节流和字符流的，数据从流中顺序获取</p>\n<p>NIO是面向通道和缓冲区的，数据总是从通道中读到buffer缓冲区内，或者从buffer缓冲区内写入通道</p>\n<p>Channel通道和Buffer缓冲区是NIO的核心，几乎在每一个IO操作中使用它们，Selector选择器则允许单个线程操作多个通道，对于高并发多连接很有帮助。</p>\n<blockquote>\n<p>操作系统的IO一般分为两个阶段，等待和就绪操作，比如读可以分为等待系统可读和真正的读，写可以分为等待系统可写和真正的写，在传统的BIO中是这两个阶段都会阻塞，在NIO中第一个阶段不是阻塞的，第二个阶段是阻塞的，如下图，BIO是阻塞IO，NIO是非阻塞IO</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"Buffer（缓冲区）\"><a href=\"#Buffer（缓冲区）\" class=\"headerlink\" title=\"Buffer（缓冲区）\"></a>Buffer（缓冲区）</h2><h3 id=\"常用Buffer类型\"><a href=\"#常用Buffer类型\" class=\"headerlink\" title=\"常用Buffer类型\"></a>常用Buffer类型</h3><p>ByteBuffer, MappedByteBuffer, CharBuffer, DoubleBuffer, FloatBuffer, IntBuffer, LongBuffer, ShortBuffer。对应了几大基本数据类型。</p>\n<blockquote>\n<p>ByteBuffer可以选择实例化为DirectByteBuffer和HeapByteBuffer，如果数据量比较小的中小应用情况下，可以考虑使用heapBuffer；反之可以用directBuffer。一般来说DirectByteBuffer可以减少一次系统空间到用户空间的拷贝。但Buffer创建和销毁的成本更高，更不宜维护，通常会用内存池来提高性能。其他buffer类似。</p>\n</blockquote>\n<h3 id=\"利用Buffer读写数据步骤\"><a href=\"#利用Buffer读写数据步骤\" class=\"headerlink\" title=\"利用Buffer读写数据步骤\"></a>利用Buffer读写数据步骤</h3><ol>\n<li>将数据写入buffer</li>\n<li>调用flip将写模式改为读模式</li>\n<li>从buffer中读取数据，进行操作</li>\n<li>调用clear()清除整个buffer数据或者调用compact()清空已读数据</li>\n</ol>\n<h3 id=\"buffer的属性\"><a href=\"#buffer的属性\" class=\"headerlink\" title=\"buffer的属性\"></a>buffer的属性</h3><ul>\n<li>capacity容量，该buffer最多存储的字节数</li>\n<li>position位置，写模式下，position从0到capacity-1，变更为读模式后，position归零，边读边移动</li>\n<li>limit限制，写模式下，代表我们能写的最大量为capacity，读模式下，变更为原position位置，即有数据的位置</li>\n</ul>\n<p><img data-src=\"/images/nio/buffer_modes.png\" alt=\"buffer_modes\"></p>\n<h3 id=\"buffer-api\"><a href=\"#buffer-api\" class=\"headerlink\" title=\"buffer api\"></a>buffer api</h3><ul>\n<li>通过allocate()方法为buffer分配内存大小，如开辟一个48字节的ByteBuffer buffer：ByteBuffer.allocate(48)</li>\n<li>写数据可以通过通道写，如：FileChannel.read(buffer)；也可以通过put方法来写数据，如：buffer.put(127)</li>\n<li>flip()翻转方法，将写模式切换到读模式，position归零，设置limit为之前的position位置</li>\n<li>读数据可以读到通道，如：FileChannel.write(buffer)；也可以调用get()方法读取，byte aByte=buffer.get()</li>\n<li>buffer.rewind()将position置0，limit不变，这样我们就可以重复读取数据啦</li>\n<li>buffer.clear()将position置为0，limit设置为capacity，这里并没有删除buffer里面的数据，只是把标记位置改了；</li>\n<li>buffer.compact()清除已读数据，这里也没有删除数据，将position设置为未读的个数，将后面几个未读的字节顺序的复制到前面的几个字节，limit设置为capacity，比如buffer容量3个字节，读取hello，在读取了2个字节后我就调用了compact()方法，那么此时position为1，limit为3，buffer内部存储的数据buff[0]=’l’,buff[1]=’e’,buff[2]=’l’，因为有一个’l’没有读完，将’l’提取到最前面供下次读取</li>\n<li>mark()可以标记当前的position位置，通过reset来恢复mark位置，可以用来实现重复读取满足条件的数据块</li>\n<li>equals()两个buffer相等需满足，类型相同，buffer剩余（未读）字节数相同，所有剩余字节数相同</li>\n<li>compareTo()比较buffer中的剩余元素，只不过此方法适合排序</li>\n</ul>\n<h2 id=\"Channel（通道）\"><a href=\"#Channel（通道）\" class=\"headerlink\" title=\"Channel（通道）\"></a>Channel（通道）</h2><h3 id=\"Channel的重要实现\"><a href=\"#Channel的重要实现\" class=\"headerlink\" title=\"Channel的重要实现\"></a>Channel的重要实现</h3><ul>\n<li>FileChannel用于文件数据的读写，transferTo()方法可以将通道的数据传送至另外一个通道，完成数据的复制</li>\n<li>DatagramChannel用于UDP数据的读写</li>\n<li>SocketChannel用于TCP的数据读写，通常我们所说的客户端套接字通道</li>\n<li>ServerSocketChannel允许我们监听TCP链接请求，通常我们所说的服务端套接字通道，每一个请求都会创建一个SocketChannel</li>\n</ul>\n<h3 id=\"Scatter和Gather\"><a href=\"#Scatter和Gather\" class=\"headerlink\" title=\"Scatter和Gather\"></a>Scatter和Gather</h3><p>Java nio在Channel实现类也实现了Scatter和Gather相关类</p>\n<ul>\n<li>Scatter.read()是从通道读取的操作能把数据写入多个buffer，即一个通道向多个buffer写数据的过程，但是read必须写满一个buffer后才会向后移动到下一个buffer，因此read不适合大小会动态改变的数据。代码如下：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ByteBuffer</span> <span class=\"variable\">header</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">128</span>);</span><br><span class=\"line\"><span class=\"type\">ByteBuffer</span> <span class=\"variable\">body</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">ByteBuffer[] bufferArray = &#123; header, body &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>channel.read(bufferArray);<br>Gather.write()是从可以把多个buffer的数据写入通道，write是只会写position到limit之间的数据，因此写是可以适应大小动态改变的数据。代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ByteBuffer</span> <span class=\"variable\">header</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">128</span>);</span><br><span class=\"line\"><span class=\"type\">ByteBuffer</span> <span class=\"variable\">body</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\"><span class=\"comment\">//write data into buffers</span></span><br><span class=\"line\">ByteBuffer[] bufferArray = &#123; header, body &#125;;</span><br><span class=\"line\">channel.write(bufferArray);</span><br></pre></td></tr></table></figure>\n\n<p>在有些场景会非常有用，比如处理多份需要分开传输的数据，举例来说，假设一个消息包含了header和body，我们可能会把header和body分别放在不同的buffer</p>\n<h2 id=\"Selector（选择器）\"><a href=\"#Selector（选择器）\" class=\"headerlink\" title=\"Selector（选择器）\"></a>Selector（选择器）</h2><p>Selector用于检查一个或多个NIO Channel的状态是否可读可写，这样就可以实现单线程管理多个Channels，也就是可以管理多个网络连接，NIO非阻塞主要就是通过Selector注册事件监听，监听通道将数据就绪后，就进行实际的读写操作，因此前面说的IO两个阶段，一阶段NIO仅仅是异步监听，二阶段就是同步实际操作数据。</p>\n<h3 id=\"Selector监听事件类别\"><a href=\"#Selector监听事件类别\" class=\"headerlink\" title=\"Selector监听事件类别\"></a>Selector监听事件类别</h3><ul>\n<li>SelectionKey.OP_CONNECT是Channel和server连接成功后，连接就绪</li>\n<li>SelectionKey.OP_ACCEPT是server Channel接收请求连接就绪</li>\n<li>SelectionKey.OP_READ是Channel有数据可读时，处于读就绪</li>\n<li>SelectionKey.OP_WRITE是Channel可以进行数据写入是，写就绪</li>\n</ul>\n<h3 id=\"使用Selector的步骤\"><a href=\"#使用Selector的步骤\" class=\"headerlink\" title=\"使用Selector的步骤\"></a>使用Selector的步骤</h3><ul>\n<li>创建一个Selector，Selector selector = Selector.open();</li>\n<li>注册Channel到Selector上面，将Channel切换为非阻塞的：channel.configureBlocking(false)，然后绑定Selector：SelectionKey key = channel.register(selector, SelectionKey.OP_READ);</li>\n<li>SelectionKey.OP_READ为监听的事件类别，如果要监听多个事件，可利用位的或运算结合多个常量如：int interestSet = SelectionKey.OP_READ | SelectionKey.OP_WRITE;</li>\n</ul>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Selector</span> <span class=\"variable\">selector</span> <span class=\"operator\">=</span> Selector.open();</span><br><span class=\"line\"><span class=\"type\">SocketChannel</span> <span class=\"variable\">clientChannel</span> <span class=\"operator\">=</span> SocketChannel.open();</span><br><span class=\"line\">clientChannel.configureBlocking(<span class=\"literal\">false</span>);</span><br><span class=\"line\">clientChannel.connect(<span class=\"keyword\">new</span> <span class=\"title class_\">InetSocketAddress</span>(port));</span><br><span class=\"line\">clientChannel.register(selector, SelectionKey.OP_CONNECT);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>需要使用Selector的Channel必须是非阻塞的，FileChannel不能切换为非租塞的，因此FileChannel不适用于Selector</p>\n</blockquote>\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><ul>\n<li>Selector.select()方法是阻塞的，因此可以放心的将它写在while(true)中，不用担心cpu会空转</li>\n<li>Selector.wakeup()唤醒select()造成的阻塞，可能是有新的事件注册，优先级更高的事件触发（如定时器事件），希望及时处理。其原理是向通道或者连接中写入一个字节，阻塞的select因为有IO事件就绪，立即返回</li>\n</ul>\n","tags":["Java"]},{"title":"ReentrantLock - 可重入互斥锁","url":"/2017/09/02/ReentrantLock/","content":"<h2 id=\"锁的可重入性\"><a href=\"#锁的可重入性\" class=\"headerlink\" title=\"锁的可重入性\"></a>锁的可重入性</h2><p>先举例来说明锁的可重入性：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UnReentrant</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Lock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Lock</span>();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">outer</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        inner();</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">inner</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"comment\">//do something</span></span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>outer 中调用了 inner, outer 先锁住了 lock, 这样 inner 就不能再获取 lock。其实调用 outer 的线程已经获取了 lock 锁, 但是不能在 inner 中重复利用已经获取的锁资源, 这种锁即称之为 <code>不可重入</code> 。通常也称为 <code>自旋锁</code> 。相对来说, 可重入就意味着：线程可以进入任何一个它已经拥有的锁所同步着的代码块。</p>\n<h2 id=\"ReentrantLock-相比-synchronized-有如下几个优势\"><a href=\"#ReentrantLock-相比-synchronized-有如下几个优势\" class=\"headerlink\" title=\"ReentrantLock 相比 synchronized 有如下几个优势\"></a>ReentrantLock 相比 synchronized 有如下几个优势</h2><ol>\n<li><p>可以反复进入, 同一个线程获得几个锁, 在释放的时候也需要同等释放, 要不然会死锁的（其实 synchronized 也是可重入的）；</p>\n</li>\n<li><p>支持锁中断 lockInterruptiblity(), 防死锁, 优先响应中断；</p>\n</li>\n<li><p>支持限时获取锁, lock.tryLock(int,TimeUnit); 在给定的时间范围捏尝试获取锁；</p>\n</li>\n<li><p>支持尝试获取锁, tryLock 不带参数, 如果获取不到则立刻返回 false, 而不等待锁；</p>\n</li>\n<li><p>公平锁 ReentrantLock(boolean fair), 排队获取锁, 性能相对低下；</p>\n</li>\n<li><p>配合 Condition, 可以让线程在合适的时间等待, 得到通知后继续执行。</p>\n</li>\n</ol>\n","tags":["Java","Concurrency"]},{"title":"Synchronized 了解","url":"/2017/09/04/Synchronized/","content":"<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>sychronized 一般用来修饰一个方法或者一个代码块。利用 sychronized 实现同步的基础：java 中每一个对象都可以作为锁。具体表现为以下 3 中形式。</p>\n<ol>\n<li><p>修饰一个代码块, 被修饰的代码块称为同步语句块, 其作用的范围是大括号{}括起来的代码, 作用的对象是调用这个代码块的对象；</p>\n</li>\n<li><p>修饰一个方法, 被修饰的方法称为同步方法, 其作用的范围是整个方法, 作用的对象是调用这个方法的对象；</p>\n</li>\n<li><p>修改一个静态的方法, 其作用的范围是整个静态方法, 作用的对象是这个类的所有对象；</p>\n</li>\n<li><p>修改一个类, 其作用的范围是synchronized后面括号括起来的部分, 作用主的对象是这个类的所有对象。</p>\n</li>\n</ol>\n<p>一个线程访问一个对象的synchronized代码块时, 别的线程可以访问该对象的非synchronized代码块而不受阻塞。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li><p>无论synchronized关键字加在方法上还是对象上, 如果它作用的对象是非静态的, 则它取得的锁是对象；如果synchronized作用的对象是一个静态方法或一个类, 则它取得的锁是对类, 该类所有的对象同一把锁。</p>\n</li>\n<li><p>每个对象只有一个锁（lock）与之相关联, 谁拿到这个锁谁就可以运行它所控制的那段代码。</p>\n</li>\n<li><p>实现同步是要很大的系统开销作为代价的, 甚至可能造成死锁, 所以尽量避免无谓的同步控制。</p>\n</li>\n</ol>\n","tags":["Java","Concurrency"]},{"title":"双网卡访问特定ip网段走指定网卡(Windows)","url":"/2024/05/22/Win-route/","content":"<blockquote>\n<p>管理员运行cmd</p>\n</blockquote>\n<h2 id=\"查看路由表信息\"><a href=\"#查看路由表信息\" class=\"headerlink\" title=\"查看路由表信息\"></a>查看路由表信息</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">route <span class=\"built_in\">print</span> -4</span><br></pre></td></tr></table></figure>\n\n<p>找到需要配置的双网卡</p>\n<span id=\"more\"></span>\n\n<h2 id=\"删除默认路由\"><a href=\"#删除默认路由\" class=\"headerlink\" title=\"删除默认路由\"></a>删除默认路由</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">route delete 0.0.0.0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"可访问外网的网卡当前的网关IP\"><a href=\"#可访问外网的网卡当前的网关IP\" class=\"headerlink\" title=\"可访问外网的网卡当前的网关IP\"></a>可访问外网的网卡当前的网关IP</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">route add 0.0.0.0 mask 0.0.0.0 [可访问外网的网卡当前的网关IP] -p</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"可访问内网的网卡当前的网关IP\"><a href=\"#可访问内网的网卡当前的网关IP\" class=\"headerlink\" title=\"可访问内网的网卡当前的网关IP\"></a>可访问内网的网卡当前的网关IP</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">route add 192.168.1.0 mask 255.255.255.0 [可访问内网的网卡当前的网关IP] -p</span><br></pre></td></tr></table></figure>\n","tags":["shell"]},{"title":"Java线程池类","url":"/2018/03/20/ThreadPool/","content":"<h2 id=\"线程池的优点\"><a href=\"#线程池的优点\" class=\"headerlink\" title=\"线程池的优点\"></a>线程池的优点</h2><ol>\n<li><p>线程是稀缺资源，使用线程池可以减少创建和销毁线程的次数，每个工作线程都可以重复使用。</p>\n</li>\n<li><p>可以根据系统的承受能力，调整线程池中工作线程的数量，防止因为消耗过多内存导致服务器崩溃。</p>\n</li>\n</ol>\n<h2 id=\"线程池的原理\"><a href=\"#线程池的原理\" class=\"headerlink\" title=\"线程池的原理\"></a>线程池的原理</h2><p>当我们把一个Runnable交给线程池去执行的时候，这个线程池处理的流程是这样的：</p>\n<ol>\n<li>当线程数小于corePoolSize时，创建线程执行任务。</li>\n<li>当线程数大于等于corePoolSize并且workQueue没有满时，放入workQueue中</li>\n<li>线程数大于等于corePoolSize并且当workQueue满时，新任务新建线程运行，线程总数要小于maximumPoolSize</li>\n<li>当线程总数等于maximumPoolSize并且workQueue满了的时候执行handler的rejectedExecution。也就是拒绝策略。</li>\n</ol>\n<h2 id=\"任务拒接策略-RejectedExecutionHandler\"><a href=\"#任务拒接策略-RejectedExecutionHandler\" class=\"headerlink\" title=\"任务拒接策略(RejectedExecutionHandler)\"></a>任务拒接策略(RejectedExecutionHandler)</h2><p>当队列和线程池都满了的时候，再有新的任务到达，就必须要有一种办法来处理新来的任务。Java线程池中提供了以下四种策略：</p>\n<ol>\n<li>AbortPolicy: 直接抛异常</li>\n<li>CallerRunsPolicy：让调用者帮着跑这个任务</li>\n<li>DiscardOldestPolicy：会抛弃任务队列中最旧的任务，再把这个新任务添加进去。</li>\n<li>DiscardPolicy：不处理，直接扔掉</li>\n</ol>\n<span id=\"more\"></span>\n\n<h2 id=\"ExecutorService\"><a href=\"#ExecutorService\" class=\"headerlink\" title=\"ExecutorService\"></a>ExecutorService</h2><p>Java中的线程池类有两个，分别是：ThreadPoolExecutor和ScheduledThreadPoolExecutor，这两个类都继承自ExecutorService。利用这两个类，可以创建各种不同的Java线程池，为了方便我们创建线程池，Java API提供了Executors工厂类来帮助我们创建各种各样的线程池。</p>\n<p>Java线程池ExecutorService继承树：</p>\n<p><img data-src=\"/images/threadpool/ExecutorService%E7%BB%A7%E6%89%BF%E6%A0%91.jpg\" alt=\"ExecutorService继承树\"></p>\n<!-- more -->\n\n<h3 id=\"ExecutorService的方法\"><a href=\"#ExecutorService的方法\" class=\"headerlink\" title=\"ExecutorService的方法\"></a>ExecutorService的方法</h3><h4 id=\"execute-Runnable\"><a href=\"#execute-Runnable\" class=\"headerlink\" title=\"execute(Runnable)\"></a>execute(Runnable)</h4><p>这个方法接收一个Runnable实例，并且异步的执行，例子如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ExecutorService</span> <span class=\"variable\">executorService</span> <span class=\"operator\">=</span> Executors.newSingleThreadExecutor();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//java 7</span></span><br><span class=\"line\">executorService.execute(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Asynchronous task&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//java 8 lambda</span></span><br><span class=\"line\">executorService.execute(() -&gt; &#123;</span><br><span class=\"line\">  System.out.println(<span class=\"string\">&quot;Asynchronous task&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">executorService.shutdown();</span><br></pre></td></tr></table></figure>\n\n<p>这个方法有个问题，就是没有办法获知task的执行结果。如果我们想获得task的执行结果，我们可以传入一个Callable的实例。</p>\n<h4 id=\"submit-Runnable\"><a href=\"#submit-Runnable\" class=\"headerlink\" title=\"submit(Runnable)\"></a>submit(Runnable)</h4><p>submit(Runnable)可以返回一个Future对象，通过返回的Future对象，我们可以检查提交的任务是否执行完毕，例子如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//java 7</span></span><br><span class=\"line\"><span class=\"type\">Future</span> <span class=\"variable\">future</span> <span class=\"operator\">=</span> executorService.submit(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Asynchronous task&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//java 8 lambda</span></span><br><span class=\"line\"><span class=\"type\">Future</span> <span class=\"variable\">future</span> <span class=\"operator\">=</span> executorService.execute(() -&gt; &#123;</span><br><span class=\"line\">  System.out.println(<span class=\"string\">&quot;Asynchronous task&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">future.get();  <span class=\"comment\">//returns null if the task has finished correctly.</span></span><br></pre></td></tr></table></figure>\n\n<p>如果任务执行完成，future.get()方法会返回一个null。注意，future.get()方法会产生阻塞。</p>\n<h4 id=\"submit-Callable\"><a href=\"#submit-Callable\" class=\"headerlink\" title=\"submit(Callable)\"></a>submit(Callable)</h4><p>submit(Callable)和submit(Runnable)类似，也会返回一个Future对象，但是除此之外，submit(Callable)接收的是一个Callable的实现，Callable接口中的call()方法有一个返回值，可以返回任务的执行结果，而Runnable接口中的run()方法是void的，没有返回值。例子如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//java 7</span></span><br><span class=\"line\"><span class=\"type\">Future</span> <span class=\"variable\">future</span> <span class=\"operator\">=</span> executorService.submit(<span class=\"keyword\">new</span> <span class=\"title class_\">Callable</span>()&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span> Object <span class=\"title function_\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Asynchronous Callable&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Callable Result&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//java 8 lambda</span></span><br><span class=\"line\">Future&lt;String&gt; future = executorService.submit(() -&gt; &#123;</span><br><span class=\"line\">  System.out.println(<span class=\"string\">&quot;Asynchronous Callable&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;Callable Result&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;future done? &quot;</span> + future.isDone());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> future.get();</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;future done? &quot;</span> + future.isDone());</span><br><span class=\"line\">System.out.print(<span class=\"string\">&quot;result: &quot;</span> + result);</span><br></pre></td></tr></table></figure>\n\n<p>如果任务执行完成，future.get()方法会返回Callable任务的执行结果。注意，future.get()方法会产生阻塞。</p>\n<h4 id=\"Timeouts\"><a href=\"#Timeouts\" class=\"headerlink\" title=\"Timeouts\"></a>Timeouts</h4><p>任何future.get()调用都会阻塞，然后等待直到callable中止。在最糟糕的情况下，一个callable持续运行——因此使你的程序将没有响应。我们可以简单的传入一个时长来避免这种情况。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ExecutorService</span> <span class=\"variable\">executor</span> <span class=\"operator\">=</span> Executors.newFixedThreadPool(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Future&lt;Integer&gt; future = executor.submit(() -&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    TimeUnit.SECONDS.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">123</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalStateException</span>(<span class=\"string\">&quot;task interrupted&quot;</span>, e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">future.get(<span class=\"number\">1</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>\n\n<p>运行上面的代码将会产生一个TimeoutException：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Exception in thread <span class=\"string\">&quot;main&quot;</span> java.util.concurrent.TimeoutException</span><br><span class=\"line\">    at java.util.concurrent.FutureTask.get(FutureTask.java:<span class=\"number\">205</span>)</span><br></pre></td></tr></table></figure>\n\n<p>我们指定的最长等待时间为1分钟，而这个callable在返回结果之前实际需要两分钟。</p>\n<h4 id=\"invokeAny-…\"><a href=\"#invokeAny-…\" class=\"headerlink\" title=\"invokeAny(…)\"></a>invokeAny(…)</h4><p>invokeAny(…)方法接收的是一个Callable的集合，执行这个方法不会返回Future，但是会返回所有Callable任务中任意一个成功的结果(如果没有异常发生)，如果有正常或者异常的返回，那么那些没有完成的任务将会取消。例子如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ExecutorService</span> <span class=\"variable\">executorService</span> <span class=\"operator\">=</span> Executors.newSingleThreadExecutor();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//java 7</span></span><br><span class=\"line\">Set&lt;Callable&lt;String&gt;&gt; callables = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;Callable&lt;String&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">callables.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Callable</span>&lt;String&gt;() &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Task 1&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">callables.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Callable</span>&lt;String&gt;() &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Task 2&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">callables.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Callable</span>&lt;String&gt;() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Task 3&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//java 8</span></span><br><span class=\"line\">List&lt;Callable&lt;String&gt;&gt; callables = Arrays.asList(</span><br><span class=\"line\">        () -&gt; <span class=\"string\">&quot;task2&quot;</span>,</span><br><span class=\"line\">        () -&gt; <span class=\"string\">&quot;task1&quot;</span>,</span><br><span class=\"line\">        () -&gt; <span class=\"string\">&quot;task3&quot;</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> executorService.invokeAny(callables);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;result = &quot;</span> + result);</span><br><span class=\"line\">executorService.shutdown();</span><br></pre></td></tr></table></figure>\n\n<p>执行上面代码，每次执行都会返回一个结果，并且返回的结果是变化的。</p>\n<h4 id=\"invokeAll-…\"><a href=\"#invokeAll-…\" class=\"headerlink\" title=\"invokeAll(…)\"></a>invokeAll(…)</h4><p>invokeAll(…)与 invokeAny(…)类似也是接收一个Callable集合，但是前者执行之后会返回一个Future的List，其中对应着每个Callable任务执行后的Future对象。例子如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ExecutorService</span> <span class=\"variable\">executorService</span> <span class=\"operator\">=</span> Executors.newSingleThreadExecutor();</span><br><span class=\"line\"></span><br><span class=\"line\">Set&lt;Callable&lt;String&gt;&gt; callables = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;Callable&lt;String&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">callables.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Callable</span>&lt;String&gt;() &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Task 1&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">callables.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Callable</span>&lt;String&gt;() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Task 2&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">callables.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Callable</span>&lt;String&gt;() &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Task 3&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">List&lt;Future&lt;String&gt;&gt; futures = executorService.invokeAll(callables);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(Future&lt;String&gt; future : futures)&#123;</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;future.get = &quot;</span> + future.get());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">executorService.shutdown();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ExecutorService的关闭\"><a href=\"#ExecutorService的关闭\" class=\"headerlink\" title=\"ExecutorService的关闭\"></a>ExecutorService的关闭</h3><p>当我们使用完成ExecutorService之后应该关闭它，否则它里面的线程会一直处于运行状态。</p>\n<p>举个例子，如果的应用程序是通过main()方法启动的，在这个main()退出之后，如果应用程序中的ExecutorService没有关闭，这个应用将一直运行。之所以会出现这种情况，是因为ExecutorService中运行的线程会阻止JVM关闭。</p>\n<p>如果要关闭ExecutorService中执行的线程，我们可以调用 <code>ExecutorService.shutdown()</code> 方法。在调用shutdown()方法之后，ExecutorService不会立即关闭，但是它不再接收新的任务，直到当前所有线程执行完成才会关闭，所有在shutdown()执行之前提交的任务都会被执行。</p>\n<p>如果我们想立即关闭ExecutorService，我们可以调用 <code>ExecutorService.shutdownNow()方法</code> 。这个动作将跳过所有正在执行的任务和被提交还没有执行的任务。但是它并不对正在执行的任务做任何保证，有可能它们都会停止，也有可能执行完成。</p>\n<p>通常关闭executors的方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  System.out.println(<span class=\"string\">&quot;attempt to shutdown executor&quot;</span>);</span><br><span class=\"line\">  executor.shutdown();</span><br><span class=\"line\">  executor.awaitTermination(<span class=\"number\">5</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">  System.err.println(<span class=\"string\">&quot;tasks interrupted&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!executor.isTerminated()) &#123;</span><br><span class=\"line\">      System.err.println(<span class=\"string\">&quot;cancel non-finished tasks&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  executor.shutdownNow();</span><br><span class=\"line\">  System.out.println(<span class=\"string\">&quot;shutdown finished&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>executor通过等待指定的时间让当前执行的任务终止来“温柔的”关闭executor。在等待最长N分钟的时间后，execuote最终会通过中断所有的正在执行的任务关闭。</p>\n<h2 id=\"Executors\"><a href=\"#Executors\" class=\"headerlink\" title=\"Executors\"></a>Executors</h2><p>Executors的工厂方法提供的5种不同的线程池。Executors只是一个工厂类，它所有的方法返回的都是ThreadPoolExecutor、ScheduledThreadPoolExecutor这两个类的实例。</p>\n<p>重载后的版本，需要多传入实现了ThreadFactory接口的对象。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> newFixedThreadPool(int nThreads)</span><br><span class=\"line\"></span><br><span class=\"line\">创建可重用固定大小(nThreads,大小不能超过int的最大值)的线程池，以共享的无界队列方式来运行这些线程，缓冲任务的队列为LinkedBlockingQueue，大小为整型的最大数。</span><br><span class=\"line\"></span><br><span class=\"line\">当使用此线程池时，在同执行的任务数量超过传入的线程池大小值后，将会放入LinkedBlockingQueue，在LinkedBlockingQueue中的任务需要等待线程空闲后再执行，如果放入LinkedBlockingQueue中的任务超过整型的最大数时，抛出RejectedExecutionException。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">2.</span> newCachedThreadPool()</span><br><span class=\"line\"></span><br><span class=\"line\">缓存线程池大小是不定值，可以需要创建不同数量的线程。</span><br><span class=\"line\"></span><br><span class=\"line\">在使用缓存型池时，先查看池中有没有空闲的线程，如果有，就复用。如果没有，就新建新的线程加入池中。</span><br><span class=\"line\"></span><br><span class=\"line\">缓存型池子通常用于执行一些生存期很短的异步型任务。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">3.</span> newSingleThreadExecutor()</span><br><span class=\"line\"></span><br><span class=\"line\">创建大小为1的固定线程池，同时执行任务(task)的只有一个,其它的任务(task)都放在LinkedBlockingQueue中排队等待执行。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">4.</span> newScheduledThreadPool(int corePoolSize)</span><br><span class=\"line\"></span><br><span class=\"line\">该方法返回一个可以控制线程池内线程延时或周期性执行某任务的线程池。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">5.</span> newSingleThreadScheduledExecutor()</span><br><span class=\"line\"></span><br><span class=\"line\">该方法返回一个可以控制线程池内线程定时或周期性执行某任务的线程池。只不过和上面的区别是该线程池大小为1，而上面的可以指定线程池的大小。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ThreadPoolExecutor\"><a href=\"#ThreadPoolExecutor\" class=\"headerlink\" title=\"ThreadPoolExecutor\"></a>ThreadPoolExecutor</h2><p>先来通过ThreadPoolExecutor的构造方法了解一下这个类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"type\">int</span> corePoolSize,</span></span><br><span class=\"line\"><span class=\"params\">                             <span class=\"type\">int</span> maximumPoolSize,</span></span><br><span class=\"line\"><span class=\"params\">                             <span class=\"type\">long</span> keepAliveTime,</span></span><br><span class=\"line\"><span class=\"params\">                             TimeUnit unit,</span></span><br><span class=\"line\"><span class=\"params\">                             BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class=\"line\"><span class=\"params\">                             ThreadFactory threadFactory,</span></span><br><span class=\"line\"><span class=\"params\">                             RejectedExecutionHandler handler)</span></span><br></pre></td></tr></table></figure>\n\n<p>主要参数有:</p>\n<p>corePoolSize 核心线程的数量，不超过这个参数数量的线程会被保留在线程池内，即使它们是空闲的，如果设置了allowCoreThreadTimeOut为true除外。</p>\n<p>maximumPoolSize 线程池所允许拥有线程的最大数量，当任务队列的任务已满，线程数已达到最大数量，任务会被拒绝。</p>\n<p>keepAliveTime 当线程池的线程数量超过核心线程的数量，这些非核心线程会尝试在keepAliveTime内获取队列内的任务，如果获取失败则被线程池移除并终止。</p>\n<p>unit 超时时间的单位。</p>\n<p>workQueue 任务的阻塞队列，缓存将要执行的Runnable任务，由各线程轮询该任务队列获取任务执行。</p>\n<p>threadFactory 线程创建的工厂。</p>\n<p>handler 当任务由于线程数量或者任务队列达到上限，会执行该接口的方法处理任务的拒绝。</p>\n<h3 id=\"ThreadPoolExecutor的状态变量\"><a href=\"#ThreadPoolExecutor的状态变量\" class=\"headerlink\" title=\"ThreadPoolExecutor的状态变量\"></a>ThreadPoolExecutor的状态变量</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">AtomicInteger</span> <span class=\"variable\">ctl</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(ctlOf(RUNNING, <span class=\"number\">0</span>));</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">COUNT_BITS</span> <span class=\"operator\">=</span> Integer.SIZE - <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">CAPACITY</span>   <span class=\"operator\">=</span> (<span class=\"number\">1</span> &lt;&lt; COUNT_BITS) - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// runState is stored in the high-order bits</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">RUNNING</span>    <span class=\"operator\">=</span> -<span class=\"number\">1</span> &lt;&lt; COUNT_BITS;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">SHUTDOWN</span>   <span class=\"operator\">=</span>  <span class=\"number\">0</span> &lt;&lt; COUNT_BITS;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">STOP</span>       <span class=\"operator\">=</span>  <span class=\"number\">1</span> &lt;&lt; COUNT_BITS;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">TIDYING</span>    <span class=\"operator\">=</span>  <span class=\"number\">2</span> &lt;&lt; COUNT_BITS;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">TERMINATED</span> <span class=\"operator\">=</span>  <span class=\"number\">3</span> &lt;&lt; COUNT_BITS;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Packing and unpacking ctl</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">runStateOf</span><span class=\"params\">(<span class=\"type\">int</span> c)</span>     &#123; <span class=\"keyword\">return</span> c &amp; ~CAPACITY; &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">workerCountOf</span><span class=\"params\">(<span class=\"type\">int</span> c)</span>  &#123; <span class=\"keyword\">return</span> c &amp; CAPACITY; &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">ctlOf</span><span class=\"params\">(<span class=\"type\">int</span> rs, <span class=\"type\">int</span> wc)</span> &#123; <span class=\"keyword\">return</span> rs | wc; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>ctl是ThreadPoolExecutor的同步状态变量。</p>\n<p>workerCountOf()方法取得当前线程池的线程数量，算法是将ctl的值取低29位。</p>\n<p>runStateOf()方法取得线程池的状态，算法是将ctl的值取高3位:</p>\n<ol>\n<li>RUNNING 111 表示正在运行</li>\n<li>SHUTDOWN 000 表示拒绝接收新的任务</li>\n<li>STOP 001 表示拒绝接收新的任务并且不再处理任务队列中剩余的任务，并且中断正在执行的任务。</li>\n<li>TIDYING 010 表示所有线程已停止，准备执行terminated()方法。</li>\n<li>TERMINATED 011 表示已执行完terminated()方法。</li>\n</ol>\n<h3 id=\"Executor-execute-Runnable-command\"><a href=\"#Executor-execute-Runnable-command\" class=\"headerlink\" title=\"Executor.execute(Runnable command)\"></a>Executor.execute(Runnable command)</h3><p>该方法将使用线程池执行Runnable对象的run()方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(Runnable command)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (command == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Proceed in 3 steps:</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * 1. If fewer than corePoolSize threads are running, try to</span></span><br><span class=\"line\"><span class=\"comment\">     * start a new thread with the given command as its first</span></span><br><span class=\"line\"><span class=\"comment\">     * task.  The call to addWorker atomically checks runState and  * workerCount, and so prevents false alarms that would add</span></span><br><span class=\"line\"><span class=\"comment\">     * threads when it shouldn&#x27;t, by returning false.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * 2. If a task can be successfully queued, then we still</span></span><br><span class=\"line\"><span class=\"comment\">     * to double-check whether we should have added a thread</span></span><br><span class=\"line\"><span class=\"comment\">     * (because existing ones died since last checking) or that</span></span><br><span class=\"line\"><span class=\"comment\">     * the pool shut down since entry into this method. So we</span></span><br><span class=\"line\"><span class=\"comment\">     * recheck state and if necessary roll back the enqueuing if</span></span><br><span class=\"line\"><span class=\"comment\">     * stopped, or start a new thread if there are none.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * 3. If we cannot queue task, then we try to add a new</span></span><br><span class=\"line\"><span class=\"comment\">     * thread.  If it fails, we know we are shut down or rated</span></span><br><span class=\"line\"><span class=\"comment\">     * and so reject the task.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> ctl.get();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (addWorker(command, <span class=\"literal\">true</span>))</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        c = ctl.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">recheck</span> <span class=\"operator\">=</span> ctl.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class=\"line\">            reject(command);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (workerCountOf(recheck) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            addWorker(<span class=\"literal\">null</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!addWorker(command, <span class=\"literal\">false</span>))</span><br><span class=\"line\">        reject(command);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码对应了三种情况:</p>\n<ol>\n<li>线程池的线程数量小于核心线程数量上限，开启核心线程执行任务。</li>\n<li>线程池的线程数量不小于核心线程数量上限，或者开启核心线程失败，尝试将任务以非阻塞的方式添加到任务队列。</li>\n<li>任务队列以满导致添加任务失败，开启新的非核心线程执行任务。</li>\n</ol>\n<p>回顾FixedThreadPool，因为它配置的corePoolSize与maximumPoolSize相等，所以不会执行到情况3，并且因为workQueue为默认的LinkedBlockingQueue，其长度为Integer.MAX_VALUE，几乎不可能出现任务无法被添加到workQueue的情况，所以FixedThreadPool的所有任务执行在核心线程中。</p>\n<p>而CachedThreadPool的corePoolSize为0，表示它不会执行到情况1，因为它的maximumPoolSize为Integer.MAX_VALUE，所以几乎没有线程数量上限，因为它的workQueue为SynchronousQueue，所以当线程池里没有闲置的线程SynchronousQueue就会添加任务失败，因此会执行到情况3添加新的线程执行任务。</p>\n<h3 id=\"addWorker方法\"><a href=\"#addWorker方法\" class=\"headerlink\" title=\"addWorker方法\"></a>addWorker方法</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">addWorker</span><span class=\"params\">(Runnable firstTask, <span class=\"type\">boolean</span> core)</span> &#123;</span><br><span class=\"line\">    retry:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> ctl.get();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">rs</span> <span class=\"operator\">=</span> runStateOf(c);</span><br><span class=\"line\">        <span class=\"comment\">// Check if queue empty only if necessary.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rs &gt;= SHUTDOWN &amp;&amp;</span><br><span class=\"line\">            ! (rs == SHUTDOWN &amp;&amp;</span><br><span class=\"line\">               firstTask == <span class=\"literal\">null</span> &amp;&amp;</span><br><span class=\"line\">               ! workQueue.isEmpty()))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">wc</span> <span class=\"operator\">=</span> workerCountOf(c);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (wc &gt;= CAPACITY ||</span><br><span class=\"line\">                wc &gt;= (core ? corePoolSize : maximumPoolSize))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compareAndIncrementWorkerCount(c))</span><br><span class=\"line\">                <span class=\"keyword\">break</span> retry;</span><br><span class=\"line\">            c = ctl.get();  <span class=\"comment\">// Re-read ctl</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (runStateOf(c) != rs)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span> retry;</span><br><span class=\"line\">            <span class=\"comment\">// else CAS failed due to workerCount change; retry inner loop</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">workerStarted</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">workerAdded</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"type\">Worker</span> <span class=\"variable\">w</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        w = <span class=\"keyword\">new</span> <span class=\"title class_\">Worker</span>(firstTask);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">Thread</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> w.thread;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">mainLock</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.mainLock;</span><br><span class=\"line\">            mainLock.lock();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Recheck while holding lock.</span></span><br><span class=\"line\">                <span class=\"comment\">// Back out on ThreadFactory failure or if</span></span><br><span class=\"line\">                <span class=\"comment\">// shut down before lock acquired.</span></span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">rs</span> <span class=\"operator\">=</span> runStateOf(ctl.get());</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (rs &lt; SHUTDOWN ||</span><br><span class=\"line\">                    (rs == SHUTDOWN &amp;&amp; firstTask == <span class=\"literal\">null</span>)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (t.isAlive()) <span class=\"comment\">// precheck that t is table</span></span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalThreadStateException</span>();</span><br><span class=\"line\">                    workers.add(w);</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> workers.size();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (s &gt; largestPoolSize)</span><br><span class=\"line\">                        largestPoolSize = s;</span><br><span class=\"line\">                    workerAdded = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                mainLock.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (workerAdded) &#123;</span><br><span class=\"line\">                t.start();</span><br><span class=\"line\">                workerStarted = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (! workerStarted)</span><br><span class=\"line\">            addWorkerFailed(w);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> workerStarted;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>addWorker这个方法先尝试在线程池运行状态为RUNNING并且线程数量未达上限的情况下通过CAS操作将线程池数量+1,接着在ReentrantLock同步锁的同步保证下判断线程池为运行状态，然后把Worker添加到HashSet workers中。如果添加成功则执行Worker的内部线程。</p>\n<h3 id=\"Worker构造方法\"><a href=\"#Worker构造方法\" class=\"headerlink\" title=\"Worker构造方法\"></a>Worker构造方法</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Worker(Runnable firstTask) &#123;</span><br><span class=\"line\">    setState(-<span class=\"number\">1</span>); <span class=\"comment\">// inhibit interrupts until runWorker</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.firstTask = firstTask;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.thread = getThreadFactory().newThread(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里指定了第一个要执行的任务，并通过线程池的线程工厂创建线程。可以发现这个线程的参数为this，即Worker对象，因为Worker实现了Runnable因此可以被当成任务执行，执行的即Worker实现的run方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    runWorker(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"runWorker方法\"><a href=\"#runWorker方法\" class=\"headerlink\" title=\"runWorker方法\"></a>runWorker方法</h3><p>因为Worker为ThreadPoolExecutor的内部类，因此runWorker方法实际是ThreadPoolExecutor定义的:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">runWorker</span><span class=\"params\">(Worker w)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Thread</span> <span class=\"variable\">wt</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\">    <span class=\"type\">Runnable</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> w.firstTask;</span><br><span class=\"line\">    w.firstTask = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    w.unlock(); <span class=\"comment\">// allow interrupts</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">completedAbruptly</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (task != <span class=\"literal\">null</span> || (task = getTask()) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            w.lock();</span><br><span class=\"line\">            <span class=\"comment\">// If pool is stopping, ensure thread is interrupted;</span></span><br><span class=\"line\">            <span class=\"comment\">// if not, ensure thread is not interrupted.  This</span></span><br><span class=\"line\">            <span class=\"comment\">// requires a recheck in second case to deal with</span></span><br><span class=\"line\">            <span class=\"comment\">// shutdownNow race while clearing interrupt</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</span><br><span class=\"line\">                 (Thread.interrupted() &amp;&amp;</span><br><span class=\"line\">                  runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span><br><span class=\"line\">                !wt.isInterrupted())</span><br><span class=\"line\">                wt.interrupt();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                beforeExecute(wt, task);</span><br><span class=\"line\">                <span class=\"type\">Throwable</span> <span class=\"variable\">thrown</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    task.run();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (RuntimeException x) &#123;</span><br><span class=\"line\">                    thrown = x; <span class=\"keyword\">throw</span> x;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Error x) &#123;</span><br><span class=\"line\">                    thrown = x; <span class=\"keyword\">throw</span> x;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Throwable x) &#123;</span><br><span class=\"line\">                    thrown = x; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(x);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    afterExecute(task, thrown);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                task = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                w.completedTasks++;</span><br><span class=\"line\">                w.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        completedAbruptly = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        processWorkerExit(w, completedAbruptly);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法是线程池复用线程的核心代码，注意Worker继承了AbstractQueuedSynchronizer，在执行每个任务前通过lock方法加锁，执行完后通过unlock方法解锁，这种机制用来防止运行中的任务被中断。在执行任务时先尝试获取firstTask，即构造方法传入的Runnable对象，然后尝试从getTask方法中获取任务队列中的任务。在任务执行前还要再次判断线程池是否已经处于STOP状态或者线程被中断。</p>\n<p>注意这里w.lock方法是在获取到任务后才执行的，也就是如果线程获取到任务前都未加锁，这样能保证showDown方法尝试获取该锁中断空闲的线程，详见后面的解析。</p>\n<p>当线程被中断、抛出异常、不能及时得到任务，processWorkerExit方法用于最后将线程回收。</p>\n<h3 id=\"getTask方法\"><a href=\"#getTask方法\" class=\"headerlink\" title=\"getTask方法\"></a>getTask方法</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Runnable <span class=\"title function_\">getTask</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">timedOut</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>; <span class=\"comment\">// Did the last poll() time out?</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> ctl.get();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">rs</span> <span class=\"operator\">=</span> runStateOf(c);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Check if queue empty only if necessary.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123;</span><br><span class=\"line\">            decrementWorkerCount();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">wc</span> <span class=\"operator\">=</span> workerCountOf(c);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Are workers subject to culling?</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">timed</span> <span class=\"operator\">=</span> allowCoreThreadTimeOut || wc &gt; corePoolSize;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut))</span><br><span class=\"line\">            &amp;&amp; (wc &gt; <span class=\"number\">1</span> || workQueue.isEmpty())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compareAndDecrementWorkerCount(c))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Runnable</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> timed ?</span><br><span class=\"line\">                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :</span><br><span class=\"line\">                workQueue.take();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (r != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">            timedOut = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException retry) &#123;</span><br><span class=\"line\">            timedOut = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还记得Executor.execute方法的情况是将任务添加到任务队列，getTask方法就是从任务队列中同步地取出任务。</p>\n<p>这个方法通过一个循环不断轮询任务队列有没有任务到来，首先判断线程池是否处于正常运行状态，通过超时配置有两种方法取出任务：</p>\n<ol>\n<li>BlockingQueue.poll 阻塞指定的时间尝试获取任务，如果超过指定的时间还未获取到任务就返回null。</li>\n<li>BlockingQueue.take 这种方法会在取到任务前一直阻塞。</li>\n</ol>\n<p>FixedThreadPool使用的是take方法，所以会线程会一直阻塞等待任务。CachedThreadPool使用的是poll方法，也就是说CachedThreadPool中的线程如果在60秒内未获取到队列中的任务就会被终止。</p>\n<p>到此ThreadPoolExecutor是怎么执行Runnable任务的分析结束。</p>\n<h3 id=\"ExecutorService-shutdown\"><a href=\"#ExecutorService-shutdown\" class=\"headerlink\" title=\"ExecutorService.shutdown()\"></a>ExecutorService.shutdown()</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">shutdown</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">mainLock</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.mainLock;</span><br><span class=\"line\">    mainLock.lock();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        checkShutdownAccess();</span><br><span class=\"line\">        advanceRunState(SHUTDOWN);</span><br><span class=\"line\">        interruptIdleWorkers();</span><br><span class=\"line\">        onShutdown(); <span class=\"comment\">// hook for ScheduledThreadPoolExecutor</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        mainLock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tryTerminate();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">interruptIdleWorkers</span><span class=\"params\">(<span class=\"type\">boolean</span> onlyOne)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">mainLock</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.mainLock;</span><br><span class=\"line\">    mainLock.lock();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Worker w : workers) &#123;</span><br><span class=\"line\">            <span class=\"type\">Thread</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> w.thread;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!t.isInterrupted() &amp;&amp; w.tryLock()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    t.interrupt();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (SecurityException ignore) &#123;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    w.unlock();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (onlyOne)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        mainLock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ExecutorService是Executor的子类，也是ThreadPoolExecutor的基类。首先通过mainLock加锁同步修改线程池状态为SHUTDOWN，然后通过interruptIdleWorkers方法中断空闲线程，OnShowDown方法是留给子类去实现的。</p>\n<p>interruptIdleWorkers(boolean onlyOne)方法也是先用mainLock加锁同步，然后循环找出所有Worker中Thread未中断的，通过tryLock方法尝试获取锁。还记得上文的runWorker方法Worker的锁是在获取任务时才加的，interruptIdleWorkers方法通过竞争该锁抢先中断线程，这样就导致未执行任务的线程被中断了，而正在执行任务的线程不受影响，并且可以继续执行任务队列中的任务。</p>\n<h3 id=\"ExecutorService-shutdownNow\"><a href=\"#ExecutorService-shutdownNow\" class=\"headerlink\" title=\"ExecutorService.shutdownNow()\"></a>ExecutorService.shutdownNow()</h3><p>与ExecutorService.shutdown()不同的是，shutdownNow方法除了让线程池拒绝接收新的任务，并且不再执行任务队列里未执行的任务。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;Runnable&gt; <span class=\"title function_\">shutdownNow</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    List&lt;Runnable&gt; tasks;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">mainLock</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.mainLock;</span><br><span class=\"line\">    mainLock.lock();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        checkShutdownAccess();</span><br><span class=\"line\">        advanceRunState(STOP);</span><br><span class=\"line\">        interruptWorkers();</span><br><span class=\"line\">        tasks = drainQueue();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        mainLock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tryTerminate();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tasks;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先mainLock同步将状态改为STOP,然后中断所有线程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">interruptWorkers</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">mainLock</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.mainLock;</span><br><span class=\"line\">    mainLock.lock();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Worker w : workers)</span><br><span class=\"line\">            w.interruptIfStarted();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        mainLock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>interruptWorkers方法将对所有Worker执行interruptIfStarted，即将所有运行中的线程中断:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">interruptIfStarted</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    Thread t;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (getState() &gt;= <span class=\"number\">0</span> &amp;&amp; (t = thread) != <span class=\"literal\">null</span> &amp;&amp; !t.isInterrupted()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            t.interrupt();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SecurityException ignore) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还记得Worker的构造函数中执行了setState(-1)，而在runWorker方法中通过unlock将state改为0，因此可以被interruptWorkers方法中断。</p>\n<p>这里注意的是中断并不意味着线程就一定停止工作，除非在任务中捕获InterruptedException退出任务。</p>\n<h2 id=\"ScheduledThreadPoolExecutor\"><a href=\"#ScheduledThreadPoolExecutor\" class=\"headerlink\" title=\"ScheduledThreadPoolExecutor\"></a>ScheduledThreadPoolExecutor</h2><p>ScheduledThreadPoolExecutor同ThreadPoolExecutor一样也可以从 Executors线程池工厂创建，所不同的是它具有定时执行，以周期或间隔循环执行任务等功能。</p>\n<p>ScheduledThreadPoolExecutor继承自ThreadPoolExecutor，因此它具有ThreadPoolExecutor的所有能力。<br>通过super方法的参数可知，核心线程的数量即传入的参数，而线程池的线程数为Integer.MAX_VALUE，几乎为无上限。<br>这里采用了DelayedWorkQueue任务队列，也是定时任务的核心，留在后面分析。</p>\n<p>ScheduledThreadPoolExecutor实现了ScheduledExecutorService 中的接口:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;V&gt; ScheduledFuture&lt;V&gt; <span class=\"title function_\">schedule</span><span class=\"params\">(Callable&lt;V&gt; callable, <span class=\"type\">long</span> delay, TimeUnit unit)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>延时执行Callable任务的功能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> ScheduledFuture&lt;?&gt; schedule(Runnable command, <span class=\"type\">long</span> delay, TimeUnit unit);</span><br></pre></td></tr></table></figure>\n\n<p>延时执行Runnable任务的功能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> ScheduledFuture&lt;?&gt; scheduleAtFixedRate(Runnable command,</span><br><span class=\"line\">                                                <span class=\"type\">long</span> initialDelay,</span><br><span class=\"line\">                                                <span class=\"type\">long</span> period,</span><br><span class=\"line\">                                                TimeUnit unit);</span><br></pre></td></tr></table></figure>\n\n<p>可以延时循环执行周期性任务。</p>\n<p>假设任务执行时间固定2s,period为1s，因为任务的执行时间大于规定的period，所以任务会每隔2s（任务执行时间）开始执行一次。如果任务执行时间固定为0.5s,period为1s，因为任务执行时间小于period，所以任务会每隔1s（period）开始执行一次。实际任务的执行时间即可能是大于period的，也可能小于period，scheduleAtFixedRate的好处就是每次任务的开始时间间隔必然大于等于period。</p>\n<h3 id=\"四种执行定时任务的方法\"><a href=\"#四种执行定时任务的方法\" class=\"headerlink\" title=\"四种执行定时任务的方法\"></a>四种执行定时任务的方法</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">schedule(Runnable command,<span class=\"type\">long</span> delay, TimeUnit unit)</span><br><span class=\"line\"></span><br><span class=\"line\">schedule(Callable&lt;V&gt; callable, <span class=\"type\">long</span> delay, TimeUnit unit)</span><br><span class=\"line\"></span><br><span class=\"line\">scheduleAtFixedRate(Runnable command,<span class=\"type\">long</span> initialDelay,<span class=\"type\">long</span> period,TimeUnit unit)</span><br><span class=\"line\"></span><br><span class=\"line\">scheduleWithFixedDelay(Runnable command,<span class=\"type\">long</span> initialDelay,<span class=\"type\">long</span> delay,TimeUnit unit)</span><br></pre></td></tr></table></figure>\n","tags":["Java","Concurrency"]},{"title":"Ubuntu apt 更新和清理","url":"/2018/02/08/apt-shell/","content":"<h2 id=\"apt-sh更新清理软件\"><a href=\"#apt-sh更新清理软件\" class=\"headerlink\" title=\"apt.sh更新清理软件\"></a><code>apt.sh</code>更新清理软件</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo aptitude update</span><br><span class=\"line\">sudo aptitude upgrade -y</span><br><span class=\"line\">sudo aptitude autoclean -y</span><br><span class=\"line\">sudo aptitude clean</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;\\033[31m aptitude end \\033[0m&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get upgrade -y</span><br><span class=\"line\">sudo apt-get autoremove -y</span><br><span class=\"line\">sudo apt-get autoclean</span><br><span class=\"line\">sudo apt-get clean</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;\\033[31m apt-get end \\033[0m&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ls-sh查看deb包缓存\"><a href=\"#ls-sh查看deb包缓存\" class=\"headerlink\" title=\"ls.sh查看deb包缓存\"></a><code>ls.sh</code>查看deb包缓存</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /var/cache/apt/archives</span><br><span class=\"line\"><span class=\"built_in\">pwd</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;===================&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> | grep deb</span><br></pre></td></tr></table></figure>\n","tags":["shell"]},{"title":"账户余额","url":"/2021/04/24/account-balance/","content":"<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>做一个简单的账户余额管理系统, 前端使用 <code>Vue</code> + <code>ElementUI</code> + <code>Echarts</code>, 后端使用 <code>Spring Boot 2</code> 开发, 并记录开发的各种坑。</p>\n<blockquote>\n<p><a href=\"/2021/11/25/spring-mvc-mybatis-vue/\">账户余额项目总结</a>, <a href=\"/2022/07/28/balance-docker-cmd/\">账户余额Docker部署命令</a></p>\n</blockquote>\n<p>主要有以下的功能：</p>\n<ol>\n<li>注册</li>\n<li>登录</li>\n<li>账户余额记录的CRUD</li>\n<li>搜索</li>\n<li>Swagger自动生成API文档</li>\n<li>账户余额对比</li>\n<li>账户余额详情对比</li>\n<li>账户余额复制</li>\n<li>账户余额报表</li>\n<li>账户余额详情报表</li>\n<li>账户余额导入导出</li>\n<li>账户余额回收站</li>\n<li>系统日志导入导出</li>\n<li>使用Electron打包</li>\n</ol>\n<span id=\"more\"></span>\n\n<h2 id=\"前端进度\"><a href=\"#前端进度\" class=\"headerlink\" title=\"前端进度\"></a>前端进度</h2><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 注册</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 登录</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 账户余额记录的CRUD</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 搜索</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 账户余额对比</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 账户余额详情对比</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 账户余额复制</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 账户余额报表</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 账户余额详情报表</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 账户余额导入导出</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 数据Mock</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Webpack打包压缩</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 移动端适配</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 账户余额回收站</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 操作日志导入导出</li>\n<li><input disabled=\"\" type=\"checkbox\"> 使用Electron打包</li>\n</ul>\n<h2 id=\"后端进度\"><a href=\"#后端进度\" class=\"headerlink\" title=\"后端进度\"></a>后端进度</h2><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 注册</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 登录</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 账户余额记录的CRUD</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 搜索</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Swagger整合进项目(使用Knife4j实现更美观)</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 账户余额对比</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 账户余额详情对比</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 账户余额复制</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 账户余额报表</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 账户余额详情报表</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 账户余额导入导出</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Nginx部署</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 账户余额回收站</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 操作日志导入导出</li>\n</ul>\n","tags":["Java","Vue"]},{"title":"双网卡访问特定ip网段走指定网卡(Linux)","url":"/2024/04/01/Linux-route/","content":"<h2 id=\"查看路由表信息\"><a href=\"#查看路由表信息\" class=\"headerlink\" title=\"查看路由表信息\"></a>查看路由表信息</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">netstat -nr</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看默认路由\"><a href=\"#查看默认路由\" class=\"headerlink\" title=\"查看默认路由\"></a>查看默认路由</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">route get 0.0.0.0</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"删除默认路由\"><a href=\"#删除默认路由\" class=\"headerlink\" title=\"删除默认路由\"></a>删除默认路由</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo route -n delete default 172.18.2.254(replace)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加默认路由\"><a href=\"#添加默认路由\" class=\"headerlink\" title=\"添加默认路由\"></a>添加默认路由</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo route add -net 0.0.0.0 172.20.10.1(replace)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加特定规则路由\"><a href=\"#添加特定规则路由\" class=\"headerlink\" title=\"添加特定规则路由\"></a>添加特定规则路由</h2><p>添加内网的地址走公司网卡，其中192.168.5.0 192.168.51.0代表网段，192.168.51.254 代表网卡的网关地址</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo route add -net 192.168.5.0 192.168.51.254</span><br><span class=\"line\">sudo route add -net 192.168.51.0 192.168.51.254</span><br></pre></td></tr></table></figure>\n","tags":["shell"]},{"title":"JAVA 中 CAS 原理详解","url":"/2017/09/04/CAS/","content":"<h2 id=\"什么是-CAS\"><a href=\"#什么是-CAS\" class=\"headerlink\" title=\"什么是 CAS\"></a>什么是 CAS</h2><p><code>CAS</code>, <code>Compare and Swap</code> 即比较并替换, CAS 有三个操作数：内存值 V、旧的预期值 A、要修改的值 B, 当且仅当预期值 A 和内存值 V 相同时, 将内存值修改为 B 并返回 true, 否则什么都不做并返回 false。</p>\n<p>java.util.concurrent.atomic 包下的原子操作类都是基于 CAS 实现的, 接下去我们通过 AtomicInteger 来看看是如何通过 CAS 实现原子操作的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AtomicInteger</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Number</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">java</span>.io.Serializable &#123;</span><br><span class=\"line\">    <span class=\"comment\">// setup to use Unsafe.compareAndSwapInt for updates</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Unsafe</span> <span class=\"variable\">unsafe</span> <span class=\"operator\">=</span> Unsafe.getUnsafe();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> valueOffset;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            valueOffset = unsafe.objectFieldOffset</span><br><span class=\"line\">                (AtomicInteger.class.getDeclaredField(<span class=\"string\">&quot;value&quot;</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(ex); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"type\">int</span> value;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">get</span><span class=\"params\">()</span> &#123;<span class=\"keyword\">return</span> value;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>Unsafe 是 CAS 的核心类, Java 无法直接访问底层操作系统, 而是通过本地（native）方法来访问。不过尽管如此, JVM 还是开了一个后门, JDK 中有一个类 Unsafe, 它提供了硬件级别的原子操作。</p>\n</li>\n<li><p>valueOffset 表示的是变量值在内存中的偏移地址, 因为 Unsafe 就是根据内存偏移地址获取数据的原值的。</p>\n</li>\n<li><p>value 是用 volatile 修饰的, 保证了多线程之间看到的 value 值是同一份。</p>\n</li>\n</ol>\n<span id=\"more\"></span>\n\n<p>接下去, 我们看看 AtomicInteger 是如何实现并发下的累加操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//jdk1.8实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">getAndAdd</span><span class=\"params\">(<span class=\"type\">int</span> delta)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"built_in\">this</span>, valueOffset, delta);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">getAndAddInt</span><span class=\"params\">(Object var1, <span class=\"type\">long</span> var2, <span class=\"type\">int</span> var4)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> var5;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        var5 = <span class=\"built_in\">this</span>.getIntVolatile(var1, var2);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span>(!<span class=\"built_in\">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> var5;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>假设现在线程 A 和线程 B 同时执行 getAndAdd 操作：</p>\n<ol>\n<li><p>AtomicInteger 里面的 value 原始值为 3, 即主内存中 AtomicInteger 的 value 为 3, 根据 Java 内存模型, 线程 A 和线程 B 各自持有一份 value 的副本, 值为 3。</p>\n</li>\n<li><p>线程 A 通过 getIntVolatile(var1, var2) 方法获取到 value 值 3, 线程切换, 线程 A 挂起。</p>\n</li>\n<li><p>线程 B 通过 getIntVolatile(var1, var2) 方法获取到 value 值 3, 并利用 compareAndSwapInt 方法比较内存值也为 3, 比较成功, 修改内存值为 2, 线程切换, 线程 B 挂起。</p>\n</li>\n<li><p>线程 A 恢复, 利用 compareAndSwapInt 方法比较, 发手里的值 3 和内存值 2 不一致, <strong>此时 value 正在被另外一个线程修改, 线程 A 不能修改 value 值</strong>。</p>\n</li>\n<li><p>线程的 compareAndSwapInt 实现, 循环判断, 重新获取 value 值, 因为 value 是 volatile 变量, 所以线程对它的修改, 线程 A 总是能够看到。线程 A 继续利用<br>compareAndSwapInt 进行比较并替换, 直到 compareAndSwapInt 修改成功返回 true。</p>\n</li>\n</ol>\n<p>整个过程中, 利用 CAS 保证了对于 value 的修改的线程安全性。</p>\n<h2 id=\"CAS-缺点\"><a href=\"#CAS-缺点\" class=\"headerlink\" title=\"CAS 缺点\"></a>CAS 缺点</h2><h3 id=\"ABA-问题\"><a href=\"#ABA-问题\" class=\"headerlink\" title=\"ABA 问题\"></a>ABA 问题</h3><p>如果变量 V 初次读取的时候是 A, 并且在准备赋值的时候检查到它仍然是 A, 那能说明它的值没有被其他线程修改过了吗？如果在这段期间它的值曾经被改成了 B, 然后又改回 A, 那 CAS 操作就会误认为它从来没有被修改过。针对这种情况, java 并发包中提供了一个带有标记的原子引用类 “AtomicStampedReference”, 它可以通过控制变量值的版本来保证 CAS 的正确性。</p>\n<h3 id=\"循环时间长开销大\"><a href=\"#循环时间长开销大\" class=\"headerlink\" title=\"循环时间长开销大\"></a>循环时间长开销大</h3><p>自旋 CAS 如果长时间不成功, 会给 CPU 带来非常大的执行开销。如果 JVM 能支持处理器提供的 pause 指令那么效率会有一定的提升, pause 指令有两个作用, 第一它可以延迟流水线执行指令（de-pipeline）, 使 CPU 不会消耗过多的执行资源, 延迟的时间取决于具体实现的版本, 在一些处理器上延迟时间是零。第二它可以避免在退出循环的时候因内存顺序冲突（memory order violation）而引起 CPU 流水线被清空（CPU pipeline flush）, 从而提高 CPU 的执行效率。</p>\n<h3 id=\"只能保证一个共享变量的原子操作\"><a href=\"#只能保证一个共享变量的原子操作\" class=\"headerlink\" title=\"只能保证一个共享变量的原子操作\"></a>只能保证一个共享变量的原子操作</h3><p>当对一个共享变量执行操作时, 我们可以使用循环 CAS 的方式来保证原子操作, 但是对多个共享变量操作时, 循环 CAS 就无法保证操作的原子性, 这个时候就可以用锁, 或者有一个取巧的办法, 就是把多个共享变量合并成一个共享变量来操作。比如有两个共享变量 i＝2,j=a, 合并一下 ij=2a, 然后用 CAS 来操作 ij。从 Java1.5 开始 JDK 提供了 AtomicReference 类来保证引用对象之间的原子性, 你可以把多个变量放在一个对象里来进行 CAS 操作。</p>\n","tags":["Java","Concurrency"]},{"title":"账户余额Docker部署命令","url":"/2022/07/28/balance-docker-cmd/","content":"<h2 id=\"环境版本\"><a href=\"#环境版本\" class=\"headerlink\" title=\"环境版本\"></a>环境版本</h2><p><em><strong>开发环境和运行环境使用同一版本</strong></em></p>\n<ul>\n<li>Java 8u232</li>\n<li>MySQL 8.0.18</li>\n<li>Redis 5.0.9</li>\n<li>emqx 4.4.5</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><h3 id=\"导入镜像\"><a href=\"#导入镜像\" class=\"headerlink\" title=\"导入镜像\"></a>导入镜像</h3><h4 id=\"从docker服务器拉取\"><a href=\"#从docker服务器拉取\" class=\"headerlink\" title=\"从docker服务器拉取\"></a>从docker服务器拉取</h4><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull openjdk:8u232-jre</span><br><span class=\"line\">docker pull mysql:8.0.18</span><br><span class=\"line\">docker pull redis:5.0.9</span><br><span class=\"line\">docker pull emqx/emqx:4.4.5</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"从本地文件导入\"><a href=\"#从本地文件导入\" class=\"headerlink\" title=\"从本地文件导入\"></a>从本地文件导入</h4><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker load &lt; emqx.tar</span></span><br><span class=\"line\">docker load -i <span class=\"variable\">$&#123;image_tar_name&#125;</span></span><br><span class=\"line\">or</span><br><span class=\"line\">docker load &lt; <span class=\"variable\">$&#123;image_tar_name&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导出镜像\"><a href=\"#导出镜像\" class=\"headerlink\" title=\"导出镜像\"></a>导出镜像</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker save mysql:8.0.18 &gt; mysql.tar</span></span><br><span class=\"line\">docker save <span class=\"variable\">$&#123;image_name&#125;</span> &gt; <span class=\"variable\">$&#123;image_tar_name&#125;</span></span><br><span class=\"line\">or</span><br><span class=\"line\">docker save <span class=\"variable\">$&#123;image_name&#125;</span> -o <span class=\"variable\">$&#123;image_tar_name&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Docker运行\"><a href=\"#Docker运行\" class=\"headerlink\" title=\"Docker运行\"></a>Docker运行</h3><h4 id=\"运行单个镜像\"><a href=\"#运行单个镜像\" class=\"headerlink\" title=\"运行单个镜像\"></a>运行单个镜像</h4><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># mysql</span></span><br><span class=\"line\">docker run --restart=always -p 3306:3306 --name mysql \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=root -d mysql:8.0.18 \\</span><br><span class=\"line\">-v /mysql/data/path:/var/lib/mysql \\</span><br><span class=\"line\">--default-authentication-plugin=mysql_native_password --lower_case_table_names=1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># redis</span></span><br><span class=\"line\">docker run --restart=always -d --name redis -p 6379:6379 redis:5.0.9</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># emqx</span></span><br><span class=\"line\">docker run --restart=always -d --name emqx -p 1883:1883 -p 8083:8083 -p 18083:18083 emqx/emqx:4.4.5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># balance</span></span><br><span class=\"line\">docker run --restart=always -d --name balance \\</span><br><span class=\"line\">--<span class=\"built_in\">link</span>=mysql:mysql --<span class=\"built_in\">link</span>=redis:redis -p 8686:8686 monezhao/balance:latest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># SQL Server</span></span><br><span class=\"line\"><span class=\"comment\"># docker run --restart=always -e &quot;ACCEPT_EULA=Y&quot; -e &quot;SA_PASSWORD=abcd,1234&quot; \\</span></span><br><span class=\"line\"><span class=\"comment\"># -p 1433:1433 --name mssql -d mcr.microsoft.com/mssql/server:2017-latest</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"it-tools镜像\"><a href=\"#it-tools镜像\" class=\"headerlink\" title=\"it-tools镜像\"></a>it-tools镜像</h4><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull corentinth/it-tools:latest</span><br><span class=\"line\">docker load &lt; it-tools.tar</span><br><span class=\"line\">docker run -d --name it-tools --restart unless-stopped -p 8123:80 corentinth/it-tools:latest</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"docker-compose运行\"><a href=\"#docker-compose运行\" class=\"headerlink\" title=\"docker-compose运行\"></a><code>docker-compose</code>运行</h4><p><code>docker-compose.yml</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3.1&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">mysql:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">mysql:8.0.18</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">        <span class=\"attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span></span><br><span class=\"line\">        <span class=\"string\">--default-authentication-plugin=mysql_native_password</span></span><br><span class=\"line\">        <span class=\"string\">--lower_case_table_names=1</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"number\">3306</span><span class=\"string\">:3306</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&quot;/mysql/data/path:/var/lib/mysql&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">redis:5.0.9</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"number\">6379</span><span class=\"string\">:6379</span></span><br><span class=\"line\">  <span class=\"attr\">emqx:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">emqx/emqx:4.4.5</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"number\">1883</span><span class=\"string\">:1883</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"number\">8083</span><span class=\"string\">:8083</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"number\">18083</span><span class=\"string\">:18083</span></span><br><span class=\"line\"><span class=\"comment\">#   mssql:</span></span><br><span class=\"line\"><span class=\"comment\">#     image: mcr.microsoft.com/mssql/server:2017-latest</span></span><br><span class=\"line\"><span class=\"comment\">#     restart: always</span></span><br><span class=\"line\"><span class=\"comment\">#     environment:</span></span><br><span class=\"line\"><span class=\"comment\">#         ACCEPT_EULA: &#x27;Y&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#         SA_PASSWORD: &#x27;abcd,1234&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#     ports:</span></span><br><span class=\"line\"><span class=\"comment\">#         - 1433:1433</span></span><br></pre></td></tr></table></figure>\n\n<p><code>docker-compose</code>命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建并启动服务</span></span><br><span class=\"line\">docker-compose up -d</span><br><span class=\"line\"><span class=\"comment\"># 停止服务</span></span><br><span class=\"line\">ocker-compose stop</span><br><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">docker-compose start</span><br><span class=\"line\"><span class=\"comment\"># 停止并删除服务</span></span><br><span class=\"line\">docker-compose down</span><br></pre></td></tr></table></figure>\n","tags":["docker"]},{"title":"ArrayList 遍历删除","url":"/2019/08/02/ArrayList-loop-remove/","content":"<p>list的遍历分为3种:</p>\n<ol>\n<li>普通遍历, <code>for(int i=0;i&lt;list.size();i++)</code></li>\n<li>增强for循环, <code>for(Object x:list)</code></li>\n<li>iterator遍历, <code>Iterator&lt;String&gt; it = list.iterator(); while(it.hasNext())&#123;&#125;</code></li>\n</ol>\n<p>同时ArrayList和线程安全的CopyOnWriteArrayList不同遍历下变现也不同，下面分类展示各种情况。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h2><h3 id=\"普通for循环遍历\"><a href=\"#普通for循环遍历\" class=\"headerlink\" title=\"普通for循环遍历\"></a>普通for循环遍历</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// list &#123;0, 1, 2, 3, 4&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// index and number</span></span><br><span class=\"line\">  System.out.print(i + <span class=\"string\">&quot; &quot;</span> + list.get(i));</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (list.get(i) % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    list.remove(list.get(i));</span><br><span class=\"line\">    System.out.print(<span class=\"string\">&quot; delete&quot;</span>);</span><br><span class=\"line\">    i--; <span class=\"comment\">// 索引改变!</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">0 0 delete</span></span><br><span class=\"line\"><span class=\"comment\">0 1</span></span><br><span class=\"line\"><span class=\"comment\">1 2 delete</span></span><br><span class=\"line\"><span class=\"comment\">1 3</span></span><br><span class=\"line\"><span class=\"comment\">2 4 delete</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p>删除某个元素后，list的大小发生了变化，而你的索引也在变化，平时编程不注意可能会在遍历时导致一些访问越界的问题，因此不是特别推荐。</p>\n<h3 id=\"增强型for循环遍历\"><a href=\"#增强型for循环遍历\" class=\"headerlink\" title=\"增强型for循环遍历\"></a>增强型for循环遍历</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// list &#123;0, 1, 2, 3, 4&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (Integer num : list) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// number</span></span><br><span class=\"line\">  System.out.print(num);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    list.remove(num);</span><br><span class=\"line\">    System.out.print(<span class=\"string\">&quot; delete&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>删除第一个元素时是没有问题的，但删除后继续执行遍历过程的话就会抛出ConcurrentModificationException的异常。</p>\n<h3 id=\"使用iterator遍历\"><a href=\"#使用iterator遍历\" class=\"headerlink\" title=\"使用iterator遍历\"></a>使用iterator遍历</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// list &#123;0, 1, 2, 3, 4&#125;</span></span><br><span class=\"line\">Iterator&lt;Integer&gt; it = list.iterator();</span><br><span class=\"line\"><span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// index and number</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> it.next();</span><br><span class=\"line\">    System.out.print(num);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      it.remove();</span><br><span class=\"line\">      System.out.print(<span class=\"string\">&quot; delete&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到顺利的执行了遍历并删除的操作，因此最推荐的做法是使用iterator执行遍历删除操作。但要注意的是，<strong>使用iterator的remove方法</strong>，如果用list的remove方法同样会报上面提到的ConcurrentModificationException错误。</p>\n<h3 id=\"问题产生原因\"><a href=\"#问题产生原因\" class=\"headerlink\" title=\"问题产生原因\"></a>问题产生原因</h3><h4 id=\"fail-fast-机制\"><a href=\"#fail-fast-机制\" class=\"headerlink\" title=\"fail-fast 机制\"></a>fail-fast 机制</h4><p>在JDK的集合类中有这样一段描述：</p>\n<p><em><strong>注意，迭代器的快速失败行为无法得到保证，因为一般来说，不可能对是否出现不同步并发修改做出任何硬性保证。快速失败迭代器会尽最大努力抛出 ConcurrentModificationException。因此，为提高这类迭代器的正确性而编写一个依赖于此异常的程序是错误的做法：迭代器的快速失败行为应该仅用于检测 bug。</strong></em></p>\n<p>“快速失败”也就是 fail-fast，它是 Java 集合的一种错误检测机制。当多个线程对集合进行结构上的改变的操作时，有可能会产生 fail-fast 机制。记住是有可能，而不是一定。例如：假设存在两个线程（线程 1、线程 2），线程 1 通过 Iterator 在遍历集合 A 中的元素，在某个时候线程 2 修改了集合 A 的结构（是结构上面的修改，而不是简单的修改集合元素的内容），那么这个时候程序就会抛出 ConcurrentModificationException 异常，从而产生 fail-fast 机制。</p>\n<p>首先我们看看：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Itr</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Iterator</span>&lt;E&gt; &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> cursor;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">lastRet</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">expectedModCount</span> <span class=\"operator\">=</span> ArrayList.<span class=\"built_in\">this</span>.modCount;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasNext</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"built_in\">this</span>.cursor != ArrayList.<span class=\"built_in\">this</span>.size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> E <span class=\"title function_\">next</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        checkForComodification();</span><br><span class=\"line\">        <span class=\"comment\">/** 省略此处代码 */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">remove</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.lastRet &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalStateException</span>();</span><br><span class=\"line\">        checkForComodification();</span><br><span class=\"line\">        <span class=\"comment\">/** 省略此处代码 */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkForComodification</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ArrayList.<span class=\"built_in\">this</span>.modCount == <span class=\"built_in\">this</span>.expectedModCount)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConcurrentModificationException</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>迭代器在调用 next()、remove() 方法时都是调用 checkForComodification() 方法，该方法主要就是检测 modCount == expectedModCount ? 若不等则抛出 ConcurrentModificationException 异常，从而产生 fail-fast 机制。</p>\n<p>expectedModCount 是在 Itr 中定义的：int expectedModCount = ArrayList.this.modCount;所以他的值是不可能会修改的，所以会变的就是 modCount。modCount 是在 AbstractList 中定义的，为全局变量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">transient</span> <span class=\"type\">int</span> <span class=\"variable\">modCount</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<p>ArrayList 中无论 add、remove、clear 方法只要是涉及了改变 ArrayList 元素的个数的方法都会导致 modCount 的改变。</p>\n<p>有两个线程（线程 A，线程 B），其中线程 A 负责遍历 list、线程B修改 list。线程 A 在遍历 list 过程的某个时候（此时 expectedModCount = modCount=N），线程启动，同时线程B增加一个元素，这是 modCount 的值发生改变（modCount = N + 1）。线程 A 继续遍历执行 next 方法时，通告 checkForComodification 方法发现 expectedModCount = N ，而 modCount = N + 1，两者不等，这时就抛出ConcurrentModificationException 异常，从而产生 fail-fast 机制。</p>\n<h2 id=\"CopyOnWriteArrayList\"><a href=\"#CopyOnWriteArrayList\" class=\"headerlink\" title=\"CopyOnWriteArrayList\"></a>CopyOnWriteArrayList</h2><p>CopyOnWriteArrayList 是 ArrayList 的一个线程安全的变体，其中所有可变操作（add、set 等等）都是通过对底层数组进行一次新的复制来实现的。 该类产生的开销比较大，但是在两种情况下，它非常适合使用。1：在不能或不想进行同步遍历，但又需要从并发线程中排除冲突时。2：当遍历操作的数量大大超过可变操作的数量时。遇到这两种情况使用 CopyOnWriteArrayList 来替代 ArrayList 再适合不过了。</p>\n<h3 id=\"普通for循环\"><a href=\"#普通for循环\" class=\"headerlink\" title=\"普通for循环\"></a>普通for循环</h3><p>和ArrayList相同，list的大小发生了变化，索引也在变化，在遍历时也有可能导致一些访问越界的问题，因此不是特别推荐。</p>\n<h3 id=\"增强型for循环\"><a href=\"#增强型for循环\" class=\"headerlink\" title=\"增强型for循环\"></a>增强型for循环</h3><p>CopyOnWriterArrayList 的方法没有像 ArrayList 中使用 checkForComodification 方法来判断 expectedModCount 与 modCount 是否相等, 既CopyOnWriterArrayList 不会产生 ConcurrentModificationException 异常，它使用迭代器不会产生 fail-fast 机制。</p>\n<p>为什么呢？我们以 add 方法为例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">add</span><span class=\"params\">(E paramE)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">ReentrantLock</span> <span class=\"variable\">localReentrantLock</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.lock;</span><br><span class=\"line\">    localReentrantLock.lock();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Object[] arrayOfObject1 = getArray();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> arrayOfObject1.length;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//CopyOnWriterArrayList 的 add 方法与 ArrayList 的 add 方法</span></span><br><span class=\"line\">        Object[] arrayOfObject2 = Arrays.copyOf(arrayOfObject1, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">        arrayOfObject2[i] = paramE;</span><br><span class=\"line\">        setArray(arrayOfObject2);</span><br><span class=\"line\">        <span class=\"comment\">//最大的不同之处</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        localReentrantLock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setArray</span><span class=\"params\">(Object[] paramArrayOfObject)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.array = paramArrayOfObject;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em><strong>CopyOnWriterArrayList 所代表的核心概念就是：任何对 array 在结构上有所改变的操作（add、remove、clear 等），CopyOnWriterArrayList 都会 copy 现有的数据，再在 copy 的数据上修改，这样就不会影响 COWIterator 中的数据了，修改完成之后改变原有数据的引用即可。同时这样造成的代价就是产生大量的对象，同时数组的 copy 也是相当有损耗的。</strong></em></p>\n<h3 id=\"iterator遍历\"><a href=\"#iterator遍历\" class=\"headerlink\" title=\"iterator遍历\"></a>iterator遍历</h3><p>和 ArrayList 不同, CopyOnWriteArrayList不支持iterator遍历, 创建迭代器时复制一份数组拷贝(快照)，在迭代期间数组不会被改变，调用remove、set、add方法抛出UnsupportedOperationException异常。</p>\n","tags":["Java"]},{"title":"类加载机制","url":"/2017/08/28/class-loader/","content":"<h2 id=\"类的加载\"><a href=\"#类的加载\" class=\"headerlink\" title=\"类的加载\"></a>类的加载</h2><p> 其中类加载的过程包括了加载、验证、准备、解析、初始化、使用、卸载七个阶段。验证、准备、解析三个阶段统称为连接。</p>\n<p> 在这七个阶段中, 加载、验证、准备和初始化和卸载这五个阶段发生的顺序是确定的, 而解析阶段则不一定, 它在某些情况下可以在初始化阶段之后开始, 这是为了支持 Java 语言的运行时绑定（也成为动态绑定或晚期绑定）。另外注意这里的几个阶段是按顺序开始, 而不是按顺序进行或完成, 因为这些阶段通常都是互相交叉地混合进行的, 通常在一个阶段执行的过程中调用或激活另一个阶段。</p>\n<h3 id=\"加载\"><a href=\"#加载\" class=\"headerlink\" title=\"加载\"></a>加载</h3><p>加载时类加载过程的第一个阶段, 在加载阶段, 虚拟机需要完成以下三件事情：</p>\n<ol>\n<li>通过一个类的全限定名来获取其定义的二进制字节流。</li>\n<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li>\n<li>在 Java 堆中生成一个代表这个类的 java.lang.Class 对象, 作为对方法区中这些数据的访问入口。</li>\n</ol>\n<p>在<a href=\"#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8\">类加载器</a>中将详细描述使用类加载器加载类的过程</p>\n<span id=\"more\"></span>\n\n<h3 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h3><ul>\n<li>验证：是否有正确的内部结构, 并和其他类协调一致</li>\n<li>准备：负责为类的静态成员分配内存, 并设置默认初始化值</li>\n<li>解析：将类的二进制数据中的符号引用替换为直接引用</li>\n</ul>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>类会在首次被 “主动使用” 时执行初始化, 为类（静态）变量赋予正确的初始值。在 Java 代码中, 一个正确的初始值是通过类变量初始化语句或者静态初始化块给出的。</p>\n<p>初始化一个类包括两个步骤：</p>\n<ul>\n<li>如果类存在直接父类的话, 且直接父类还没有被初始化, 则先初始化其直接父类</li>\n<li>如果类存在一个初始化方法, 就执行此方法</li>\n</ul>\n<p>注：初始化接口并不需要初始化它的父接口。</p>\n<h2 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h2><p>基本上所有的类加载器都是 java.lang.ClassLoader类的一个实例。</p>\n<p>Java 中的类加载器大致可以分成两类, 一类是系统提供的, 另外一类则是由 Java 应用开发人员编写的。系统提供的类加载器主要有下面三个：</p>\n<ul>\n<li><code>引导类加载器（bootstrap class loader）</code>：负责加载 $JAVA_HOME 中 jre/lib/rt.jar 里所有的 class 或 Xbootclassoath 选项指定的 jar 包。由 C++ 实现, 不是 ClassLoader 子类。</li>\n<li><code>扩展类加载器（extensions class loader）</code>：负责加载 java 平台中扩展功能的一些 jar 包, 包括 $JAVA_HOME 中 jre/lib/ext/*.jar 或 -Djava.ext.dirs 指定目录下的 jar 包。</li>\n<li><code>应用类加载器（App class loader）</code>：它根据 Java 应用的类路径（CLASSPATH）来加载 Java 类。一般来说, Java 应用的类都是由它来完成加载的。</li>\n</ul>\n<p>JVM 中除了根类加载器之外的所有类的加载器都是 ClassLoader 子类的实例, 通过重写 ClassLoader 中的方法, 实现自定义的类加载器。</p>\n<h2 id=\"双亲委派模型\"><a href=\"#双亲委派模型\" class=\"headerlink\" title=\"双亲委派模型\"></a>双亲委派模型</h2><p>除了引导类加载器之外, 所有的类加载器都有一个父类加载器, 可以通过 getParent()方法得到。于系统提供的类加载器来说, 应用类加载器的父类加载器是扩展类加载器, 而扩展类加载器的父类加载器是引导类加载器；对于开发人员编写的类加载器来说, 其父类加载器是加载此类加载器 Java 类的类加载器。</p>\n<p>它们之间的层次关系被称为类加载器的<code>双亲委派模型</code>。</p>\n<h3 id=\"双亲委派模型过程\"><a href=\"#双亲委派模型过程\" class=\"headerlink\" title=\"双亲委派模型过程\"></a>双亲委派模型过程</h3><p>某个特定的类加载器在接到加载类的请求时, 首先将加载任务委托给父类加载器, 依次递归, 如果父类加载器可以完成类加载任务, 就成功返回；只有父类加载器无法完成此加载任务时, 才自己去加载。</p>\n<p>使用双亲委派模型的好处在于 <code>Java 类随着它的类加载器一起具备了一种带有优先级的层次关系</code>。例如类 java.lang.Object, 它存在在 rt.jar 中, 无论哪一个类加载器要加载这个类, 最终都是委派给处于模型最顶端的 Bootstrap ClassLoader 进行加载, 因此 Object 类在程序的各种类加载器环境中都是同一个类。相反, 如果没有双亲委派模型而是由各个类加载器自行加载的话, 如果用户编写了一个 java.lang.Object 的同名类并放在 ClassPath 中, 那系统中将会出现多个不同的 Object 类, 程序将混乱。因此, 如果开发者尝试编写一个与 rt.jar 类库中重名的 Java 类, 可以正常编译, 但是永远无法被加载运行。</p>\n","tags":["类加载机制"]},{"title":"ConcurrentHashMap 从 Java 7 到 Java 8","url":"/2018/03/13/concurrenthashmap/","content":"<h2 id=\"Happens-before-关系\"><a href=\"#Happens-before-关系\" class=\"headerlink\" title=\"Happens-before 关系\"></a>Happens-before 关系</h2><p>happens-before 关系保证：如果线程 A 与线程 B 满足 happens-before 关系，则线程 A 执行动作的结果对于线程 B 是可见的。如果两个操作未按 happens-before 排序，JVM 将可以对他们任意重排序。</p>\n<p>下面介绍几个与理解 ConcurrentHashMap 有关的 happens-before 关系法则：</p>\n<ol>\n<li>程序次序法则：如果在程序中，所有动作 A 出现在动作 B 之前，则线程中的每动作 A 都 happens-before 于该线程中的每一个动作 B。</li>\n<li>监视器锁法则：对一个监视器的解锁 happens-before 于每个后续对同一监视器的加锁。</li>\n<li>Volatile 变量法则：对 Volatile 域的写入操作 happens-before 于每个后续对同一 Volatile 的读操作。</li>\n<li>传递性：如果 A happens-before 于 B，且 B happens-before C，则 A happens-before C。</li>\n</ol>\n<h2 id=\"Java-7基于分段锁的ConcurrentHashMap\"><a href=\"#Java-7基于分段锁的ConcurrentHashMap\" class=\"headerlink\" title=\"Java 7基于分段锁的ConcurrentHashMap\"></a>Java 7基于分段锁的ConcurrentHashMap</h2><h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><p>Java 7中的ConcurrentHashMap 类中包含两个静态内部类 HashEntry 和 Segment。HashEntry 用来封装映射表的键 / 值对；Segment 用来充当锁的角色，每个 Segment 对象守护整个散列映射表的若干个桶。每个桶是由若干个 HashEntry 对象链接起来的链表。一个 ConcurrentHashMap 实例中包含由若干个 Segment 对象组成的数组。</p>\n<ol>\n<li>最大的分段（segment）数为2的16次方，每一个segment的HashEntry[]的最大容量为2的30次方。</li>\n<li>默认的分段数和每个segment的HashEntry[]的初始容量均为16。segment的默认加载因子为0.75。</li>\n<li>定位segment段需要用的两个参数：segmentMask，segmentShift。</li>\n</ol>\n<p>整体数据结构如下图所示：</p>\n<p><img data-src=\"/images/concurrenthashmap/java7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png\" alt=\"java7数据结构\"></p>\n<span id=\"more\"></span>\n\n<h4 id=\"HashEntry-类\"><a href=\"#HashEntry-类\" class=\"headerlink\" title=\"HashEntry 类\"></a>HashEntry 类</h4><p>HashEntry 用来封装散列映射表中的键值对。在 HashEntry 类中，key，hash 和 next 域都被声明为 final 型，value 域被声明为 volatile 型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//HashEntry 类的定义</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HashEntry</span>&lt;K,V&gt; &#123;</span><br><span class=\"line\">       <span class=\"keyword\">final</span> K key;                       <span class=\"comment\">// 声明 key 为 final 型</span></span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"type\">int</span> hash;                   <span class=\"comment\">// 声明 hash 值为 final 型</span></span><br><span class=\"line\">       <span class=\"keyword\">volatile</span> V value;                 <span class=\"comment\">// 声明 value 为 volatile 型</span></span><br><span class=\"line\">       <span class=\"keyword\">final</span> HashEntry&lt;K,V&gt; next;      <span class=\"comment\">// 声明 next 为 final 型</span></span><br><span class=\"line\"></span><br><span class=\"line\">       HashEntry(K key, <span class=\"type\">int</span> hash, HashEntry&lt;K,V&gt; next, V value) &#123;</span><br><span class=\"line\">           <span class=\"built_in\">this</span>.key = key;</span><br><span class=\"line\">           <span class=\"built_in\">this</span>.hash = hash;</span><br><span class=\"line\">           <span class=\"built_in\">this</span>.next = next;</span><br><span class=\"line\">           <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 ConcurrentHashMap 中，在散列时如果产生“碰撞”，将采用“分离链接法”来处理“碰撞”：把“碰撞”的 HashEntry 对象链接成一个链表。由于 HashEntry 的 next 域为 final 型，所以新节点只能在链表的表头处插入。 下图是在一个空桶中依次插入 A，B，C 三个 HashEntry 对象后的结构图：</p>\n<p><img data-src=\"/images/concurrenthashmap/%E6%8F%92%E5%85%A5%E4%B8%89%E4%B8%AA%E8%8A%82%E7%82%B9%E5%90%8E%E6%A1%B6%E7%9A%84%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg\" alt=\"插入三个节点后桶的结构示意图\"></p>\n<blockquote>\n<p>由于只能在表头插入，所以链表中节点的顺序和插入的顺序相反。</p>\n</blockquote>\n<h4 id=\"Segment-类\"><a href=\"#Segment-类\" class=\"headerlink\" title=\"Segment 类\"></a>Segment 类</h4><p>Segment 类继承于 ReentrantLock 类，从而使得 Segment 对象能充当锁的角色。每个 Segment 对象用来守护其（成员对象 table 中）包含的若干个桶。</p>\n<p>table 是一个由 HashEntry 对象组成的数组。table 数组的每一个数组成员就是散列映射表的一个桶。</p>\n<p>count 变量是一个计数器，它表示每个 Segment 对象管理的 table 数组（若干个 HashEntry 组成的链表）包含的 HashEntry 对象的个数。每一个 Segment 对象都有一个 count 对象来表示本 Segment 中包含的 HashEntry 对象的总数。注意，之所以在每个 Segment 对象中包含一个计数器，而不是在 ConcurrentHashMap 中使用全局的计数器，是为了避免出现“热点域”而影响 ConcurrentHashMap 的并发性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Segment 类的定义</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Segment</span>&lt;K,V&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">ReentrantLock</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * 在本 segment 范围内，包含的 HashEntry 元素的个数</span></span><br><span class=\"line\"><span class=\"comment\">        * 该变量被声明为 volatile 型</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">       <span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> <span class=\"type\">int</span> count;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * table 被更新的次数</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">       <span class=\"keyword\">transient</span> <span class=\"type\">int</span> modCount;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * 当 table 中包含的 HashEntry 元素的个数超过本变量值时，触发 table 的再散列</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">       <span class=\"keyword\">transient</span> <span class=\"type\">int</span> threshold;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * table 是由 HashEntry 对象组成的数组</span></span><br><span class=\"line\"><span class=\"comment\">        * 如果散列时发生碰撞，碰撞的 HashEntry 对象就以链表的形式链接成一个链表</span></span><br><span class=\"line\"><span class=\"comment\">        * table 数组的数组成员代表散列映射表的一个桶</span></span><br><span class=\"line\"><span class=\"comment\">        * 每个 table 守护整个 ConcurrentHashMap 包含桶总数的一部分</span></span><br><span class=\"line\"><span class=\"comment\">        * 如果并发级别为 16，table 则守护 ConcurrentHashMap 包含的桶总数的 1/16</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">       <span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> HashEntry&lt;K,V&gt;[] table;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * 装载因子</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">       <span class=\"keyword\">final</span> <span class=\"type\">float</span> loadFactor;</span><br><span class=\"line\"></span><br><span class=\"line\">       Segment(<span class=\"type\">int</span> initialCapacity, <span class=\"type\">float</span> lf) &#123;</span><br><span class=\"line\">           loadFactor = lf;</span><br><span class=\"line\">           setTable(HashEntry.&lt;K,V&gt;newArray(initialCapacity));</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * 设置 table 引用到这个新生成的 HashEntry 数组</span></span><br><span class=\"line\"><span class=\"comment\">        * 只能在持有锁或构造函数中调用本方法</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">       <span class=\"keyword\">void</span> <span class=\"title function_\">setTable</span><span class=\"params\">(HashEntry&lt;K,V&gt;[] newTable)</span> &#123;</span><br><span class=\"line\">           <span class=\"comment\">// 计算临界阀值为新数组的长度与装载因子的乘积</span></span><br><span class=\"line\">           threshold = (<span class=\"type\">int</span>)(newTable.length * loadFactor);</span><br><span class=\"line\">           table = newTable;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * 根据 key 的散列值，找到 table 中对应的那个桶（table 数组的某个数组成员）</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">       HashEntry&lt;K,V&gt; <span class=\"title function_\">getFirst</span><span class=\"params\">(<span class=\"type\">int</span> hash)</span> &#123;</span><br><span class=\"line\">           HashEntry&lt;K,V&gt;[] tab = table;</span><br><span class=\"line\">           <span class=\"comment\">// 把散列值与 table 数组长度减 1 的值相“与”，</span></span><br><span class=\"line\"><span class=\"comment\">// 得到散列值对应的 table 数组的下标</span></span><br><span class=\"line\">           <span class=\"comment\">// 然后返回 table 数组中此下标对应的 HashEntry 元素</span></span><br><span class=\"line\">           <span class=\"keyword\">return</span> tab[hash &amp; (tab.length - <span class=\"number\">1</span>)];</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下图是依次插入 ABC 三个 HashEntry 节点后，Segment 的结构示意图。</p>\n<p><img data-src=\"/images/concurrenthashmap/%E6%8F%92%E5%85%A5%E4%B8%89%E4%B8%AA%E8%8A%82%E7%82%B9%E5%90%8ESegment%E7%9A%84%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg\" alt=\"插入三个节点后Segment的结构示意图\"></p>\n<h4 id=\"ConcurrentHashMap-类\"><a href=\"#ConcurrentHashMap-类\" class=\"headerlink\" title=\"ConcurrentHashMap 类\"></a>ConcurrentHashMap 类</h4><p>ConcurrentHashMap 在默认并发级别会创建包含 16 个 Segment 对象的数组。每个 Segment 的成员对象 table 包含若干个散列表的桶。每个桶是由 HashEntry 链接起来的一个链表。如果键能均匀散列，每个 Segment 大约守护整个散列表中桶总数的 1/16。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ConcurrentHashMap 类的定义</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConcurrentHashMap</span>&lt;K, V&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractMap</span>&lt;K, V&gt;</span><br><span class=\"line\">       <span class=\"keyword\">implements</span> <span class=\"title class_\">ConcurrentMap</span>&lt;K, V&gt;, Serializable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 散列映射表的默认初始容量为 16，即初始默认为 16 个桶</span></span><br><span class=\"line\"><span class=\"comment\">    * 在构造函数中没有指定这个参数时，使用本参数</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> DEFAULT_INITIAL_CAPACITY= <span class=\"number\">16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 散列映射表的默认装载因子为 0.75，该值是 table 中包含的 HashEntry 元素的个数与</span></span><br><span class=\"line\"><span class=\"comment\">* table 数组长度的比值</span></span><br><span class=\"line\"><span class=\"comment\">    * 当 table 中包含的 HashEntry 元素的个数超过了 table 数组的长度与装载因子的乘积时，</span></span><br><span class=\"line\"><span class=\"comment\">* 将触发 再散列</span></span><br><span class=\"line\"><span class=\"comment\">    * 在构造函数中没有指定这个参数时，使用本参数</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">float</span> DEFAULT_LOAD_FACTOR= <span class=\"number\">0.75f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 散列表的默认并发级别为 16。该值表示当前更新线程的估计数</span></span><br><span class=\"line\"><span class=\"comment\">    * 在构造函数中没有指定这个参数时，使用本参数</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> DEFAULT_CONCURRENCY_LEVEL= <span class=\"number\">16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * segments 的掩码值</span></span><br><span class=\"line\"><span class=\"comment\">    * key 的散列码的高位用来选择具体的 segment</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">final</span> <span class=\"type\">int</span> segmentMask;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 偏移量</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">final</span> <span class=\"type\">int</span> segmentShift;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 由 Segment 对象组成的数组</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">final</span> Segment&lt;K,V&gt;[] segments;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The maximum number of segments to allow; used to bound</span></span><br><span class=\"line\"><span class=\"comment\">     * constructor arguments.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">MAX_SEGMENTS</span> <span class=\"operator\">=</span> <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 创建一个带有指定初始容量、加载因子和并发级别的新的空映射。</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"title function_\">ConcurrentHashMap</span><span class=\"params\">(<span class=\"type\">int</span> initialCapacity,</span></span><br><span class=\"line\"><span class=\"params\">                            <span class=\"type\">float</span> loadFactor, <span class=\"type\">int</span> concurrencyLevel)</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(!(loadFactor &gt; <span class=\"number\">0</span>) || initialCapacity &lt; <span class=\"number\">0</span> ||</span><br><span class=\"line\">concurrencyLevel &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span>(concurrencyLevel &gt; MAX_SEGMENTS)</span><br><span class=\"line\">           concurrencyLevel = MAX_SEGMENTS;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 寻找最佳匹配参数（不小于给定参数的最接近的 2 次幂）</span></span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">sshift</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">ssize</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">       <span class=\"keyword\">while</span>(ssize &lt; concurrencyLevel) &#123;</span><br><span class=\"line\">           ++sshift;</span><br><span class=\"line\">           ssize &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       segmentShift = <span class=\"number\">32</span> - sshift;       <span class=\"comment\">// 偏移量值</span></span><br><span class=\"line\">       segmentMask = ssize - <span class=\"number\">1</span>;           <span class=\"comment\">// 掩码值</span></span><br><span class=\"line\">       <span class=\"built_in\">this</span>.segments = Segment.newArray(ssize);   <span class=\"comment\">// 创建数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class=\"line\">           initialCapacity = MAXIMUM_CAPACITY;</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> initialCapacity / ssize;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(c * ssize &lt; initialCapacity)</span><br><span class=\"line\">           ++c;</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">cap</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">       <span class=\"keyword\">while</span>(cap &lt; c)</span><br><span class=\"line\">           cap &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 依次遍历每个数组元素</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">this</span>.segments.length; ++i)</span><br><span class=\"line\">           <span class=\"comment\">// 初始化每个数组元素引用的 Segment 对象</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.segments[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">Segment</span>&lt;K,V&gt;(cap, loadFactor);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 创建一个带有默认初始容量 (16)、默认加载因子 (0.75) 和 默认并发级别 (16)</span></span><br><span class=\"line\"><span class=\"comment\"> * 的空散列映射表。</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"title function_\">ConcurrentHashMap</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 使用三个默认参数，调用上面重载的构造函数来创建空散列映射表</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_CONCURRENCY_LEVEL);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面是 ConcurrentHashMap 的结构示意图。</p>\n<p><img data-src=\"/images/concurrenthashmap/ConcurrentHashMap%E7%9A%84%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg\" alt=\"ConcurrentHashMap的结构示意图\"></p>\n<h3 id=\"寻址方式\"><a href=\"#寻址方式\" class=\"headerlink\" title=\"寻址方式\"></a>寻址方式</h3><p>在读写某个Key时，先取该Key的哈希值。并将哈希值的高N位对Segment个数取模从而得到该Key应该属于哪个Segment，接着如同操作HashMap一样操作这个Segment。为了保证不同的值均匀分布到不同的Segment，需要通过如下方法计算哈希值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">hash</span><span class=\"params\">(Object k)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> hashSeed;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((<span class=\"number\">0</span> != h) &amp;&amp; (k <span class=\"keyword\">instanceof</span> String)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sun.misc.Hashing.stringHash32((String) k);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  h ^= k.hashCode();</span><br><span class=\"line\">  h += (h &lt;&lt;  <span class=\"number\">15</span>) ^ <span class=\"number\">0xffffcd7d</span>;</span><br><span class=\"line\">  h ^= (h &gt;&gt;&gt; <span class=\"number\">10</span>);</span><br><span class=\"line\">  h += (h &lt;&lt;   <span class=\"number\">3</span>);</span><br><span class=\"line\">  h ^= (h &gt;&gt;&gt;  <span class=\"number\">6</span>);</span><br><span class=\"line\">  h += (h &lt;&lt;   <span class=\"number\">2</span>) + (h &lt;&lt; <span class=\"number\">14</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> h ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同样为了提高取模运算效率，通过如下计算，ssize即为大于concurrencyLevel的最小的2的N次方，同时segmentMask为2^N-1。这一点跟上文中计算数组长度的方法一致。对于某一个Key的哈希值，只需要向右移segmentShift位以取高sshift位，再与segmentMask取与操作即可得到它在Segment数组上的索引。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">sshift</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">ssize</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (ssize &lt; concurrencyLevel) &#123;</span><br><span class=\"line\">  ++sshift;</span><br><span class=\"line\">  ssize &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">this</span>.segmentShift = <span class=\"number\">32</span> - sshift;</span><br><span class=\"line\"><span class=\"built_in\">this</span>.segmentMask = ssize - <span class=\"number\">1</span>;</span><br><span class=\"line\">Segment&lt;K,V&gt;[] ss = (Segment&lt;K,V&gt;[])<span class=\"keyword\">new</span> <span class=\"title class_\">Segment</span>[ssize];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"size操作\"><a href=\"#size操作\" class=\"headerlink\" title=\"size操作\"></a>size操作</h3><p>put、remove和get操作只需要关心一个Segment，而size操作需要遍历所有的Segment才能算出整个Map的大小。一个简单的方案是，先锁住所有Sgment，计算完后再解锁。但这样做，在做size操作时，不仅无法对Map进行写操作，同时也无法进行读操作，不利于对Map的并行操作。</p>\n<p>为更好支持并发操作，ConcurrentHashMap会在不上锁的前提逐个Segment计算3次size，如果某相邻两次计算获取的所有Segment的更新次数（每个Segment都与HashMap一样通过modCount跟踪自己的修改次数，Segment每修改一次其modCount加一）相等，说明这两次计算过程中无更新操作，则这两次计算出的总size相等，可直接作为最终结果返回。如果这三次计算过程中Map有更新，则对所有Segment加锁重新计算Size。该计算方法代码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">size</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> Segment&lt;K,V&gt;[] segments = <span class=\"built_in\">this</span>.segments;</span><br><span class=\"line\">  <span class=\"type\">int</span> size;</span><br><span class=\"line\">  <span class=\"type\">boolean</span> overflow; <span class=\"comment\">// true if size overflows 32 bits</span></span><br><span class=\"line\">  <span class=\"type\">long</span> sum;         <span class=\"comment\">// sum of modCounts</span></span><br><span class=\"line\">  <span class=\"type\">long</span> <span class=\"variable\">last</span> <span class=\"operator\">=</span> <span class=\"number\">0L</span>;   <span class=\"comment\">// previous sum</span></span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"variable\">retries</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>; <span class=\"comment\">// first iteration isn&#x27;t retry</span></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (retries++ == RETRIES_BEFORE_LOCK) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; segments.length; ++j)</span><br><span class=\"line\">          ensureSegment(j).lock(); <span class=\"comment\">// force creation</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      sum = <span class=\"number\">0L</span>;</span><br><span class=\"line\">      size = <span class=\"number\">0</span>;</span><br><span class=\"line\">      overflow = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; segments.length; ++j) &#123;</span><br><span class=\"line\">        Segment&lt;K,V&gt; seg = segmentAt(segments, j);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (seg != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">          sum += seg.modCount;</span><br><span class=\"line\">          <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> seg.count;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (c &lt; <span class=\"number\">0</span> || (size += c) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            overflow = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (sum == last)</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      last = sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (retries &gt; RETRIES_BEFORE_LOCK) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; segments.length; ++j)</span><br><span class=\"line\">        segmentAt(segments, j).unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> overflow ? Integer.MAX_VALUE : size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用分离锁实现多个线程间的并发写操作\"><a href=\"#用分离锁实现多个线程间的并发写操作\" class=\"headerlink\" title=\"用分离锁实现多个线程间的并发写操作\"></a>用分离锁实现多个线程间的并发写操作</h3><p>在 ConcurrentHashMap 中，线程对映射表做读操作时，一般情况下不需要加锁就可以完成，对容器做结构性修改的操作才需要加锁。下面以 put 操作为例说明对 ConcurrentHashMap 做结构性修改的过程。</p>\n<p>首先，根据 key 计算出对应的 hash 值：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Put 方法的实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> V <span class=\"title function_\">put</span><span class=\"params\">(K key, V value)</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (value == <span class=\"literal\">null</span>)          <span class=\"comment\">//ConcurrentHashMap 中不允许用 null 作为映射值</span></span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">hash</span> <span class=\"operator\">=</span> hash(key.hashCode());        <span class=\"comment\">// 计算键对应的散列码</span></span><br><span class=\"line\">       <span class=\"comment\">// 根据散列码找到对应的 Segment</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> segmentFor(hash).put(key, hash, value, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后，根据 hash 值找到对应的Segment 对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//根据 hash 值找到对应的 Segment</span></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 使用 key 的散列码来得到 segments 数组中对应的 Segment</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> Segment&lt;K,V&gt; <span class=\"title function_\">segmentFor</span><span class=\"params\">(<span class=\"type\">int</span> hash)</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 将散列值右移 segmentShift 个位，并在高位填充 0</span></span><br><span class=\"line\">   <span class=\"comment\">// 然后把得到的值与 segmentMask 相“与”</span></span><br><span class=\"line\"><span class=\"comment\">// 从而得到 hash 值对应的 segments 数组的下标值</span></span><br><span class=\"line\"><span class=\"comment\">// 最后根据下标值返回散列码对应的 Segment 对象</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> segments[(hash &gt;&gt;&gt; segmentShift) &amp; segmentMask];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后，在这个 Segment 中执行具体的 put 操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在 Segment 中执行具体的 put 操作</span></span><br><span class=\"line\">V <span class=\"title function_\">put</span><span class=\"params\">(K key, <span class=\"type\">int</span> hash, V value, <span class=\"type\">boolean</span> onlyIfAbsent)</span> &#123;</span><br><span class=\"line\">    lock();  <span class=\"comment\">// 加锁，这里是锁定某个 Segment 对象而非整个 ConcurrentHashMap</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> count;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c++ &gt; threshold)     <span class=\"comment\">// 如果超过再散列的阈值</span></span><br><span class=\"line\">            rehash();              <span class=\"comment\">// 执行再散列，table 数组的长度将扩充一倍</span></span><br><span class=\"line\">        HashEntry&lt;K,V&gt;[] tab = table;</span><br><span class=\"line\">        <span class=\"comment\">// 把散列码值与 table 数组的长度减 1 的值相“与”</span></span><br><span class=\"line\">        <span class=\"comment\">// 得到该散列码对应的 table 数组的下标值</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> hash &amp; (tab.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 找到散列码对应的具体的那个桶</span></span><br><span class=\"line\">        HashEntry&lt;K,V&gt; first = tab[index];</span><br><span class=\"line\">        HashEntry&lt;K,V&gt; e = first;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (e != <span class=\"literal\">null</span> &amp;&amp; (e.hash != hash || !key.equals(e.key)))</span><br><span class=\"line\">            e = e.next;</span><br><span class=\"line\">        V oldValue;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e != <span class=\"literal\">null</span>) &#123;            <span class=\"comment\">// 如果键 / 值对以经存在</span></span><br><span class=\"line\">            oldValue = e.value;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!onlyIfAbsent)</span><br><span class=\"line\">                e.value = value;    <span class=\"comment\">// 设置 value 值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;                        <span class=\"comment\">// 键 / 值对不存在</span></span><br><span class=\"line\">            oldValue = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            ++modCount;         <span class=\"comment\">// 要添加新节点到链表中，所以 modCont 要加 1</span></span><br><span class=\"line\">            <span class=\"comment\">// 创建新节点，并添加到链表的头部</span></span><br><span class=\"line\">            tab[index] = <span class=\"keyword\">new</span> <span class=\"title class_\">HashEntry</span>&lt;K,V&gt;(key, hash, first, value);</span><br><span class=\"line\">            count = c;               <span class=\"comment\">// 写 count 变量</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        unlock();                     <span class=\"comment\">// 解锁</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意：这里的加锁操作是针对（键的 hash 值对应的）某个具体的 Segment，锁定的是该 Segment 而不是整个 ConcurrentHashMap。因为插入键/值对操作只是在这个 Segment 包含的某个桶中完成，不需要锁定整个ConcurrentHashMap。此时，其他写线程对另外 15 个Segment 的加锁并不会因为当前线程对这个 Segment 的加锁而阻塞。同时，所有读线程几乎不会因本线程的加锁而阻塞（除非读线程刚好读到这个 Segment 中某个 HashEntry 的 value 域的值为 null，此时需要加锁后重新读取该值）。</p>\n<p>相比较于 HashTable 和由同步包装器包装的 HashMap每次只能有一个线程执行读或写操作，ConcurrentHashMap 在并发访问性能上有了质的提高。在理想状态下，ConcurrentHashMap 可以支持 16 个线程执行并发写操作（如果并发级别设置为 16），及任意数量线程的读操作。</p>\n<p>获取锁时，并不直接使用lock来获取，因为该方法获取锁失败时会挂起（参考可重入锁）。事实上，它使用了自旋锁，如果tryLock获取锁失败，说明锁被其它线程占用，此时通过循环再次以tryLock的方式申请锁。如果在循环过程中该Key所对应的链表头被修改，则重置retry次数。如果retry次数超过一定值，则使用lock方法申请锁。</p>\n<p>这里使用自旋锁是因为自旋锁的效率比较高，但是它消耗CPU资源比较多，因此在自旋次数超过阈值时切换为互斥锁。</p>\n<h3 id=\"用-HashEntery-对象的不变性来降低读操作对加锁的需求\"><a href=\"#用-HashEntery-对象的不变性来降低读操作对加锁的需求\" class=\"headerlink\" title=\"用 HashEntery 对象的不变性来降低读操作对加锁的需求\"></a>用 HashEntery 对象的不变性来降低读操作对加锁的需求</h3><p>在代码清单“HashEntry 类的定义”中我们可以看到，HashEntry 中的 key，hash，next 都声明为 final 型。这意味着，不能把节点添加到链接的中间和尾部，也不能在链接的中间和尾部删除节点。这个特性可以保证：在访问某个节点时，这个节点之后的链接不会被改变。这个特性可以大大降低处理链表时的复杂性。</p>\n<p>同时，HashEntry 类的 value 域被声明为 Volatile 型，Java 的内存模型可以保证：某个写线程对 value 域的写入马上可以被后续的某个读线程“看”到。在 ConcurrentHashMap 中，不允许用 unll 作为键和值，当读线程读到某个 HashEntry 的 value 域的值为 null 时，便知道产生了冲突——发生了重排序现象，需要加锁后重新读入这个 value 值。这些特性互相配合，使得读线程即使在不加锁状态下，也能正确访问 ConcurrentHashMap。</p>\n<p>下面我们分别来分析线程写入的两种情形：对散列表做非结构性修改的操作和对散列表做结构性修改的操作。</p>\n<p>非结构性修改操作只是更改某个 HashEntry 的 value 域的值。由于对 Volatile 变量的写入操作将与随后对这个变量的读操作进行同步。当一个写线程修改了某个 HashEntry 的 value 域后，另一个读线程读这个值域，Java 内存模型能够保证读线程读取的一定是更新后的值。所以，写线程对链表的非结构性修改能够被后续不加锁的读线程“看到”。</p>\n<p>对 ConcurrentHashMap 做结构性修改，实质上是对某个桶指向的链表做结构性修改。如果能够确保：在读线程遍历一个链表期间，写线程对这个链表所做的结构性修改不影响读线程继续正常遍历这个链表。那么读 / 写线程之间就可以安全并发访问这个 ConcurrentHashMap。</p>\n<p>结构性修改操作包括 put，remove，clear。下面我们分别分析这三个操作。</p>\n<p>clear 操作只是把 ConcurrentHashMap 中所有的桶“置空”，每个桶之前引用的链表依然存在，只是桶不再引用到这些链表（所有链表的结构并没有被修改）。正在遍历某个链表的读线程依然可以正常执行对该链表的遍历。</p>\n<p>从上面的代码清单“在 Segment 中执行具体的 put 操作”中，我们可以看出：put 操作如果需要插入一个新节点到链表中时 , 会在链表头部插入这个新节点。此时，链表中的原有节点的链接并没有被修改。也就是说：插入新健 / 值对到链表中的操作不会影响读线程正常遍历这个链表。</p>\n<p>下面来分析 remove 操作，先让我们来看看 remove 操作的源代码实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//remove 操作</span></span><br><span class=\"line\">V <span class=\"title function_\">remove</span><span class=\"params\">(Object key, <span class=\"type\">int</span> hash, Object value)</span> &#123;</span><br><span class=\"line\">    lock();         <span class=\"comment\">// 加锁</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> count - <span class=\"number\">1</span>;</span><br><span class=\"line\">        HashEntry&lt;K,V&gt;[] tab = table;</span><br><span class=\"line\">        <span class=\"comment\">// 根据散列码找到 table 的下标值</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> hash &amp; (tab.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 找到散列码对应的那个桶</span></span><br><span class=\"line\">        HashEntry&lt;K,V&gt; first = tab[index];</span><br><span class=\"line\">        HashEntry&lt;K,V&gt; e = first;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(e != <span class=\"literal\">null</span>&amp;&amp; (e.hash != hash || !key.equals(e.key)))</span><br><span class=\"line\">            e = e.next;</span><br><span class=\"line\">        <span class=\"type\">V</span> <span class=\"variable\">oldValue</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(e != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">V</span> <span class=\"variable\">v</span> <span class=\"operator\">=</span> e.value;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(value == <span class=\"literal\">null</span>|| value.equals(v)) &#123; <span class=\"comment\">// 找到要删除的节点</span></span><br><span class=\"line\">                oldValue = v;</span><br><span class=\"line\">                ++modCount;</span><br><span class=\"line\">                <span class=\"comment\">// 所有处于待删除节点之后的节点原样保留在链表中</span></span><br><span class=\"line\">                <span class=\"comment\">// 所有处于待删除节点之前的节点被克隆到新链表中</span></span><br><span class=\"line\">                HashEntry&lt;K,V&gt; newFirst = e.next;<span class=\"comment\">// 待删节点的后继结点</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(HashEntry&lt;K,V&gt; p = first; p != e; p = p.next)</span><br><span class=\"line\">                    newFirst = <span class=\"keyword\">new</span> <span class=\"title class_\">HashEntry</span>&lt;K,V&gt;(p.key, p.hash,</span><br><span class=\"line\">                                                  newFirst, p.value);</span><br><span class=\"line\">                <span class=\"comment\">// 把桶链接到新的头结点</span></span><br><span class=\"line\">                <span class=\"comment\">// 新的头结点是原链表中，删除节点之前的那个节点</span></span><br><span class=\"line\">                tab[index] = newFirst;</span><br><span class=\"line\">                count = c;      <span class=\"comment\">// 写 count 变量</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">        unlock();               <span class=\"comment\">// 解锁</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>和 get 操作一样，首先根据散列码找到具体的链表；然后遍历这个链表找到要删除的节点；最后把待删除节点之后的所有节点原样保留在新链表中，把待删除节点之前的每个节点克隆到新链表中。下面通过图例来说明 remove 操作。假设写线程执行 remove 操作，要删除链表的 <code>C 节点</code> ，另一个读线程同时正在遍历这个链表。</p>\n<p>执行删除之前的原链表:</p>\n<p><img data-src=\"/images/concurrenthashmap/%E6%89%A7%E8%A1%8C%E5%88%A0%E9%99%A4%E4%B9%8B%E5%89%8D%E7%9A%84%E5%8E%9F%E9%93%BE%E8%A1%A8.jpg\" alt=\"执行删除之前的原链表\"></p>\n<p>执行删除之后的新链表:</p>\n<p><img data-src=\"/images/concurrenthashmap/%E6%89%A7%E8%A1%8C%E5%88%A0%E9%99%A4%E4%B9%8B%E5%90%8E%E7%9A%84%E6%96%B0%E9%93%BE%E8%A1%A8.jpg\" alt=\"执行删除之后的新链表\"></p>\n<p>从上图可以看出，删除节点 C 之后的所有节点原样保留到新链表中；删除节点 C 之前的每个节点被克隆到新链表中，注意：它们在新链表中的链接顺序被反转了。</p>\n<p>在执行 remove 操作时，原始链表并没有被修改，也就是说：读线程不会受同时执行 remove 操作的并发写线程的干扰。</p>\n<p>综合上面的分析我们可以看出，写线程对某个链表的结构性修改不会影响其他的并发读线程对这个链表的遍历访问。</p>\n<h3 id=\"用-Volatile-变量协调读写线程间的内存可见性\"><a href=\"#用-Volatile-变量协调读写线程间的内存可见性\" class=\"headerlink\" title=\"用 Volatile 变量协调读写线程间的内存可见性\"></a>用 Volatile 变量协调读写线程间的内存可见性</h3><p>由于内存可见性问题，未正确同步的情况下，写线程写入的值可能并不为后续的读线程可见。</p>\n<p>下面以写线程 M 和读线程 N 来说明 ConcurrentHashMap 如何协调读 / 写线程间的内存可见性问题。</p>\n<p><img data-src=\"/images/concurrenthashmap/%E5%8D%8F%E8%B0%83%E8%AF%BB-%E5%86%99%E7%BA%BF%E7%A8%8B%E9%97%B4%E7%9A%84%E5%86%85%E5%AD%98%E5%8F%AF%E8%A7%81%E6%80%A7%E7%9A%84%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg\" alt=\"协调读-写线程间的内存可见性的示意图\"></p>\n<p>假设线程 M 在写入了 volatile 型变量 count 后，线程 N 读取了这个 volatile 型变量 count。</p>\n<p>根据 happens-before 关系法则中的程序次序法则，A appens-before 于 B，C happens-before D。</p>\n<p>根据 Volatile 变量法则，B happens-before C。</p>\n<p>根据传递性，连接上面三个 happens-before 关系得到：A appens-before 于 B； B appens-before C；C happens-before D。也就是说：写线程 M 对链表做的结构性修改，在读线程 N 读取了同一个 volatile 变量后，对线程 N 也是可见的了。</p>\n<p>虽然线程 N 是在未加锁的情况下访问链表。Java 的内存模型可以保证：只要之前对链表做结构性修改操作的写线程 M 在退出写方法前写 volatile 型变量 count，读线程 N 在读取这个 volatile 型变量 count 后，就一定能“看到”这些修改。</p>\n<p>ConcurrentHashMap 中，每个 Segment 都有一个变量 count。它用来统计 Segment 中的 HashEntry 的个数。这个变量被声明为 volatile。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Count 变量的声明</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> <span class=\"type\">int</span> count;</span><br></pre></td></tr></table></figure>\n\n<p>所有不加锁读方法，在进入读方法时，首先都会去读这个 count 变量。比如下面的 get 方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//get 操作</span></span><br><span class=\"line\">V <span class=\"title function_\">get</span><span class=\"params\">(Object key, <span class=\"type\">int</span> hash)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(count != <span class=\"number\">0</span>) &#123;       <span class=\"comment\">// 首先读 count 变量</span></span><br><span class=\"line\">        HashEntry&lt;K,V&gt; e = getFirst(hash);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(e != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(e.hash == hash &amp;&amp; key.equals(e.key)) &#123;</span><br><span class=\"line\">                <span class=\"type\">V</span> <span class=\"variable\">v</span> <span class=\"operator\">=</span> e.value;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(v != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">                <span class=\"comment\">// 如果读到 value 域为 null，说明发生了重排序，加锁后重新读取</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> readValueUnderLock(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            e = e.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 ConcurrentHashMap 中，所有执行写操作的方法（put, remove, clear），在对链表做结构性修改之后，在退出写方法前都会去写这个 count 变量。所有未加锁的读操作（get, contains, containsKey）在读方法中，都会首先去读取这个 count 变量。</p>\n<p>根据 Java 内存模型，对 同一个 volatile 变量的写 / 读操作可以确保：写线程写入的值，能够被之后未加锁的读线程“看到”。</p>\n<p>这个特性和前面介绍的 HashEntry 对象的不变性相结合，使得在 ConcurrentHashMap 中，读线程在读取散列表时，基本不需要加锁就能成功获得需要的值。这两个特性相配合，不仅减少了请求同一个锁的频率（读操作一般不需要加锁就能够成功获得值），也减少了持有同一个锁的时间（只有读到 value 域的值为 null 时 , 读线程才需要加锁后重读）。</p>\n<h2 id=\"Java-8基于CAS的ConcurrentHashMap\"><a href=\"#Java-8基于CAS的ConcurrentHashMap\" class=\"headerlink\" title=\"Java 8基于CAS的ConcurrentHashMap\"></a>Java 8基于CAS的ConcurrentHashMap</h2><h3 id=\"Java-8-的数据结构\"><a href=\"#Java-8-的数据结构\" class=\"headerlink\" title=\"Java 8 的数据结构\"></a>Java 8 的数据结构</h3><p>Java 7为实现并行访问，引入了Segment这一结构，实现了分段锁，理论上最大并发度与Segment个数相等。Java 8为进一步提高并发性，摒弃了分段锁的方案，而是直接使用一个大的数组。同时为了提高哈希碰撞下的寻址性能，Java 8在链表长度超过一定阈值（8）时将链表（寻址时间复杂度为O(N)）转换为红黑树（寻址时间复杂度为O(long(N))）。其数据结构如下图所示</p>\n<p>整体数据结构如下图所示：</p>\n<p><img data-src=\"/images/concurrenthashmap/java8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png\" alt=\"java8数据结构\"></p>\n<h3 id=\"Java-8-的同步方式\"><a href=\"#Java-8-的同步方式\" class=\"headerlink\" title=\"Java 8 的同步方式\"></a>Java 8 的同步方式</h3><p>对于put操作，如果Key对应的数组元素为null，则通过 <code>CAS操作</code> 将其设置为当前值。如果Key对应的数组元素（也即链表表头或者树的根元素）不为null，则对该元素使用synchronized关键字申请锁，然后进行操作。如果该put操作使得当前链表长度超过一定阈值，则将该链表转换为树，从而提高寻址效率。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span>&lt;K,V&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"type\">int</span> hash;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> K key;</span><br><span class=\"line\">  <span class=\"keyword\">volatile</span> V val;</span><br><span class=\"line\">  <span class=\"keyword\">volatile</span> Node&lt;K,V&gt; next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于读操作，由于数组被volatile关键字修饰，因此不用担心数组的可见性问题。同时每个元素是一个Node实例（Java 7中每个元素是一个HashEntry），它的Key值和hash值都由final修饰，不可变更，无须关心它们被修改后的可见性问题。而其Value及对下一个元素的引用由volatile修饰，可见性也有保障。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> &lt;K,V&gt; Node&lt;K,V&gt; <span class=\"title function_\">tabAt</span><span class=\"params\">(Node&lt;K,V&gt;[] tab, <span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (Node&lt;K,V&gt;)U.getObjectVolatile(tab, ((<span class=\"type\">long</span>)i &lt;&lt; ASHIFT) + ABASE);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ConcurrentHashMap</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ConcurrentHashMap</span><span class=\"params\">(<span class=\"type\">int</span> initialCapacity)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (initialCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">cap</span> <span class=\"operator\">=</span> ((initialCapacity &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class=\"number\">1</span>)) ?</span><br><span class=\"line\">               MAXIMUM_CAPACITY :</span><br><span class=\"line\">               tableSizeFor(initialCapacity + (initialCapacity &gt;&gt;&gt; <span class=\"number\">1</span>) + <span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.sizeCtl = cap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过提供初始容量，计算了 sizeCtl，sizeCtl = [(1.5 * initialCapacity + 1)，然后向上取最近的 2 的 n 次方]。如 initialCapacity 为 10，那么得到 sizeCtl 为 16，如果 initialCapacity 为 11，得到 sizeCtl 为 32。</p>\n<h3 id=\"put-过程\"><a href=\"#put-过程\" class=\"headerlink\" title=\"put 过程\"></a>put 过程</h3><p>put 的主流程，第一个是初始化，第二个是扩容，第三个是帮助数据迁移。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> V <span class=\"title function_\">put</span><span class=\"params\">(K key, V value)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> putVal(key, value, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">final</span> V <span class=\"title function_\">putVal</span><span class=\"params\">(K key, V value, <span class=\"type\">boolean</span> onlyIfAbsent)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key == <span class=\"literal\">null</span> || value == <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 得到 hash 值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">hash</span> <span class=\"operator\">=</span> spread(key.hashCode());</span><br><span class=\"line\">    <span class=\"comment\">// 用于记录相应链表的长度</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">binCount</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt; f; <span class=\"type\">int</span> n, i, fh;</span><br><span class=\"line\">        <span class=\"comment\">// 如果数组&quot;空&quot;，进行数组初始化</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tab == <span class=\"literal\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"comment\">// 初始化数组，后面会详细介绍</span></span><br><span class=\"line\">            tab = initTable();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 找该 hash 值对应的数组下标，得到第一个节点 f</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((f = tabAt(tab, i = (n - <span class=\"number\">1</span>) &amp; hash)) == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果数组该位置为空，</span></span><br><span class=\"line\">            <span class=\"comment\">//    用一次 CAS 操作将这个新值放入其中即可，这个 put 操作差不多就结束了，可以拉到最后面了</span></span><br><span class=\"line\">            <span class=\"comment\">//          如果 CAS 失败，那就是有并发操作，进到下一个循环就好了</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (casTabAt(tab, i, <span class=\"literal\">null</span>,</span><br><span class=\"line\">                         <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;K,V&gt;(hash, key, value, <span class=\"literal\">null</span>)))</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;                   <span class=\"comment\">// no lock when adding to empty bin</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// hash 居然可以等于 MOVED，这个需要到后面才能看明白，不过从名字上也能猜到，肯定是因为在扩容</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((fh = f.hash) == MOVED)</span><br><span class=\"line\">            <span class=\"comment\">// 帮助数据迁移，这个等到看完数据迁移部分的介绍后，再理解这个就很简单了</span></span><br><span class=\"line\">            tab = helpTransfer(tab, f);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 到这里就是说，f 是该位置的头结点，而且不为空</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">V</span> <span class=\"variable\">oldVal</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 获取数组该位置的头结点的监视器锁</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (f) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (fh &gt;= <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 头结点的 hash 值大于 0，说明是链表</span></span><br><span class=\"line\">                        <span class=\"comment\">// 用于累加，记录链表的长度</span></span><br><span class=\"line\">                        binCount = <span class=\"number\">1</span>;</span><br><span class=\"line\">                        <span class=\"comment\">// 遍历链表</span></span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class=\"line\">                            K ek;</span><br><span class=\"line\">                            <span class=\"comment\">// 如果发现了&quot;相等&quot;的 key，判断是否要进行值覆盖，然后也就可以 break 了</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                                ((ek = e.key) == key ||</span><br><span class=\"line\">                                 (ek != <span class=\"literal\">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class=\"line\">                                oldVal = e.val;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (!onlyIfAbsent)</span><br><span class=\"line\">                                    e.val = value;</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            <span class=\"comment\">// 到了链表的最末端，将这个新值放到链表的最后面</span></span><br><span class=\"line\">                            Node&lt;K,V&gt; pred = e;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((e = e.next) == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                                pred.next = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;K,V&gt;(hash, key,</span><br><span class=\"line\">                                                          value, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (f <span class=\"keyword\">instanceof</span> TreeBin) &#123; <span class=\"comment\">// 红黑树</span></span><br><span class=\"line\">                        Node&lt;K,V&gt; p;</span><br><span class=\"line\">                        binCount = <span class=\"number\">2</span>;</span><br><span class=\"line\">                        <span class=\"comment\">// 调用红黑树的插值方法插入新节点</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class=\"line\">                                                       value)) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                            oldVal = p.val;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (!onlyIfAbsent)</span><br><span class=\"line\">                                p.val = value;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// binCount != 0 说明上面在做链表操作</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (binCount != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 判断是否要将链表转换为红黑树，临界值和 HashMap 一样，也是 8</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class=\"line\">                    <span class=\"comment\">// 这个方法和 HashMap 中稍微有一点点不同，那就是它不是一定会进行红黑树转换，</span></span><br><span class=\"line\">                    <span class=\"comment\">// 如果当前数组的长度小于 64，那么会选择进行数组扩容，而不是转换为红黑树</span></span><br><span class=\"line\">                    <span class=\"comment\">//    具体源码我们就不看了，扩容部分后面说</span></span><br><span class=\"line\">                    treeifyBin(tab, i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (oldVal != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> oldVal;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    addCount(<span class=\"number\">1L</span>, binCount);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在对put(putVal)方法做一个总结:</p>\n<ol>\n<li>如果待插入的键值对中key或value为null, 抛出异常, 结束. 否则执行2</li>\n<li>如果table为null, 则进行初始化操作initTable(), 否则执行3</li>\n<li>如果table[i]为空, 则用CAS在table[i]头结点直接插入, 如果CAS执行成功, 退出插入操作; 执行步骤7; 如果CAS失败, 则说明有其他节点已经插入, 执行4</li>\n<li>此时判断, hash值是否为MOVED(-1), 如果是则说明其他有其他线程在执行扩容操作, 帮助他们一起扩容, 来提高性能. 如果没有在扩容, 那么执行5</li>\n<li>判断hash的值, 如果fh(table[i])的hash&gt;=0, 则在链表合适的位置插入, 否则, 查看table[i]是否是红黑树结构, 如果是, 则在红黑树适当位置插入. 到此时, 键值对已经顺利插入. 接下来执行6</li>\n<li>如果table[i]节点数binCount不为0, 判断它此时的状态, 是否需要转变为红黑树</li>\n<li>执行addcount(1L, binCount)</li>\n</ol>\n<h4 id=\"初始化数组-initTable\"><a href=\"#初始化数组-initTable\" class=\"headerlink\" title=\"初始化数组(initTable)\"></a>初始化数组(initTable)</h4><p>初始化方法中的并发问题是通过对 sizeCtl 进行一个 CAS 操作来控制的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Node&lt;K,V&gt;[] initTable() &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; <span class=\"type\">int</span> sc;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((tab = table) == <span class=\"literal\">null</span> || tab.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化的&quot;功劳&quot;被其他线程&quot;抢去&quot;了</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((sc = sizeCtl) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            Thread.<span class=\"keyword\">yield</span>(); <span class=\"comment\">// lost initialization race; just spin</span></span><br><span class=\"line\">        <span class=\"comment\">// CAS 一下，将 sizeCtl 设置为 -1，代表抢到了锁</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"built_in\">this</span>, SIZECTL, sc, -<span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((tab = table) == <span class=\"literal\">null</span> || tab.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// DEFAULT_CAPACITY 默认初始容量是 16</span></span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> (sc &gt; <span class=\"number\">0</span>) ? sc : DEFAULT_CAPACITY;</span><br><span class=\"line\">                    <span class=\"comment\">// 初始化数组，长度为 16 或初始化时提供的长度</span></span><br><span class=\"line\">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;?,?&gt;[n];</span><br><span class=\"line\">                    <span class=\"comment\">// 将这个数组赋值给 table，table 是 volatile 的</span></span><br><span class=\"line\">                    table = tab = nt;</span><br><span class=\"line\">                    <span class=\"comment\">// 如果 n 为 16 的话，那么这里 sc = 12</span></span><br><span class=\"line\">                    <span class=\"comment\">// 其实就是 0.75 * n</span></span><br><span class=\"line\">                    sc = n - (n &gt;&gt;&gt; <span class=\"number\">2</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 设置 sizeCtl 为 sc，我们就当是 12 吧</span></span><br><span class=\"line\">                sizeCtl = sc;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tab;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果sizeCtl&lt;0, 则说明已经有线程在执行初始化, 则其他执行初始化方式的线程应当交出CPU时间片退出; 否则, 用CAS把sizeCtl设置为-1, 告诉其他线程, 自己正在执行初始化, 此时段其他进入初始化方法的线程将交出时间片.</p>\n<h4 id=\"链表转红黑树-treeifyBin\"><a href=\"#链表转红黑树-treeifyBin\" class=\"headerlink\" title=\"链表转红黑树(treeifyBin)\"></a>链表转红黑树(treeifyBin)</h4><p>treeifyBin 不一定就会进行红黑树转换，也可能是仅仅做数组扩容。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">treeifyBin</span><span class=\"params\">(Node&lt;K,V&gt;[] tab, <span class=\"type\">int</span> index)</span> &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt; b; <span class=\"type\">int</span> n, sc;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tab != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// MIN_TREEIFY_CAPACITY 为 64</span></span><br><span class=\"line\">        <span class=\"comment\">// 所以，如果数组长度小于 64 的时候，其实也就是 32 或者 16 或者更小的时候，会进行数组扩容</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class=\"line\">            <span class=\"comment\">// 后面我们再详细分析这个方法</span></span><br><span class=\"line\">            tryPresize(n &lt;&lt; <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">// b 是头结点</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((b = tabAt(tab, index)) != <span class=\"literal\">null</span> &amp;&amp; b.hash &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 加锁</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (b) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tabAt(tab, index) == b) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 下面就是遍历链表，建立一颗红黑树</span></span><br><span class=\"line\">                    TreeNode&lt;K,V&gt; hd = <span class=\"literal\">null</span>, tl = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (Node&lt;K,V&gt; e = b; e != <span class=\"literal\">null</span>; e = e.next) &#123;</span><br><span class=\"line\">                        TreeNode&lt;K,V&gt; p =</span><br><span class=\"line\">                            <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>&lt;K,V&gt;(e.hash, e.key, e.val,</span><br><span class=\"line\">                                              <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((p.prev = tl) == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                            hd = p;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span></span><br><span class=\"line\">                            tl.next = p;</span><br><span class=\"line\">                        tl = p;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// 将红黑树设置到数组相应位置中</span></span><br><span class=\"line\">                    setTabAt(tab, index, <span class=\"keyword\">new</span> <span class=\"title class_\">TreeBin</span>&lt;K,V&gt;(hd));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"扩容-tryPresize\"><a href=\"#扩容-tryPresize\" class=\"headerlink\" title=\"扩容(tryPresize)\"></a>扩容(tryPresize)</h4><p>扩容是做翻倍扩容的，扩容后数组容量为原来的 2 倍。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先要说明的是，方法参数 size 传进来的时候就已经翻了倍了</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">tryPresize</span><span class=\"params\">(<span class=\"type\">int</span> size)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// c：size 的 1.5 倍，再加 1，再往上取最近的 2 的 n 次方。</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> (size &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class=\"number\">1</span>)) ? MAXIMUM_CAPACITY :</span><br><span class=\"line\">        tableSizeFor(size + (size &gt;&gt;&gt; <span class=\"number\">1</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> sc;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((sc = sizeCtl) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt;[] tab = table; <span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 这个 if 分支和之前说的初始化数组的代码基本上是一样的，在这里，我们可以不用管这块代码</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tab == <span class=\"literal\">null</span> || (n = tab.length) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            n = (sc &gt; c) ? sc : c;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"built_in\">this</span>, SIZECTL, sc, -<span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (table == tab) &#123;</span><br><span class=\"line\">                        <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">                        Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;?,?&gt;[n];</span><br><span class=\"line\">                        table = nt;</span><br><span class=\"line\">                        sc = n - (n &gt;&gt;&gt; <span class=\"number\">2</span>); <span class=\"comment\">// 0.75 * n</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    sizeCtl = sc;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c &lt;= sc || n &gt;= MAXIMUM_CAPACITY)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tab == table) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 我没看懂 rs 的真正含义是什么，不过也关系不大</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">rs</span> <span class=\"operator\">=</span> resizeStamp(n);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sc &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                Node&lt;K,V&gt;[] nt;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class=\"number\">1</span> ||</span><br><span class=\"line\">                    sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class=\"literal\">null</span> ||</span><br><span class=\"line\">                    transferIndex &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 2. 用 CAS 将 sizeCtl 加 1，然后执行 transfer 方法</span></span><br><span class=\"line\">                <span class=\"comment\">//    此时 nextTab 不为 null</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"built_in\">this</span>, SIZECTL, sc, sc + <span class=\"number\">1</span>))</span><br><span class=\"line\">                    transfer(tab, nt);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 1. 将 sizeCtl 设置为 (rs &lt;&lt; RESIZE_STAMP_SHIFT) + 2)</span></span><br><span class=\"line\">            <span class=\"comment\">//     我是没看懂这个值真正的意义是什么？不过可以计算出来的是，结果是一个比较大的负数</span></span><br><span class=\"line\">            <span class=\"comment\">//  调用 transfer 方法，此时 nextTab 参数为 null</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"built_in\">this</span>, SIZECTL, sc,</span><br><span class=\"line\">                                         (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class=\"number\">2</span>))</span><br><span class=\"line\">                transfer(tab, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法的核心在于 sizeCtl 值的操作，首先将其设置为一个负数，然后执行 transfer(tab, null)，再下一个循环将 sizeCtl 加 1，并执行 transfer(tab, nt)，之后可能是继续 sizeCtl 加 1，并执行 transfer(tab, nt)。</p>\n<p>所以，可能的操作就是执行 1 次 transfer(tab, null) + 多次 transfer(tab, nt)，这里怎么结束循环的需要看完 transfer 源码才清楚。</p>\n<h4 id=\"数据迁移-transfer\"><a href=\"#数据迁移-transfer\" class=\"headerlink\" title=\"数据迁移(transfer)\"></a>数据迁移(transfer)</h4><p>将原来的 tab 数组的元素迁移到新的 nextTab 数组中。</p>\n<p>虽然我们之前说的 tryPresize 方法中多次调用 transfer 不涉及多线程，但是这个 transfer 方法可以在其他地方被调用，典型地，我们之前在说 put 方法的时候就说过了，请往上看 put 方法，是不是有个地方调用了 helpTransfer 方法，helpTransfer 方法会调用 transfer 方法的。</p>\n<p>此方法支持多线程执行，外围调用此方法的时候，会保证第一个发起数据迁移的线程，nextTab 参数为 null，之后再调用此方法的时候，nextTab 不会为 null。</p>\n<p>阅读源码之前，先要理解并发操作的机制。原数组长度为 n，所以我们有 n 个迁移任务，让每个线程每次负责一个小任务是最简单的，每做完一个任务再检测是否有其他没做完的任务，帮助迁移就可以了，而 Doug Lea 使用了一个 stride，简单理解就是步长，每个线程每次负责迁移其中的一部分，如每次迁移 16 个小任务。所以，我们就需要一个全局的调度者来安排哪个线程执行哪几个任务，这个就是属性 transferIndex 的作用。</p>\n<p>第一个发起数据迁移的线程会将 transferIndex 指向原数组最后的位置，然后从后往前的 stride 个任务属于第一个线程，然后将 transferIndex 指向新的位置，再往前的 stride 个任务属于第二个线程，依此类推。当然，这里说的第二个线程不是真的一定指代了第二个线程，也可以是同一个线程，这个读者应该能理解吧。其实就是将一个大的迁移任务分为了一个个任务包。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">transfer</span><span class=\"params\">(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> tab.length, stride;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// stride 在单核下直接等于 n，多核模式下为 (n&gt;&gt;&gt;3)/NCPU，最小值是 16</span></span><br><span class=\"line\">    <span class=\"comment\">// stride 可以理解为”步长“，有 n 个位置是需要进行迁移的，</span></span><br><span class=\"line\">    <span class=\"comment\">//   将这 n 个任务分为多个任务包，每个任务包有 stride 个任务</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((stride = (NCPU &gt; <span class=\"number\">1</span>) ? (n &gt;&gt;&gt; <span class=\"number\">3</span>) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)</span><br><span class=\"line\">        stride = MIN_TRANSFER_STRIDE; <span class=\"comment\">// subdivide range</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果 nextTab 为 null，先进行一次初始化</span></span><br><span class=\"line\">    <span class=\"comment\">//    前面我们说了，外围会保证第一个发起迁移的线程调用此方法时，参数 nextTab 为 null</span></span><br><span class=\"line\">    <span class=\"comment\">//       之后参与迁移的线程调用此方法时，nextTab 不会为 null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextTab == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 容量翻倍</span></span><br><span class=\"line\">            Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;?,?&gt;[n &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\">            nextTab = nt;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable ex) &#123;      <span class=\"comment\">// try to cope with OOME</span></span><br><span class=\"line\">            sizeCtl = Integer.MAX_VALUE;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// nextTable 是 ConcurrentHashMap 中的属性</span></span><br><span class=\"line\">        nextTable = nextTab;</span><br><span class=\"line\">        <span class=\"comment\">// transferIndex 也是 ConcurrentHashMap 的属性，用于控制迁移的位置</span></span><br><span class=\"line\">        transferIndex = n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">nextn</span> <span class=\"operator\">=</span> nextTab.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ForwardingNode 翻译过来就是正在被迁移的 Node</span></span><br><span class=\"line\">    <span class=\"comment\">// 这个构造方法会生成一个Node，key、value 和 next 都为 null，关键是 hash 为 MOVED</span></span><br><span class=\"line\">    <span class=\"comment\">// 后面我们会看到，原数组中位置 i 处的节点完成迁移工作后，</span></span><br><span class=\"line\">    <span class=\"comment\">//    就会将位置 i 处设置为这个 ForwardingNode，用来告诉其他线程该位置已经处理过了</span></span><br><span class=\"line\">    <span class=\"comment\">//    所以它其实相当于是一个标志。</span></span><br><span class=\"line\">    ForwardingNode&lt;K,V&gt; fwd = <span class=\"keyword\">new</span> <span class=\"title class_\">ForwardingNode</span>&lt;K,V&gt;(nextTab);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// advance 指的是做完了一个位置的迁移工作，可以准备做下一个位置的了</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">advance</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">finishing</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>; <span class=\"comment\">// to ensure sweep before committing nextTab</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 下面这个 for 循环，最难理解的在前面，而要看懂它们，应该先看懂后面的，然后再倒回来看</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// i 是位置索引，bound 是边界，注意是从后往前</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, bound = <span class=\"number\">0</span>;;) &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt; f; <span class=\"type\">int</span> fh;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 下面这个 while 真的是不好理解</span></span><br><span class=\"line\">        <span class=\"comment\">// advance 为 true 表示可以进行下一个位置的迁移了</span></span><br><span class=\"line\">        <span class=\"comment\">//   简单理解结局：i 指向了 transferIndex，bound 指向了 transferIndex-stride</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (advance) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> nextIndex, nextBound;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (--i &gt;= bound || finishing)</span><br><span class=\"line\">                advance = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 将 transferIndex 值赋给 nextIndex</span></span><br><span class=\"line\">            <span class=\"comment\">// 这里 transferIndex 一旦小于等于 0，说明原数组的所有位置都有相应的线程去处理了</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((nextIndex = transferIndex) &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                i = -<span class=\"number\">1</span>;</span><br><span class=\"line\">                advance = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (U.compareAndSwapInt</span><br><span class=\"line\">                     (<span class=\"built_in\">this</span>, TRANSFERINDEX, nextIndex,</span><br><span class=\"line\">                      nextBound = (nextIndex &gt; stride ?</span><br><span class=\"line\">                                   nextIndex - stride : <span class=\"number\">0</span>))) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 看括号中的代码，nextBound 是这次迁移任务的边界，注意，是从后往前</span></span><br><span class=\"line\">                bound = nextBound;</span><br><span class=\"line\">                i = nextIndex - <span class=\"number\">1</span>;</span><br><span class=\"line\">                advance = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt;= n || i + n &gt;= nextn) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> sc;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (finishing) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 所有的迁移操作已经完成</span></span><br><span class=\"line\">                nextTable = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 将新的 nextTab 赋值给 table 属性，完成迁移</span></span><br><span class=\"line\">                table = nextTab;</span><br><span class=\"line\">                <span class=\"comment\">// 重新计算 sizeCtl：n 是原数组长度，所以 sizeCtl 得出的值将是新数组长度的 0.75 倍</span></span><br><span class=\"line\">                sizeCtl = (n &lt;&lt; <span class=\"number\">1</span>) - (n &gt;&gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 之前我们说过，sizeCtl 在迁移前会设置为 (rs &lt;&lt; RESIZE_STAMP_SHIFT) + 2</span></span><br><span class=\"line\">            <span class=\"comment\">// 然后，每有一个线程参与迁移就会将 sizeCtl 加 1，</span></span><br><span class=\"line\">            <span class=\"comment\">// 这里使用 CAS 操作对 sizeCtl 进行减 1，代表做完了属于自己的任务</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"built_in\">this</span>, SIZECTL, sc = sizeCtl, sc - <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 任务结束，方法退出</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((sc - <span class=\"number\">2</span>) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 到这里，说明 (sc - 2) == resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT，</span></span><br><span class=\"line\">                <span class=\"comment\">// 也就是说，所有的迁移任务都做完了，也就会进入到上面的 if(finishing)&#123;&#125; 分支了</span></span><br><span class=\"line\">                finishing = advance = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                i = n; <span class=\"comment\">// recheck before commit</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果位置 i 处是空的，没有任何节点，那么放入刚刚初始化的 ForwardingNode ”空节点“</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((f = tabAt(tab, i)) == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            advance = casTabAt(tab, i, <span class=\"literal\">null</span>, fwd);</span><br><span class=\"line\">        <span class=\"comment\">// 该位置处是一个 ForwardingNode，代表该位置已经迁移过了</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((fh = f.hash) == MOVED)</span><br><span class=\"line\">            advance = <span class=\"literal\">true</span>; <span class=\"comment\">// already processed</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 对数组该位置处的结点加锁，开始处理数组该位置处的迁移工作</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (f) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class=\"line\">                    Node&lt;K,V&gt; ln, hn;</span><br><span class=\"line\">                    <span class=\"comment\">// 头结点的 hash 大于 0，说明是链表的 Node 节点</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (fh &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 下面这一块和 Java7 中的 ConcurrentHashMap 迁移是差不多的，</span></span><br><span class=\"line\">                        <span class=\"comment\">// 需要将链表一分为二，</span></span><br><span class=\"line\">                        <span class=\"comment\">//   找到原链表中的 lastRun，然后 lastRun 及其之后的节点是一起进行迁移的</span></span><br><span class=\"line\">                        <span class=\"comment\">//   lastRun 之前的节点需要进行克隆，然后分到两个链表中</span></span><br><span class=\"line\">                        <span class=\"type\">int</span> <span class=\"variable\">runBit</span> <span class=\"operator\">=</span> fh &amp; n;</span><br><span class=\"line\">                        Node&lt;K,V&gt; lastRun = f;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Node&lt;K,V&gt; p = f.next; p != <span class=\"literal\">null</span>; p = p.next) &#123;</span><br><span class=\"line\">                            <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> p.hash &amp; n;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (b != runBit) &#123;</span><br><span class=\"line\">                                runBit = b;</span><br><span class=\"line\">                                lastRun = p;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (runBit == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            ln = lastRun;</span><br><span class=\"line\">                            hn = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            hn = lastRun;</span><br><span class=\"line\">                            ln = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123;</span><br><span class=\"line\">                            <span class=\"type\">int</span> <span class=\"variable\">ph</span> <span class=\"operator\">=</span> p.hash; <span class=\"type\">K</span> <span class=\"variable\">pk</span> <span class=\"operator\">=</span> p.key; <span class=\"type\">V</span> <span class=\"variable\">pv</span> <span class=\"operator\">=</span> p.val;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((ph &amp; n) == <span class=\"number\">0</span>)</span><br><span class=\"line\">                                ln = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;K,V&gt;(ph, pk, pv, ln);</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                hn = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;K,V&gt;(ph, pk, pv, hn);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"comment\">// 其中的一个链表放在新数组的位置 i</span></span><br><span class=\"line\">                        setTabAt(nextTab, i, ln);</span><br><span class=\"line\">                        <span class=\"comment\">// 另一个链表放在新数组的位置 i+n</span></span><br><span class=\"line\">                        setTabAt(nextTab, i + n, hn);</span><br><span class=\"line\">                        <span class=\"comment\">// 将原数组该位置处设置为 fwd，代表该位置已经处理完毕，</span></span><br><span class=\"line\">                        <span class=\"comment\">//    其他线程一旦看到该位置的 hash 值为 MOVED，就不会进行迁移了</span></span><br><span class=\"line\">                        setTabAt(tab, i, fwd);</span><br><span class=\"line\">                        <span class=\"comment\">// advance 设置为 true，代表该位置已经迁移完毕</span></span><br><span class=\"line\">                        advance = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (f <span class=\"keyword\">instanceof</span> TreeBin) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 红黑树的迁移</span></span><br><span class=\"line\">                        TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</span><br><span class=\"line\">                        TreeNode&lt;K,V&gt; lo = <span class=\"literal\">null</span>, loTail = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                        TreeNode&lt;K,V&gt; hi = <span class=\"literal\">null</span>, hiTail = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                        <span class=\"type\">int</span> <span class=\"variable\">lc</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, hc = <span class=\"number\">0</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Node&lt;K,V&gt; e = t.first; e != <span class=\"literal\">null</span>; e = e.next) &#123;</span><br><span class=\"line\">                            <span class=\"type\">int</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> e.hash;</span><br><span class=\"line\">                            TreeNode&lt;K,V&gt; p = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>&lt;K,V&gt;</span><br><span class=\"line\">                                (h, e.key, e.val, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((h &amp; n) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> ((p.prev = loTail) == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                                    lo = p;</span><br><span class=\"line\">                                <span class=\"keyword\">else</span></span><br><span class=\"line\">                                    loTail.next = p;</span><br><span class=\"line\">                                loTail = p;</span><br><span class=\"line\">                                ++lc;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> ((p.prev = hiTail) == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                                    hi = p;</span><br><span class=\"line\">                                <span class=\"keyword\">else</span></span><br><span class=\"line\">                                    hiTail.next = p;</span><br><span class=\"line\">                                hiTail = p;</span><br><span class=\"line\">                                ++hc;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"comment\">// 如果一分为二后，节点数少于 8，那么将红黑树转换回链表</span></span><br><span class=\"line\">                        ln = (lc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :</span><br><span class=\"line\">                            (hc != <span class=\"number\">0</span>) ? <span class=\"keyword\">new</span> <span class=\"title class_\">TreeBin</span>&lt;K,V&gt;(lo) : t;</span><br><span class=\"line\">                        hn = (hc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :</span><br><span class=\"line\">                            (lc != <span class=\"number\">0</span>) ? <span class=\"keyword\">new</span> <span class=\"title class_\">TreeBin</span>&lt;K,V&gt;(hi) : t;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// 将 ln 放置在新数组的位置 i</span></span><br><span class=\"line\">                        setTabAt(nextTab, i, ln);</span><br><span class=\"line\">                        <span class=\"comment\">// 将 hn 放置在新数组的位置 i+n</span></span><br><span class=\"line\">                        setTabAt(nextTab, i + n, hn);</span><br><span class=\"line\">                        <span class=\"comment\">// 将原数组该位置处设置为 fwd，代表该位置已经处理完毕，</span></span><br><span class=\"line\">                        <span class=\"comment\">//    其他线程一旦看到该位置的 hash 值为 MOVED，就不会进行迁移了</span></span><br><span class=\"line\">                        setTabAt(tab, i, fwd);</span><br><span class=\"line\">                        <span class=\"comment\">// advance 设置为 true，代表该位置已经迁移完毕</span></span><br><span class=\"line\">                        advance = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>说到底，transfer 这个方法并没有实现所有的迁移任务，每次调用这个方法只实现了 transferIndex 往前 stride 个位置的迁移工作，其他的需要由外围来控制。</p>\n<h2 id=\"ConcurrentHashMap-实现高并发的总结\"><a href=\"#ConcurrentHashMap-实现高并发的总结\" class=\"headerlink\" title=\"ConcurrentHashMap 实现高并发的总结\"></a>ConcurrentHashMap 实现高并发的总结</h2><p>ConcurrentHashMap 是一个并发散列映射表的实现，它允许完全并发的读取，并且支持给定数量的并发更新。相比于 HashTable 和用同步包装器包装的 HashMap（Collections.synchronizedMap(new HashMap())），ConcurrentHashMap 拥有更高的并发性。在 HashTable 和由同步包装器包装的 HashMap 中，使用一个全局的锁来同步不同线程间的并发访问。同一时间点，只能有一个线程持有锁，也就是说在同一时间点，只能有一个线程能访问容器。这虽然保证多线程间的安全并发访问，但同时也导致对容器的访问变成串行化的了。</p>\n<p>在使用锁来协调多线程间并发访问的模式下，减小对锁的竞争可以有效提高并发性。有两种方式可以减小对锁的竞争：</p>\n<ol>\n<li>减小请求 同一个锁的频率。</li>\n<li>减少持有锁的时间。</li>\n</ol>\n<p>ConcurrentHashMap 的高并发性主要来自于三个方面：</p>\n<ol>\n<li>用分离锁实现多个线程间的更深层次的共享访问。</li>\n<li>用 HashEntery 对象的不变性来降低执行读操作的线程在遍历链表期间对加锁的需求。</li>\n<li>通过对同一个 Volatile 变量的写 / 读访问，协调不同线程间读 / 写操作的内存可见性。</li>\n</ol>\n<p>使用分离锁，减小了请求 同一个锁的频率。</p>\n<p>通过 HashEntery 对象的不变性及对同一个 Volatile 变量的读 / 写来协调内存可见性，使得 读操作大多数时候不需要加锁就能成功获取到需要的值。由于散列映射表在实际应用中大多数操作都是成功的 读操作，所以 2 和 3 既可以减少请求同一个锁的频率，也可以有效减少持有锁的时间。</p>\n<p>通过减小请求同一个锁的频率和尽量减少持有锁的时间 ，使得 ConcurrentHashMap 的并发性相对于 HashTable 和用同步包装器包装的 HashMap有了质的提高。</p>\n","tags":["Java","Concurrency"]},{"title":"利用序列化实现对象的拷贝","url":"/2017/07/22/deep-copy/","content":"<blockquote>\n<p>如何利用序列化来完成对象的拷贝呢？在内存中通过字节流的拷贝是比较容易实现的。把母对象写入到一个字节流中, 再从字节流中将其读出来, 这样就可以创建一个新的对象了, 并且该新对象与母对象之间并不存在引用共享的问题, 真正实现对象的深拷贝。</p>\n</blockquote>\n<h2 id=\"样例\"><a href=\"#样例\" class=\"headerlink\" title=\"样例\"></a>样例</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CloneUtils</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">Serializable</span>&gt; T <span class=\"title function_\">clone</span><span class=\"params\">(T   obj)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">T</span> <span class=\"variable\">cloneObj</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//写入字节流</span></span><br><span class=\"line\">        <span class=\"type\">ByteArrayOutputStream</span> <span class=\"variable\">out</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayOutputStream</span>();</span><br><span class=\"line\">        <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">obs</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(out);</span><br><span class=\"line\">        obs.writeObject(obj);</span><br><span class=\"line\">        obs.close();</span><br><span class=\"line\">        <span class=\"comment\">//分配内存, 写入原始对象, 生成新对象</span></span><br><span class=\"line\">        <span class=\"type\">ByteArrayInputStream</span> <span class=\"variable\">ios</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span>  <span class=\"title class_\">ByteArrayInputStream</span>(out.toByteArray());</span><br><span class=\"line\">        <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">ois</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(ios);</span><br><span class=\"line\">        <span class=\"comment\">//返回生成的新对象</span></span><br><span class=\"line\">        cloneObj = (T) ois.readObject();</span><br><span class=\"line\">        ois.close();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cloneObj;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>使用该工具类的对象必须要实现 Serializable 接口, 否则是没有办法实现克隆的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">2631590509760908280L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ..................</span><br><span class=\"line\">    <span class=\"comment\">//去除clone()方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Email</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">1267293988171991494L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        ....................</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>所以使用该工具类的对象只要实现 Serializable 接口就可实现对象的克隆, 无须继承 Cloneable 接口实现 clone() 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//写封邮件</span></span><br><span class=\"line\">        <span class=\"type\">Email</span> <span class=\"variable\">email</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Email</span>(<span class=\"string\">&quot;请参加会议&quot;</span>,<span class=\"string\">&quot;请与今天12:30到二会议室参加会议...&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person1</span> <span class=\"operator\">=</span>  <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;张三&quot;</span>,email);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person2</span> <span class=\"operator\">=</span>  CloneUtils.clone(person1);</span><br><span class=\"line\">        person2.setName(<span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person3</span> <span class=\"operator\">=</span>  CloneUtils.clone(person1);</span><br><span class=\"line\">        person3.setName(<span class=\"string\">&quot;王五&quot;</span>);</span><br><span class=\"line\">        person1.getEmail().setContent(<span class=\"string\">&quot;请与今天12:00到二会议室参加会议...&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(person1.getName() + <span class=\"string\">&quot;的邮件内容是：&quot;</span> + person1.getEmail().getContent());</span><br><span class=\"line\">        System.out.println(person2.getName() + <span class=\"string\">&quot;的邮件内容是：&quot;</span> + person2.getEmail().getContent());</span><br><span class=\"line\">        System.out.println(person3.getName() + <span class=\"string\">&quot;的邮件内容是：&quot;</span> + person3.getEmail().getContent());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-------------------</span><br><span class=\"line\">Output:</span><br><span class=\"line\">张三的邮件内容是：请与今天<span class=\"number\">12</span>:<span class=\"number\">00</span>到二会议室参加会议...</span><br><span class=\"line\">李四的邮件内容是：请与今天<span class=\"number\">12</span>:<span class=\"number\">30</span>到二会议室参加会议...</span><br><span class=\"line\">王五的邮件内容是：请与今天<span class=\"number\">12</span>:<span class=\"number\">30</span>到二会议室参加会议...</span><br></pre></td></tr></table></figure>\n\n<p>在 JavaScript 中, 使用 <code>JSON.parse/JSON.stringify</code> 的方式实现:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> cloned = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(objectToClone));</span><br></pre></td></tr></table></figure>\n","tags":["JavaScript","Java"]},{"title":"Docker 多容器部署 LNMP 环境","url":"/2018/05/08/docker-lnmp/","content":"<h2 id=\"整个流程\"><a href=\"#整个流程\" class=\"headerlink\" title=\"整个流程\"></a>整个流程</h2><ol>\n<li>客户端 http 请求服务器 80 端口，该端口被映射到 Nginx 容器 80 端口，进入 Nginx 处理。</li>\n<li>Nginx 分析请求，如果是静态资源，直接服务器读取内容；如果是 PHP 脚本，通过 PHP 容器调用服务器获取脚本，然后 FastCGI 处理。</li>\n<li>FastCGI 解析 PHP 脚本，必要时访问 MySQL 容器读写数据。</li>\n</ol>\n<span id=\"more\"></span>\n\n<h3 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull mysql:8.0.16</span><br><span class=\"line\">docker run --restart=always -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=<span class=\"variable\">$&#123;ADMIN_PASSWORD&#125;</span>  -d mysql:8.0.16 --default-authentication-plugin=mysql_native_password</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull redis:5.0.4</span><br><span class=\"line\">docker run --restart=always -d --name redis -p 6379:6379 redis:5.0.4</span><br></pre></td></tr></table></figure>\n\n<p>或者镜像备份恢复</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker save redis:5.0.4 &gt; redis.tar <span class=\"comment\"># 备份镜像</span></span><br><span class=\"line\">docker load &lt; redis.tar <span class=\"comment\"># 还原镜像</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p  ~/nginx/html</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p  ~/php/</span><br><span class=\"line\">docker pull php:5.6.36-fpm</span><br><span class=\"line\">docker run --restart=always --name php-fpm --<span class=\"built_in\">link</span> mysql:mysql -d -p 9000:9000 -v ~/nginx/html:/usr/share/nginx/html -v ~/php/www.conf:/usr/local/etc/php-fpm.d/www.conf -v ~/php/php.ini:/usr/local/etc/php/php.ini php:5.6.36-fpm</span><br></pre></td></tr></table></figure>\n\n<p>目录结构:</p>\n<p>~/php/<br>-&gt; <a href=\"/txt/php/www.conf\">www.conf</a><br>-&gt; <a href=\"/txt/php/php.ini\">php.ini</a></p>\n<h3 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p  ~/nginx/html</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p  ~/nginx/log</span><br><span class=\"line\"><span class=\"built_in\">touch</span> ~/nginx/log/access.log ~/nginx/log/error.log</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p  ~/nginx/conf.d</span><br><span class=\"line\">docker pull nginx:1.13.12</span><br><span class=\"line\">docker run --restart=always --name nginx --<span class=\"built_in\">link</span> php-fpm:php-fpm -d -p 80:80 -v ~/nginx/html:/usr/share/nginx/html -v ~/nginx/nginx.conf:/etc/nginx/nginx.conf:ro -v ~/nginx/conf.d:/etc/nginx/conf.d -v ~/nginx/log:/var/log/nginx/ nginx:1.13.12</span><br></pre></td></tr></table></figure>\n\n<p>目录结构:</p>\n<p>~/nginx/<br>-&gt;conf.d/<br>-&gt;-&gt;<a href=\"/txt/nginx/conf.d/default.conf\">default.conf</a><br>-&gt;html/<br>-&gt;-&gt;<a href=\"/txt/nginx/html/50x.txt\">50x.html</a><br>-&gt;-&gt;<a href=\"/txt/nginx/html/index.txt\">index.html</a><br>-&gt;-&gt;<a href=\"/txt/nginx/html/phpinfo.txt\">phpinfo.php</a><br>-&gt;<a href=\"/txt/nginx/nginx.conf\">nginx.conf</a></p>\n","tags":["docker"]},{"title":"垃圾收集器与内存分配策略","url":"/2017/08/28/gc/","content":"<h2 id=\"垃圾收集器\"><a href=\"#垃圾收集器\" class=\"headerlink\" title=\"垃圾收集器\"></a>垃圾收集器</h2><h3 id=\"可达性分析算法\"><a href=\"#可达性分析算法\" class=\"headerlink\" title=\"可达性分析算法\"></a>可达性分析算法</h3><p>通过一系列的称谓 <code>GC Roots</code> 的对象作为起始点, 从这些节点开始向下搜索, 搜索所有走过的路径为引用链, 当一个对象到 GC Roots 没有任何引用链项链时, 则证明此对象时不可用的。</p>\n<p>Java 语言中, 可作为 GC Roots 的对象包括下面几种：</p>\n<ol>\n<li>虚拟机栈 (栈帧中的本地变量表) 中引用的对象</li>\n<li>方法区中类静态属性引用的对象</li>\n<li>方法区中常量引用的对象</li>\n<li>本地方法栈中 JNI(即一般说的 Native 方法) 引用的对象</li>\n</ol>\n<h3 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h3><p>从 JDK1.2 之后, Java 对引用的概念进行了扩充, 将引用分为强引用, 软引用, 弱引用, 虚引用, 这四种引用的强度一次逐渐减弱。</p>\n<ol>\n<li>强引用就是指在程序代码之中普遍存在的, 类似 “Object obj = new Object()” 这类的引用, 只要强引用还存在, 垃圾回收器永远不会回收掉被引用的对象。</li>\n<li>软引用是用来描述一些还有用但并非需要的对象, 对于软引用关联着的对象, 在系统将要发生内存异常之前, 将会把这些对象列进回收范围之中进行第二次回收, 如果这次回收还没有足够的内存, 才会抛出内存异常。</li>\n<li>弱引用也是用来描述非必需对象的, 但是它的强度比软引用更弱一些, 被弱引用关联的对象只能生存岛下一次垃圾收集发生之前, 当垃圾收集器工作时, 无论当前内存释放足够, 都会回收掉只被弱引用关联的对象。</li>\n<li>虚引用也称为幽灵引用或者幻影引用, 它是最弱的一种引用关系, 一个对象是否有虚引用的存在, 完全不会对其生存时间构成影响, 也无法通过虚引用来取得一个对象实例, 对一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。</li>\n</ol>\n<span id=\"more\"></span>\n\n<h3 id=\"垃圾收集算法\"><a href=\"#垃圾收集算法\" class=\"headerlink\" title=\"垃圾收集算法\"></a>垃圾收集算法</h3><h4 id=\"标记—清除算法\"><a href=\"#标记—清除算法\" class=\"headerlink\" title=\"标记—清除算法\"></a>标记—清除算法</h4><p>标记—清除算法是最基础的收集算法, 它分为 “标记” 和 “清除” 两个阶段：首先标记出所需回收的对象, 在标记完成后统一回收掉所有被标记的对象, 它的标记过程其实就是前面的根搜索算法中判定垃圾对象的标记过程。标记—清除算法的执行情况如下图所示：</p>\n<p><strong>回收前状态：</strong></p>\n<p><img data-src=\"/images/gc/return.png\" alt=\"回收前状态\"></p>\n<p><strong>回收后状态：</strong></p>\n<p><img data-src=\"/images/gc/return1.png\" alt=\"回收后状态\"></p>\n<p>之后的算法都是基于这种思路改进的, 他的主要不足有两个：</p>\n<ol>\n<li>一个是效率问题, 标记和清楚的两个过程的效率都不高。</li>\n<li>另一个是空间问题, 标记清除之后会产生大量内存碎片, 导致之后程序分配大对象内存时, 无法找到足够的内存而不得不提前触发另一次垃圾收集动作。</li>\n</ol>\n<h4 id=\"复制算法\"><a href=\"#复制算法\" class=\"headerlink\" title=\"复制算法\"></a>复制算法</h4><p>将可用内存按容量大小划分为大小相等的两块, 每次只使用其中的一块。当一块内存使用完了, 就将还存活着的对象复制到另一块上面, 然后再把已使用过的内存空间一次清理掉。这样使得每次都是对整个半区进行内存回收, 内存分配时也就不用考虑内存碎片等复杂情况。</p>\n<p><img data-src=\"/images/gc/copy.png\" alt=\"复制算法\"></p>\n<p>目的：为了解决效率问题。<br>缺点：将内存缩小为了原来的一半。</p>\n<p>现代的商业虚拟机都采用这种收集算法来回收新生代, IBM 公司的专门研究表明, 新生代中对象 98% 对象是 “朝生夕死” 的, 所以不需要按照 1：1 的比例来划分内存空间, 而是将内存分为较大的 Eden 空间和两块较小的 Survivor 空间, 每次使用 Eden 和其中一块 Survivor。HotSpot 虚拟机中默认 Eden 和 Survivor 的大小比例是 8：1。也就是说只有10%的内存是“浪费的”。</p>\n<h4 id=\"标记-整理算法\"><a href=\"#标记-整理算法\" class=\"headerlink\" title=\"标记 - 整理算法\"></a>标记 - 整理算法</h4><p>复制收集算法在对象存活率较高时, 就要进行较多的复制操作, 效率就会变低。<br>根据老年代的特点, 提出了” 标记 - 整理 “算法。<br>标记过程仍然与” 标记 - 清除 “算法一样, 但后续步骤不是直接对可回收对象进行清理, 而是让所有存活的对象都向一端移动, 然后直接清理掉边界以外的内存。</p>\n<p><img data-src=\"/images/gc/mark-copy.png\" alt=\"标记 - 整理算法\"></p>\n<h4 id=\"分代收集算法\"><a href=\"#分代收集算法\" class=\"headerlink\" title=\"分代收集算法\"></a>分代收集算法</h4><p>一般是把 Java 堆分为新生代和老年代, 这样就可以根据各个年代的特点采用最适当的收集算法。</p>\n<p>在新生代中, 每次垃圾收集时都发现有大批对象死去, 只有少量存活, 那就选用复制算法。</p>\n<p>在老年代中, 因为对象存活率高、没有额外空间对它进行分配担保, 就必须采用 “标记 - 清除” 或 “标记 - 整理” 算法来进行回收。</p>\n<h3 id=\"垃圾回收机制的一些知识\"><a href=\"#垃圾回收机制的一些知识\" class=\"headerlink\" title=\"垃圾回收机制的一些知识\"></a>垃圾回收机制的一些知识</h3><h4 id=\"JVM-中的年代\"><a href=\"#JVM-中的年代\" class=\"headerlink\" title=\"JVM 中的年代\"></a>JVM 中的年代</h4><p>JVM 中分为年轻代（Young generation）和老年代 (Tenured generation)。</p>\n<p>一般情况下, 新创建的对象都会被分配到 Eden 区 (一些大对象特殊处理), 这些对象经过第一次 Minor GC 后, 如果仍然存活, 将会被移到 Survivor 区。对象在 Survivor 区中每熬过一次 Minor GC, 年龄就会增加 1 岁, 当它的年龄增加到一定程度时, 就会被移动到年老代中。</p>\n<p>使用复制算法GC之后, , Eden 区和 From 区已经被清空。这个时候, “From” 和 “To” 会交换他们的角色, 也就是新的 “To” 就是上次 GC 前的 “From”, 新的 “From” 就是上次 GC 前的 “To”。不管怎样, 都会保证名为 To 的 Survivor 区域是空的。Minor GC 会一直重复这样的过程, 直到 “To” 区被填满, “To” 区被填满之后, 会将所有对象移动到年老代中。</p>\n<h4 id=\"Minor-GC-和-Full-GC-的区别\"><a href=\"#Minor-GC-和-Full-GC-的区别\" class=\"headerlink\" title=\"Minor GC 和 Full GC 的区别\"></a>Minor GC 和 Full GC 的区别</h4><p>Minor GC: 指发生在新生代的垃圾收集动作, 该动作非常频繁。</p>\n<p>Full GC/Major GC: 指发生在老年代的垃圾收集动作, 出现了 Major GC, 经常会伴随至少一次的 Minor GC。Major GC 的速度一般会比 Minor GC 慢 10 倍以上。</p>\n<h4 id=\"空间分配担保\"><a href=\"#空间分配担保\" class=\"headerlink\" title=\"空间分配担保\"></a>空间分配担保</h4><p>在发生 Minor GC 之前, 虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象的总空间, 如果这个条件成立, 那么 Minor GC 可以 确保是安全的。如果不成立, 则虚拟机会查看 HandlePromotionFailure 设置值是否允许担保失败。如果允许, 那会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小, 如果大于, 则将尝试进行一次 Minor GC, 尽管这个 Minor GC 是有风险的。如果小于, 或者 HandlePromotionFailure 设置不允许冒险, 那这时也要改为进行一次 Full GC。</p>\n<h3 id=\"垃圾收集器-1\"><a href=\"#垃圾收集器-1\" class=\"headerlink\" title=\"垃圾收集器\"></a>垃圾收集器</h3><p><strong>7种收集器：</strong></p>\n<p><img data-src=\"/images/gc/collector.png\" alt=\"收集器\"></p>\n<h4 id=\"Serial-收集器\"><a href=\"#Serial-收集器\" class=\"headerlink\" title=\"Serial 收集器\"></a>Serial 收集器</h4><p>是最基本、发展历史最悠久的收集器。这是一个单线程收集器。但它的 “单线程” 的意义并不仅仅说明它只会使用一个 CPU 或一条收集线程去完成垃圾收集工作, 更重要的是它在进行垃圾收集时, 必须暂停其他所有的工作线程, 直到它收集结束。</p>\n<p><img data-src=\"/images/gc/serial.png\" alt=\"Serial 收集器\"></p>\n<p>是虚拟机运行在 Client 模式下的默认新生代收集器。</p>\n<p>优势：简单而高效（与其他收集器的单线程比）, 对于限定单个 CPU 的环境来说, Serial 收集器由于没有线程交互的开销, 专心做垃圾收集自然可以获得最高的单线程效率。</p>\n<h4 id=\"ParNew-收集器\"><a href=\"#ParNew-收集器\" class=\"headerlink\" title=\"ParNew 收集器\"></a>ParNew 收集器</h4><p>ParNew 收集器其实就是 Serial 收集器的多线程版本。</p>\n<p>是许多运行在 Server 模式下的虚拟机中首选的新生代收集器, 其中一个与性能无关但很重要的原因是, 除了 Serial 收集器外, 目前只有它能与 CMS 收集器配合工作。</p>\n<p>ParNew 收集器默认开启的收集线程数与 CPU 的数量相同。</p>\n<h4 id=\"Parallel-Scavenge-收集器\"><a href=\"#Parallel-Scavenge-收集器\" class=\"headerlink\" title=\"Parallel Scavenge 收集器\"></a>Parallel Scavenge 收集器</h4><p>Parallel Scavenge 收集器是一个新生代收集器, 使用复制算法, 又是并行的多线程收集器。<br>最大的特点是：Parallel Scavenge 收集器的目标是达到一个可控制的吞吐量。</p>\n<p>所谓吞吐量就是 CPU 用于运行用户代码的时间与 CPU 总消耗时间的比值, 即吞吐量 = 运行用户代码时间 /（运行用户代码时间 + 垃圾收集时间）。</p>\n<p>高吞吐量则可以高效率地利用 CPU 时间, 尽快完成程序的运算任务, 主要适合在后台运算而不需要太多交互的任务。</p>\n<h4 id=\"Serial-Old-收集器\"><a href=\"#Serial-Old-收集器\" class=\"headerlink\" title=\"Serial Old 收集器\"></a>Serial Old 收集器</h4><p>Serial Old 是 Serial 收集器的老年代版本, 同样是一个单线程收集器, 使用 “标记 - 整理” 算法。这个收集器的主要意义也是在于给 Client 模式下虚拟机使用。</p>\n<p>如果在 Server 模式下, 它主要还有两大用途：</p>\n<ol>\n<li><p>与 Parallel Scavenge 收集器搭配使用</p>\n</li>\n<li><p>作为 CMS 收集器的后备预案, 在并发收集发生 Conurrent Mode Failure 使用。</p>\n</li>\n</ol>\n<h4 id=\"Parallel-Old-收集器\"><a href=\"#Parallel-Old-收集器\" class=\"headerlink\" title=\"Parallel Old 收集器\"></a>Parallel Old 收集器</h4><p>Parallel Old 是 Parallel Scavenge 收集器的老年代版本, 使用多线程和 “标记 - 整理” 算法。</p>\n<p>在注重吞吐量以及 CPU 资源敏感的场合, 都可以优先考虑 Parallel Scavenge+Parallel Old 收集器</p>\n<h4 id=\"CMS（Concurrent-Mark-Sweep）收集器\"><a href=\"#CMS（Concurrent-Mark-Sweep）收集器\" class=\"headerlink\" title=\"CMS（Concurrent Mark Sweep）收集器\"></a>CMS（Concurrent Mark Sweep）收集器</h4><p>是 HotSpot 虚拟机中第一款真正意义上的并发收集器, 它第一次实现了让垃圾收集线程与用户线程同时工作。</p>\n<p>关注点：尽可能地缩短垃圾收集时用户线程的停顿时间。</p>\n<p>CMS 收集器是基于 “标记 - 清除” 算法实现的, 整个过程分为 4 个步骤：</p>\n<ol>\n<li>初始标记</li>\n<li>并发标记</li>\n<li>重新标记</li>\n<li>并发清除</li>\n</ol>\n<p>其中, 初始标记, 重新标记这两个步骤仍然需要 “Stop The World”。初始标记仅仅只标记一下 GC Roots 能直接关联到的对象, 速度很快。并发标记阶段就是 进行 GC Roots Tracing 的过程。</p>\n<p>重新标记阶段则是为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记几率, 这个阶段的停顿时间一般会比初始标记阶段稍长, 但远比并发标记时间短。</p>\n<p>整个过程耗时最长的阶段是并发标记, 并发清除过程, 但这两个过程可以和用户线程一起工作。</p>\n<p><img data-src=\"/images/gc/CMS.jpeg\" alt=\"CMS流程\"></p>\n<p>缺点：</p>\n<ol>\n<li><p>CMS 收集器对 CPU 资源非常敏感。在并发阶段, 它虽然不会导致用户线程停顿, 但是会因为占用了一部分线程（或者说 CPU 资源）而导致应用程序变慢, 总吞吐量会降低。</p>\n</li>\n<li><p>CMS 收集器无法处理浮动垃圾, 可能出现 “Conurrent Mode Failure” 失败而导致另一次 Full GC 的产生。由于 CMS 并发清理阶段用户线程还在运行着, 伴随程序运行自然就还会产生新的垃圾, 这一部分垃圾出现在标记过程之后, CMS 无法在档次收集中处理掉它们, 只好留待下一次 GC 时再清理掉。这部分垃圾就称为 “浮动垃圾”。因此 CMS 收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集, 需要预留一部分空间提供并发收集时程序运作使用。在 JDK1.5 的默认设置下, CMS 收集器当老年代使用了 68% 的空间后就会被激活。如果预留空间无法满足程序需要, 就会出现一次 “Concurrent Mode Failure” 失败, 这时虚拟机将启动后备预案 Serial Old。</p>\n</li>\n<li><p>CMS 是一款基于 “标记 - 清除” 算法实现的收集器, 所以会有大量空间碎片问题。</p>\n</li>\n</ol>\n<h4 id=\"G1-收集器\"><a href=\"#G1-收集器\" class=\"headerlink\" title=\"G1 收集器\"></a>G1 收集器</h4><p>是当今收集器技术发展的最前沿成果之一。是一款面向服务端应用的垃圾收集器。<br>特点：</p>\n<ol>\n<li><p>并行与并发<br>能充分利用多 CPU, 多核环境下的硬件优势, 缩短 Stop-The-World 停顿的时间, 同时可以通过并发的方式让 Java 程序继续执行。</p>\n</li>\n<li><p>分代收集<br>可以不需要其他收集器的配合管理整个堆, 但是仍采用不同的方式去处理分代的对象。</p>\n</li>\n<li><p>空间整合<br>G1 从整体上来看, 采用基于 “标记 - 整理” 算法实现收集器<br>G1 从局部上来看, 采用基于 “复制” 算法实现。</p>\n</li>\n<li><p>可预测停顿<br>使用 G1 收集器时, Java 堆内存布局与其他收集器有很大差别, 它将整个 Java 堆划分成为多个大小相等的独立区域。</p>\n</li>\n</ol>\n<p>G1 跟踪各个 Region 里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值）, 在后台维护一个优先列表, 每次根据允许的收集时间, 优先回收价值最大的 Region。</p>\n<h2 id=\"内存分配策略\"><a href=\"#内存分配策略\" class=\"headerlink\" title=\"内存分配策略\"></a>内存分配策略</h2><h3 id=\"对象优先在-Eden-上分配\"><a href=\"#对象优先在-Eden-上分配\" class=\"headerlink\" title=\"对象优先在 Eden 上分配\"></a>对象优先在 Eden 上分配</h3><p>大多数情况下, 对象优先在新生代 Eden 区域中分配。当 Eden 内存区域没有足够的空间进行分配时, 虚拟机将触发一次 Minor GC(新生代 GC)。Minor GC 期间虚拟机将 Eden 区域的对象移动到其中一块 Survivor 区域。虚拟机提供了 - XX：+PrintGCDetails 这个收集器日志参数, 告诉虚拟机在发生垃圾收集行为时打印内存回收日志, 并且在进程退出的时候输出当前的内存各区域分配情况。</p>\n<h3 id=\"大对象直接进入老年代\"><a href=\"#大对象直接进入老年代\" class=\"headerlink\" title=\"大对象直接进入老年代\"></a>大对象直接进入老年代</h3><p>所谓大对象是指需要大量连续空间的对象。虚拟机提供了一个 XX:PretenureSizeThreshold 参数, 大于这个值的对象直接在老年代中分配。</p>\n<h3 id=\"长期存活的对象将进入老年代\"><a href=\"#长期存活的对象将进入老年代\" class=\"headerlink\" title=\"长期存活的对象将进入老年代\"></a>长期存活的对象将进入老年代</h3><p>虚拟机采用分代收集的思想管理内存, 那内存回收时就必须能识别那些对象该放到新生代, 那些该到老年代中。为了做到这点, 虚拟机为每个对象定义了一个对象年龄 Age, 每经过一次新生代 GC 后任然存活, 将对象的年龄 Age 增加 1 岁, 当年龄到一定程度（默认为 15）时, 将会被晋升到老年代中, 对象晋升老年代的年龄限定值, 可通过 - XX:MaxTenuringThreshold 来设置。为了能更好地适应不同程序的内存状况, 虚拟机并不是永远地要求对象的年龄必须达到了 MaxTenuringThreshold 才能晋升老年代, 如果在 Survivor 空间中相同年龄所有对象大小的总和大于 Survivor 空间的一半, 年龄大于或等于该年龄的对象就可以直接进入老年代, 无须等到 MaxTenuringThreshold 中要求的年龄。</p>\n<h3 id=\"空间分配担保-1\"><a href=\"#空间分配担保-1\" class=\"headerlink\" title=\"空间分配担保\"></a>空间分配担保</h3><p>在发生 Minor GC 之前, 虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间, 如果这个条件成立, 那么 Minor GC 可以确保是安全的。如果不成立, 则虚拟机会查看 HandlePromotionFailure 设置值是否允许担保失败。如果允许, 那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小, 如果大于, 将尝试着进行一次 Minor GC, 尽管这次 Minor GC 是有风险的；如果小于或者 HandlePromotionFailure 设置不允许冒险, 那这时也要改为进行一次 Full GC。</p>\n<p>“冒险” 是冒了什么风险, 新生代使用复制收集算法, 但为了内存利用率, 只使用其中一个 Survivor 空间来作为轮换备份, 因此当出现大量对象在 Minor GC 后仍然存活的情况（最极端的情况就是内存回收后新生代中所有对象都存活）, 就需要老年代进行分配担保, 把 Survivor 无法容纳的对象直接进入老年代。与生活中的贷款担保类似, 老年代要进行这样的担保, 前提是老年代本身还有容纳这些对象的剩余空间, 一共有多少对象会活下来在实际完成内存回收之前是无法明确知道的, 所以只好取之前每一次回收晋升到老年代对象容量的平均大小值作为经验值, 与老年代的剩余空间进行比较, 决定是否进行 Full GC 来让老年代腾出更多空间。取平均值进行比较其实仍然是一种动态概率的手段, 也就是说, 如果某次 Minor GC 存活后的对象突增, 远远高于平均值的话, 依然会导致担保失败（Handle Promotion Failure）。如果出现了 HandlePromotionFailure 失败, 那就只好在失败后重新发起一次 Full GC。虽然担保失败时绕的圈子是最大的, 但大部分情况下都还是会将 HandlePromotionFailure 开关打开, 避免 Full GC 过于频繁, 在 JDK 6 Update 24 之后, HandlePromotionFailure 参数不会再影响到虚拟机的空间分配担保策略, 观察 OpenJDK 中的源码变化, 虽然源码中还定义了 HandlePromotionFailure 参数, 但是在代码中已经不会再使用它。JDK 6 Update 24 之后的规则变为只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小就会进行 Minor GC, 否则将进行 Full GC。</p>\n","tags":["Java虚拟机"]},{"title":"Git手动设置提交时间","url":"/2025/01/16/git-commit-date/","content":"<blockquote>\n<p>Git 提交文件的命令是使用 <code>git commit</code>，但是默认情况下，提交的时间是当前的系统时间。如果想要指定提交的时间，可以使用 <code>-–date</code> 参数来实现。下面是详细介绍。</p>\n</blockquote>\n<h2 id=\"一、使用-–-date-参数\"><a href=\"#一、使用-–-date-参数\" class=\"headerlink\" title=\"一、使用 –-date 参数\"></a>一、使用 <code>–-date</code> 参数</h2><ol>\n<li>打开终端或者命令行窗口，切换到你的 Git 仓库所在的目录。</li>\n<li>运行以下命令，将文件添加到暂存区：<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git add &lt;文件名&gt;</span><br></pre></td></tr></table></figure></li>\n<li>运行以下命令，提交文件并指定时间：<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git commit –-<span class=\"built_in\">date</span>=<span class=\"string\">&quot;&lt;时间&gt;&quot;</span> -m <span class=\"string\">&quot;提交说明&quot;</span></span><br></pre></td></tr></table></figure>\n其中，<code>&lt;时间&gt;</code> 是一个符合 ISO 8601 格式的日期和时间字符串，例如 <code>&quot;2025-01-16T11:13:32+0800&quot;</code>。</li>\n<li>提交成功后，可以使用 <code>git log</code> 查看提交记录，确认提交时间已经被更改。</li>\n</ol>\n<p>示例：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git commit -–<span class=\"built_in\">date</span>=<span class=\"string\">&quot;2025-01-16T11:13:32+0800&quot;</span> -m <span class=\"string\">&quot;提交文件&quot;</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"二、使用-amend\"><a href=\"#二、使用-amend\" class=\"headerlink\" title=\"二、使用--amend\"></a>二、使用<code>--amend</code></h2><ol>\n<li>打开终端或者命令行窗口，切换到你的 Git 仓库所在的目录。</li>\n<li>运行以下命令，将文件添加到暂存区：<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git add &lt;文件名&gt;</span><br></pre></td></tr></table></figure></li>\n<li>运行以下命令，重置最后一次提交的时间为指定时间(不指定时间则为当前时间)：<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git commit -–amend -–<span class=\"built_in\">date</span>=<span class=\"string\">&quot;&lt;时间&gt;&quot;</span></span><br></pre></td></tr></table></figure>\n其中，<code>&lt;时间&gt;</code> 是一个符合 ISO 8601 格式的日期和时间字符串，例如 <code>&quot;2025-01-16T11:13:32+0800&quot;</code>。</li>\n<li>提交成功后，可以使用 <code>git log</code> 查看提交记录，确认提交时间已经被更改。</li>\n</ol>\n<p>示例：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git commit –-amend -–<span class=\"built_in\">date</span>=<span class=\"string\">&quot;2025-01-16T11:13:32+0800&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>总结起来，通过使用 <code>git commit</code> 的 <code>-–date</code> 参数或 <code>git commit –amend</code>，我们可以指定提交的时间。但需要注意，这么做可能会改变 Git 仓库的历史记录，所以建议在合适的场景下使用。</p>\n","tags":["git"]},{"title":"Git设置","url":"/2023/03/22/git/","content":"<h2 id=\"Git-配置\"><a href=\"#Git-配置\" class=\"headerlink\" title=\"Git 配置\"></a>Git 配置</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置git</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">&quot;Mone Zhao&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;monezhao@163.com&quot;</span></span><br><span class=\"line\">git config --global color.ui <span class=\"literal\">true</span></span><br><span class=\"line\">git config --global http.sslVerify <span class=\"literal\">false</span></span><br><span class=\"line\">git config --global credential.helper store</span><br><span class=\"line\">git config --global --add safe.directory <span class=\"string\">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Git-alias\"><a href=\"#Git-alias\" class=\"headerlink\" title=\"Git alias\"></a>Git alias</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global alias.cp cherry-pick</span><br><span class=\"line\">git config --global alias.st status</span><br><span class=\"line\">git config --global alias.cl <span class=\"built_in\">clone</span></span><br><span class=\"line\">git config --global alias.ci commit</span><br><span class=\"line\">git config --global alias.co checkout</span><br><span class=\"line\">git config --global alias.br branch</span><br><span class=\"line\">git config --global alias.df diff</span><br><span class=\"line\">git config --global alias.pl = pull</span><br><span class=\"line\">git config --global alias.ps = push</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Shell设置Git快捷键\"><a href=\"#Shell设置Git快捷键\" class=\"headerlink\" title=\"Shell设置Git快捷键\"></a>Shell设置Git快捷键</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">gaa=<span class=\"string\">&#x27;git add --all&#x27;</span></span><br><span class=\"line\">gcam=<span class=\"string\">&#x27;git commit -a -m&#x27;</span></span><br><span class=\"line\">gcm=<span class=\"string\">&#x27;git checkout master&#x27;</span></span><br><span class=\"line\">gd=<span class=\"string\">&#x27;git diff&#x27;</span></span><br><span class=\"line\">gl=<span class=\"string\">&#x27;git pull&#x27;</span></span><br><span class=\"line\">gmom=<span class=\"string\">&#x27;git merge origin/master&#x27;</span></span><br><span class=\"line\">gp=<span class=\"string\">&#x27;git push&#x27;</span></span><br><span class=\"line\">gst=<span class=\"string\">&#x27;git status&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"gitconfig\"><a href=\"#gitconfig\" class=\"headerlink\" title=\".gitconfig\"></a>.gitconfig</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[user]</span><br><span class=\"line\">\tname = Mone Zhao</span><br><span class=\"line\">\temail = monezhao@163.com</span><br><span class=\"line\">[color]</span><br><span class=\"line\">\tui = true</span><br><span class=\"line\">[http]</span><br><span class=\"line\">\tsslverify = false</span><br><span class=\"line\">[credential]</span><br><span class=\"line\">\thelper = store</span><br><span class=\"line\">[safe]</span><br><span class=\"line\">\tdirectory = *</span><br><span class=\"line\">[alias]</span><br><span class=\"line\">\tcp = cherry-pick</span><br><span class=\"line\">\tst = status</span><br><span class=\"line\">\tcl = clone</span><br><span class=\"line\">\tci = commit</span><br><span class=\"line\">\tco = checkout</span><br><span class=\"line\">\tbr = branch</span><br><span class=\"line\">\tdf = diff</span><br><span class=\"line\">\tpl = pull</span><br><span class=\"line\">\tps = push</span><br><span class=\"line\">[credential &quot;http://192.168.5.106:3000&quot;]</span><br><span class=\"line\">\tprovider = generic</span><br><span class=\"line\">[credential &quot;https://gitee.com&quot;]</span><br><span class=\"line\">\tprovider = generic</span><br><span class=\"line\">[credential &quot;https://github.com&quot;]</span><br><span class=\"line\">\tprovider = generic</span><br></pre></td></tr></table></figure>\n","tags":["git"]},{"title":"谷歌Chrome首页设置","url":"/2017/07/24/google-home-page/","content":"<p>使用香港Google</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://www.google.com.hk/ncr</span><br></pre></td></tr></table></figure>\n<p>使用自动识别语言Google</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://www.google.com/ncr</span><br></pre></td></tr></table></figure>\n","tags":["chrome"]},{"title":"Hexo 常用命令","url":"/2017/07/22/hexo-command/","content":"<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo n <span class=\"string\">&quot;title&quot;</span>  =&gt; hexo new <span class=\"string\">&quot;title&quot;</span></span><br><span class=\"line\">hexo clean <span class=\"comment\"># 清除生成的public目录</span></span><br><span class=\"line\">hexo g  =&gt; hexo generate  <span class=\"comment\">#生成</span></span><br><span class=\"line\">hexo s  =&gt; hexo server  <span class=\"comment\">#启动服务预览</span></span><br><span class=\"line\">hexo d  =&gt; hexo deploy  <span class=\"comment\">#部署, 部署之前需要先 generate</span></span><br></pre></td></tr></table></figure>\n","tags":["hexo"]},{"title":"重新认识 Java 8 HashMap","url":"/2018/03/12/hashmap/","content":"<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><p>HashMap是Java程序员使用频率最高的用于映射(键值对)处理的数据类型。随着JDK（Java Developmet Kit）版本的更新，JDK1.8对HashMap底层的实现进行了优化，例如引入红黑树的数据结构和扩容的优化等。本文结合JDK1.7和JDK1.8的区别，深入探讨HashMap的结构实现和功能原理。</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Java为数据结构中的映射定义了一个接口java.util.Map，此接口主要有四个常用的实现类，分别是HashMap、Hashtable、LinkedHashMap和TreeMap，类继承关系如下图所示：</p>\n<p><img data-src=\"/images/hashmap/java.util.map%E7%B1%BB%E5%9B%BE.png\" alt=\"类继承关系\"></p>\n<p>下面针对各个实现类的特点做一些说明：</p>\n<ol>\n<li><p>HashMap：它根据键的hashCode值存储数据，大多数情况下可以直接定位到它的值，因而具有很快的访问速度，但遍历顺序却是不确定的。 HashMap最多只允许一条记录的键为null，允许多条记录的值为null。HashMap非线程安全，即任一时刻可以有多个线程同时写HashMap，可能会导致数据的不一致。如果需要满足线程安全，可以用 Collections的synchronizedMap方法使HashMap具有线程安全的能力，或者使用ConcurrentHashMap。</p>\n</li>\n<li><p>Hashtable：Hashtable是遗留类，很多映射的常用功能与HashMap类似，不同的是它承自Dictionary类，并且是线程安全的，任一时间只有一个线程能写Hashtable，并发性不如ConcurrentHashMap，因为ConcurrentHashMap引入了分段锁。Hashtable不建议在新代码中使用，不需要线程安全的场合可以用HashMap替换，需要线程安全的场合可以用ConcurrentHashMap替换。</p>\n</li>\n<li><p>LinkedHashMap：LinkedHashMap是HashMap和双向链表合二为一的HashMap一个子类，保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的，也可以在构造时带参数，按照访问次序排序。</p>\n</li>\n<li><p>TreeMap：TreeMap实现SortedMap接口，能够把它保存的记录根据键排序，默认是按键值的升序排序，也可以指定排序的比较器，当用Iterator遍历TreeMap时，得到的记录是排过序的。如果使用排序的映射，建议使用TreeMap。在使用TreeMap时，key必须实现Comparable接口或者在构造TreeMap传入自定义的Comparator，否则会在运行时抛出java.lang.ClassCastException类型的异常。</p>\n</li>\n</ol>\n<p>对于上述四种Map类型的类，要求映射中的key是不可变对象。不可变对象是该对象在创建后它的哈希值不会被改变。如果对象的哈希值发生变化，Map对象很可能就定位不到映射的位置了。</p>\n<p>通过上面的比较，我们知道了HashMap是Java的Map家族中一个普通成员，鉴于它可以满足大多数场景的使用条件，所以是使用频度最高的一个。下文我们主要结合源码，从存储结构、常用方法分析、扩容以及安全性等方面深入讲解HashMap的工作原理。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"内部实现\"><a href=\"#内部实现\" class=\"headerlink\" title=\"内部实现\"></a>内部实现</h2><p>搞清楚HashMap，首先需要知道HashMap是什么，即它的存储结构-字段；其次弄明白它能干什么，即它的功能实现-方法。下面我们针对这两个方面详细展开讲解。</p>\n<h3 id=\"存储结构-字段\"><a href=\"#存储结构-字段\" class=\"headerlink\" title=\"存储结构-字段\"></a>存储结构-字段</h3><p>从结构实现来讲，HashMap是数组+链表+红黑树（JDK1.8增加了红黑树部分）实现的，如下如所示。</p>\n<p><img data-src=\"/images/hashmap/hashMap%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E5%9B%BE.png\" alt=\"存储结构-字段\"></p>\n<p>这里需要讲明白两个问题：数据底层具体存储的是什么？这样的存储方式有什么优点呢？</p>\n<ol>\n<li>从源码可知，HashMap类中有一个非常重要的字段，就是 Node[] table，即哈希桶数组，明显它是一个Node的数组。我们来看Node[JDK1.8]是何物。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span>&lt;K,V&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> hash;    <span class=\"comment\">//用来定位数组索引位置</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> K key;</span><br><span class=\"line\">    V value;</span><br><span class=\"line\">    Node&lt;K,V&gt; next;   <span class=\"comment\">//链表的下一个node</span></span><br><span class=\"line\">    Node(<span class=\"type\">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123; ... &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> K <span class=\"title function_\">getKey</span><span class=\"params\">()</span>&#123; ... &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> V <span class=\"title function_\">getValue</span><span class=\"params\">()</span> &#123; ... &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123; ... &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">hashCode</span><span class=\"params\">()</span> &#123; ... &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> V <span class=\"title function_\">setValue</span><span class=\"params\">(V newValue)</span> &#123; ... &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object o)</span> &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Node是HashMap的一个内部类，实现了Map.Entry接口，本质是就是一个映射(键值对)。上图中的每个黑色圆点就是一个Node对象。<br>2. HashMap就是使用哈希表来存储的。哈希表为解决冲突，可以采用开放地址法和链地址法等来解决问题，Java中HashMap采用了链地址法。链地址法，简单来说，就是数组加链表的结合。在每个数组元素上都一个链表结构，当数据被Hash后，得到数组下标，把数据放在对应下标元素的链表上。例如程序执行下面代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">map.put(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>系统将调用”key”这个key的hashCode()方法得到其hashCode 值（该方法适用于每个Java对象），然后再通过Hash算法的后两步运算（高位运算和取模运算，下文有介绍）来定位该键值对的存储位置，有时两个key会定位到相同的位置，表示发生了Hash碰撞。当然Hash算法计算结果越分散均匀，Hash碰撞的概率就越小，map的存取效率就会越高。</p>\n<p>如果哈希桶数组很大，即使较差的Hash算法也会比较分散，如果哈希桶数组数组很小，即使好的Hash算法也会出现较多碰撞，所以就需要在空间成本和时间成本之间权衡，其实就是在根据实际情况确定哈希桶数组的大小，并在此基础上设计好的hash算法减少Hash碰撞。那么通过什么方式来控制map使得Hash碰撞的概率又小，哈希桶数组（Node[] table）占用空间又少呢？答案就是好的Hash算法和扩容机制。</p>\n<p>在理解Hash和扩容流程之前，我们得先了解下HashMap的几个字段。从HashMap的默认构造函数源码可知，构造函数就是对下面几个字段进行初始化，源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> threshold;             <span class=\"comment\">// 所能容纳的key-value对极限</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">float</span> loadFactor;    <span class=\"comment\">// 负载因子</span></span><br><span class=\"line\"><span class=\"type\">int</span> modCount;</span><br><span class=\"line\"><span class=\"type\">int</span> size;</span><br></pre></td></tr></table></figure>\n\n<p>首先，Node[] table的初始化长度length(默认值是16)，Load factor为负载因子(默认值是0.75)，threshold是HashMap所能容纳的最大数据量的Node(键值对)个数。threshold = length * Load factor。也就是说，在数组定义好长度之后，负载因子越大，所能容纳的键值对个数越多。</p>\n<p>结合负载因子的定义公式可知，threshold就是在此Load factor和length(数组长度)对应下允许的最大元素数目，超过这个数目就重新resize(扩容)，扩容后的HashMap容量是之前容量的两倍。默认的负载因子0.75是对空间和时间效率的一个平衡选择，建议大家不要修改，除非在时间和空间比较特殊的情况下，如果内存空间很多而又对时间效率要求很高，可以降低负载因子Load factor的值；相反，如果内存空间紧张而对时间效率要求不高，可以增加负载因子loadFactor的值，这个值可以大于1。</p>\n<p>size这个字段其实很好理解，就是HashMap中实际存在的键值对数量。注意和table的长度length、容纳最大键值对数量threshold的区别。而modCount字段主要用来记录HashMap内部结构发生变化的次数，主要用于迭代的快速失败。强调一点，内部结构发生变化指的是结构发生变化，例如put新键值对，但是某个key对应的value值被覆盖不属于结构变化。</p>\n<p>在HashMap中，哈希桶数组table的长度length大小必须为2的n次方(一定是合数)，这是一种非常规的设计，常规的设计是把桶的大小设计为素数。相对来说素数导致冲突的概率要小于合数，具体证明可以参考<a href=\"http://blog.csdn.net/liuqiyao_01/article/details/14475159\">http://blog.csdn.net/liuqiyao_01/article/details/14475159</a>，Hashtable初始化桶大小为11，就是桶大小设计为素数的应用（Hashtable扩容后不能保证还是素数）。HashMap采用这种非常规设计，主要是为了在取模和扩容时做优化，同时为了减少冲突，HashMap定位哈希桶索引位置时，也加入了高位参与运算的过程。</p>\n<p>这里存在一个问题，即使负载因子和Hash算法设计的再合理，也免不了会出现拉链过长的情况，一旦出现拉链过长，则会严重影响HashMap的性能。于是，在JDK1.8版本中，对数据结构做了进一步的优化，引入了红黑树。而当链表长度太长（默认超过8）时，链表就转换为红黑树，利用红黑树快速增删改查的特点提高HashMap的性能，其中会用到红黑树的插入、删除、查找等算法。本文不再对红黑树展开讨论，想了解更多红黑树数据结构的工作原理可以参考<a href=\"http://blog.csdn.net/v_july_v/article/details/6105630\">http://blog.csdn.net/v_july_v/article/details/6105630</a>。</p>\n<h3 id=\"功能实现-方法\"><a href=\"#功能实现-方法\" class=\"headerlink\" title=\"功能实现-方法\"></a>功能实现-方法</h3><p>HashMap的内部功能实现很多，本文主要从根据key获取哈希桶数组索引位置、put方法的详细执行、扩容过程三个具有代表性的点深入展开讲解。</p>\n<h4 id=\"1-确定哈希桶数组索引位置\"><a href=\"#1-确定哈希桶数组索引位置\" class=\"headerlink\" title=\"1. 确定哈希桶数组索引位置\"></a>1. 确定哈希桶数组索引位置</h4><p>不管增加、删除、查找键值对，定位到哈希桶数组的位置都是很关键的第一步。前面说过HashMap的数据结构是数组和链表的结合，所以我们当然希望这个HashMap里面的元素位置尽量分布均匀些，尽量使得每个位置上的元素数量只有一个，那么当我们用hash算法求得这个位置的时候，马上就可以知道对应位置的元素就是我们要的，不用遍历链表，大大优化了查询的效率。HashMap定位数组索引位置，直接决定了hash方法的离散性能。先看看源码的实现(方法一+方法二):</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方法一：</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">hash</span><span class=\"params\">(Object key)</span> &#123;   <span class=\"comment\">//jdk1.8 &amp; jdk1.7</span></span><br><span class=\"line\">     <span class=\"type\">int</span> h;</span><br><span class=\"line\">     <span class=\"comment\">// h = key.hashCode() 为第一步 取hashCode值</span></span><br><span class=\"line\">     <span class=\"comment\">// h ^ (h &gt;&gt;&gt; 16)  为第二步 高位参与运算</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> (key == <span class=\"literal\">null</span>) ? <span class=\"number\">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//方法二：</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">indexFor</span><span class=\"params\">(<span class=\"type\">int</span> h, <span class=\"type\">int</span> length)</span> &#123;  <span class=\"comment\">//jdk1.7的源码，jdk1.8没有这个方法，但是实现原理一样的</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> h &amp; (length-<span class=\"number\">1</span>);  <span class=\"comment\">//第三步 取模运算</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的Hash算法本质上就是三步：<code>取key的hashCode值</code>、<code>高位运算</code>、<code>取模运算</code>。</p>\n<p>对于任意给定的对象，只要它的hashCode()返回值相同，那么程序调用方法一所计算得到的Hash码值总是相同的。我们首先想到的就是把hash值对数组长度取模运算，这样一来，元素的分布相对来说是比较均匀的。但是，模运算的消耗还是比较大的，在HashMap中是这样做的：调用方法二来计算该对象应该保存在table数组的哪个索引处。</p>\n<p>这个方法非常巧妙，它通过h &amp; (table.length -1)来得到该对象的保存位，而HashMap底层数组的长度总是2的n次方，这是HashMap在速度上的优化。当length总是2的n次方时，h&amp; (length-1)运算等价于对length取模，也就是h%length，但是&amp;比%具有更高的效率。</p>\n<p>在JDK1.8的实现中，优化了高位运算的算法，通过hashCode()的高16位异或低16位实现的：(h = k.hashCode()) ^ (h &gt;&gt;&gt; 16)，主要是从速度、功效、质量来考虑的，这么做可以在\b数组table的length比较小的时候，也能保证考虑到高低Bit都参与到Hash的计算中，同时不会有太大的开销。</p>\n<p>下面举例说明下，n为table的长度。</p>\n<p><img data-src=\"/images/hashmap/hashMap%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E4%BE%8B%E5%9B%BE.png\" alt=\"hashMap哈希算法例图\"></p>\n<h4 id=\"2-分析HashMap的put方法\"><a href=\"#2-分析HashMap的put方法\" class=\"headerlink\" title=\"2. 分析HashMap的put方法\"></a>2. 分析HashMap的put方法</h4><p>HashMap的put方法执行过程可以通过下图来理解，自己有兴趣可以去对比源码更清楚地研究学习。</p>\n<p><img data-src=\"/images/hashmap/hashMap-put%E6%96%B9%E6%B3%95%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%9B%BE.png\" alt=\"hashMap put方法执行流程图\"></p>\n<ol>\n<li><p>判断键值对数组table[i]是否为空或为null，否则执行resize()进行扩容；</p>\n</li>\n<li><p>根据键值key计算hash值得到插入的数组索引i，如果table[i]==null，直接新建节点添加，转向⑥，如果table[i]不为空，\b转向③；</p>\n</li>\n<li><p>判断\btable[i]的首个元素是否和key一样，如果相同直接覆盖value，否则转向④，这里的相同指的是hashCode以及equals；</p>\n</li>\n<li><p>判断table[i] 是否为treeNode，即table[i] 是否是红黑树，如果是红黑树，则直接在树中插入键值对，否则转向⑤；</p>\n</li>\n<li><p>遍历table[i]，判断链表长度是否大于8，大于8的话把链表转换为红黑树，在红黑树中执行插入操作，否则进行链表的插入操作；\b遍历过程中若发现key已经存在直接覆盖value即可；</p>\n</li>\n<li><p>插入成功后，判断实际存在的键值对数量size是否超多了最大容量threshold，如果超过，进行扩容。</p>\n</li>\n</ol>\n<p>JDK1.8HashMap的put方法源码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> V <span class=\"title function_\">put</span><span class=\"params\">(K key, V value)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对key的hashCode()做hash</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> putVal(hash(key), key, value, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> V <span class=\"title function_\">putVal</span><span class=\"params\">(<span class=\"type\">int</span> hash, K key, V value, <span class=\"type\">boolean</span> onlyIfAbsent,</span></span><br><span class=\"line\"><span class=\"params\">               <span class=\"type\">boolean</span> evict)</span> &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class=\"type\">int</span> n, i;</span><br><span class=\"line\">    <span class=\"comment\">// 步骤①：tab为空则创建</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((tab = table) == <span class=\"literal\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\">        n = (tab = resize()).length;</span><br><span class=\"line\">    <span class=\"comment\">// 步骤②：计算index，并对null做处理</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((p = tab[i = (n - <span class=\"number\">1</span>) &amp; hash]) == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        tab[i] = newNode(hash, key, value, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt; e; K k;</span><br><span class=\"line\">        <span class=\"comment\">// 步骤③：节点key存在，直接覆盖value</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.hash == hash &amp;&amp;</span><br><span class=\"line\">            ((k = p.key) == key || (key != <span class=\"literal\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">            e = p;</span><br><span class=\"line\">        <span class=\"comment\">// 步骤④：判断该链为红黑树</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class=\"built_in\">this</span>, tab, hash, key, value);</span><br><span class=\"line\">        <span class=\"comment\">// 步骤⑤：该链为链表</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">binCount</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; ; ++binCount) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((e = p.next) == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    p.next = newNode(hash, key,value,<span class=\"literal\">null</span>);</span><br><span class=\"line\">                     <span class=\"comment\">//链表长度大于8转换为红黑树进行处理</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class=\"number\">1</span>) <span class=\"comment\">// -1 for 1st</span></span><br><span class=\"line\">                        treeifyBin(tab, hash);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                 <span class=\"comment\">// key已经存在直接覆盖value</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                    ((k = e.key) == key || (key != <span class=\"literal\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                           <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                p = e;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e != <span class=\"literal\">null</span>) &#123; <span class=\"comment\">// existing mapping for key</span></span><br><span class=\"line\">            <span class=\"type\">V</span> <span class=\"variable\">oldValue</span> <span class=\"operator\">=</span> e.value;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!onlyIfAbsent || oldValue == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                e.value = value;</span><br><span class=\"line\">            afterNodeAccess(e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ++modCount;</span><br><span class=\"line\">    <span class=\"comment\">// 步骤⑥：超过最大容量 就扩容</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (++size &gt; threshold)</span><br><span class=\"line\">        resize();</span><br><span class=\"line\">    afterNodeInsertion(evict);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-扩容机制\"><a href=\"#3-扩容机制\" class=\"headerlink\" title=\"3. 扩容机制\"></a>3. 扩容机制</h4><p>扩容(resize)就是重新计算容量，向HashMap对象里不停的添加元素，而HashMap对象内部的数组无法装载更多的元素时，对象就需要扩大数组的长度，以便能装入更多的元素。当然Java里的数组是无法自动扩容的，方法是使用一个新的数组代替已有的容量小的数组，就像我们用一个小桶装水，如果想装更多的水，就得换大水桶。</p>\n<p>我们分析下resize的源码，鉴于JDK1.8融入了红黑树，较复杂，为了便于理解我们仍然使用JDK1.7的代码，好理解一些，本质上区别不大，具体区别后文再说。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">resize</span><span class=\"params\">(<span class=\"type\">int</span> newCapacity)</span> &#123;   <span class=\"comment\">//传入新的容量</span></span><br><span class=\"line\">    Entry[] oldTable = table;    <span class=\"comment\">//引用扩容前的Entry数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">oldCapacity</span> <span class=\"operator\">=</span> oldTable.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;  <span class=\"comment\">//扩容前的数组大小如果已经达到最大(2^30)了</span></span><br><span class=\"line\">        threshold = Integer.MAX_VALUE; <span class=\"comment\">//修改阈值为int的最大值(2^31-1)，这样以后就不会扩容了</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Entry[] newTable = <span class=\"keyword\">new</span> <span class=\"title class_\">Entry</span>[newCapacity];  <span class=\"comment\">//初始化一个新的Entry数组</span></span><br><span class=\"line\">    transfer(newTable);                         <span class=\"comment\">//！！将数据转移到新的Entry数组里</span></span><br><span class=\"line\">    table = newTable;                           <span class=\"comment\">//HashMap的table属性引用新的Entry数组</span></span><br><span class=\"line\">    threshold = (<span class=\"type\">int</span>)(newCapacity * loadFactor);<span class=\"comment\">//修改阈值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里就是使用一个容量更大的数组来代替已有的容量小的数组，transfer()方法将原有Entry数组的元素拷贝到新的Entry数组里。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">transfer</span><span class=\"params\">(Entry[] newTable)</span> &#123;</span><br><span class=\"line\">    Entry[] src = table;                   <span class=\"comment\">//src引用了旧的Entry数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">newCapacity</span> <span class=\"operator\">=</span> newTable.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; src.length; j++) &#123; <span class=\"comment\">//遍历旧的Entry数组</span></span><br><span class=\"line\">        Entry&lt;K,V&gt; e = src[j];             <span class=\"comment\">//取得旧Entry数组的每个元素</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            src[j] = <span class=\"literal\">null</span>;<span class=\"comment\">//释放旧Entry数组的对象引用（for循环后，旧的Entry数组不再引用任何对象）</span></span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                Entry&lt;K,V&gt; next = e.next;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> indexFor(e.hash, newCapacity); <span class=\"comment\">//！！重新计算每个元素在数组中的位置</span></span><br><span class=\"line\">                e.next = newTable[i]; <span class=\"comment\">//标记[1]</span></span><br><span class=\"line\">                newTable[i] = e;      <span class=\"comment\">//将元素放在数组上</span></span><br><span class=\"line\">                e = next;             <span class=\"comment\">//访问下一个Entry链上的元素</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> (e != <span class=\"literal\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>newTable[i]的引用赋给了e.next，也就是使用了单链表的头插入方式，同一位置上新元素总会被放在链表的头部位置；这样先放在一个索引上的元素终会被放到Entry链的尾部(如果发生了hash冲突的话），这一点和Jdk1.8有区别，下文详解。在旧数组中同一条Entry链上的元素，通过重新计算索引位置后，有可能被放到了新数组的不同位置上。</p>\n<p>下面举个例子说明下扩容过程。假设了我们的hash算法就是简单的用key mod 一下表的大小（也就是数组的长度）。其中的\b哈希桶数组table的size=2， 所以key = 3、7、5，put顺序依次为 5、7、3。在mod 2以后都冲突在table[1]这里了。这里假设负载因子 loadFactor=1，即当键值对的实际大小size 大于 table的实际大小时进行扩容。接下来的三个步骤是哈希桶数组 resize成4，然后所有的Node重新rehash的过程。</p>\n<p><img data-src=\"/images/hashmap/jdk1.7%E6%89%A9%E5%AE%B9%E4%BE%8B%E5%9B%BE.png\" alt=\"jdk1.7扩容例图\"></p>\n<p>下面我们讲解下JDK1.8做了哪些优化。经过观测可以发现，我们使用的是2次幂的扩展(指长度扩为原来2倍)，所以，元素的位置要么是在原位置，要么是在原位置再移动2次幂的位置。看下图可以明白这句话的意思，n为table的长度，图（a）表示扩容前的key1和key2两种key确定索引位置的示例，图（b）表示扩容后key1和key2两种key确定索引位置的示例，其中hash1是key1对应的哈希与高位运算结果。</p>\n<p><img data-src=\"/images/hashmap/hashMap-1.8-%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E4%BE%8B%E5%9B%BE1.png\" alt=\"hashMap 1.8 哈希算法例图1\"></p>\n<p>元素在重新计算hash之后，因为n变为2倍，那么n-1的mask范围在高位多1bit(红色)，因此新的index就会发生这样的变化：</p>\n<p><img data-src=\"/images/hashmap/hashMap-1.8-%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E4%BE%8B%E5%9B%BE2.png\" alt=\"hashMap 1.8 哈希算法例图2\"></p>\n<p>因此，我们在扩充HashMap的时候，不需要像JDK1.7的实现那样重新计算hash，只需要看看原来的hash值新增的那个bit是1还是0就好了，是0的话索引没变，是1的话索引变成“原索引+oldCap”，可以看看下图为16扩充为32的resize示意图：</p>\n<p><img data-src=\"/images/hashmap/jdk1.8-hashMap-%E6%89%A9%E5%AE%B9%E4%BE%8B%E5%9B%BE.png\" alt=\"jdk1.8 hashMap 扩容例图.png\"></p>\n<p>这个设计确实非常的巧妙，既省去了重新计算hash值的时间，而且同时，由于新增的1bit是0还是1可以认为是随机的，因此resize的过程，均匀的把之前的冲突的节点分散到新的bucket了。这一块就是JDK1.8新增的优化点。有一点注意区别，JDK1.7中rehash的时候，旧链表迁移新链表的时候，如果在新表的数组索引位置相同，则链表元素会倒置，但是从上图可以看出，JDK1.8不会倒置。有兴趣的同学可以研究下JDK1.8的resize源码，写的很赞，如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">oldCap</span> <span class=\"operator\">=</span> (oldTab == <span class=\"literal\">null</span>) ? <span class=\"number\">0</span> : oldTab.length;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">oldThr</span> <span class=\"operator\">=</span> threshold;</span><br><span class=\"line\">    <span class=\"type\">int</span> newCap, newThr = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldCap &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 超过最大值就不再扩充了，就只好随你碰撞去吧</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">            threshold = Integer.MAX_VALUE;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldTab;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 没超过最大值，就扩充为原来的2倍</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((newCap = oldCap &lt;&lt; <span class=\"number\">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class=\"line\">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class=\"line\">            newThr = oldThr &lt;&lt; <span class=\"number\">1</span>; <span class=\"comment\">// double threshold</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldThr &gt; <span class=\"number\">0</span>) <span class=\"comment\">// initial capacity was placed in threshold</span></span><br><span class=\"line\">        newCap = oldThr;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;               <span class=\"comment\">// zero initial threshold signifies using defaults</span></span><br><span class=\"line\">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class=\"line\">        newThr = (<span class=\"type\">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 计算新的resize上限</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newThr == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">float</span> <span class=\"variable\">ft</span> <span class=\"operator\">=</span> (<span class=\"type\">float</span>)newCap * loadFactor;</span><br><span class=\"line\">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class=\"type\">float</span>)MAXIMUM_CAPACITY ?</span><br><span class=\"line\">                  (<span class=\"type\">int</span>)ft : Integer.MAX_VALUE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    threshold = newThr;</span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&#123;&quot;rawtypes&quot;，&quot;unchecked&quot;&#125;)</span></span><br><span class=\"line\">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>[newCap];</span><br><span class=\"line\">    table = newTab;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldTab != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 把每个bucket都移动到新的buckets中</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class=\"line\">            Node&lt;K,V&gt; e;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((e = oldTab[j]) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                oldTab[j] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.next == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    newTab[e.hash &amp; (newCap - <span class=\"number\">1</span>)] = e;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">                    ((TreeNode&lt;K,V&gt;)e).split(<span class=\"built_in\">this</span>, newTab, j, oldCap);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 链表优化重hash的代码块</span></span><br><span class=\"line\">                    Node&lt;K,V&gt; loHead = <span class=\"literal\">null</span>, loTail = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    Node&lt;K,V&gt; hiHead = <span class=\"literal\">null</span>, hiTail = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    Node&lt;K,V&gt; next;</span><br><span class=\"line\">                    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                        next = e.next;</span><br><span class=\"line\">                        <span class=\"comment\">// 原索引</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((e.hash &amp; oldCap) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (loTail == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                                loHead = e;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                loTail.next = e;</span><br><span class=\"line\">                            loTail = e;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"comment\">// 原索引+oldCap</span></span><br><span class=\"line\">                        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (hiTail == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                                hiHead = e;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                hiTail.next = e;</span><br><span class=\"line\">                            hiTail = e;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">while</span> ((e = next) != <span class=\"literal\">null</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// 原索引放到bucket里</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (loTail != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                        loTail.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                        newTab[j] = loHead;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// 原索引+oldCap放到bucket里</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (hiTail != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                        hiTail.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                        newTab[j + oldCap] = hiHead;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newTab;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"线程安全性\"><a href=\"#线程安全性\" class=\"headerlink\" title=\"线程安全性\"></a>线程安全性</h2><p>在多线程使用场景中，应该尽量避免使用线程不安全的HashMap，而使用线程安全的ConcurrentHashMap。那么为什么说HashMap是线程不安全的，下面举例子说明在并发的多线程使用场景中使用HashMap可能造成死循环。代码例子如下(便于理解，仍然使用JDK1.7的环境)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HashMapInfiniteLoop</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> HashMap&lt;Integer,String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;Integer,String&gt;(<span class=\"number\">2</span>，<span class=\"number\">0.75f</span>);</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        map.put(<span class=\"number\">5</span>， <span class=\"string\">&quot;C&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"string\">&quot;Thread1&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                map.put(<span class=\"number\">7</span>, <span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\">                System.out.println(map);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;.start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"string\">&quot;Thread2&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                map.put(<span class=\"number\">3</span>, <span class=\"string\">&quot;A);</span></span><br><span class=\"line\"><span class=\"string\">                System.out.println(map);</span></span><br><span class=\"line\"><span class=\"string\">            &#125;;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;.start();</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>其中，map初始化为一个长度为2的数组，loadFactor=0.75，threshold=2*0.75=1，也就是说当put第二个key的时候，map就需要进行resize。</p>\n<p>通过设置断点让线程1和线程2同时debug到transfer方法(3.3小节代码块)的首行。注意此时两个线程已经成功添加数据。放开thread1的断点至transfer方法的“Entry next = e.next;” 这一行；然后放开线程2的的断点，让线程2进行resize。结果如下图。</p>\n<p><img data-src=\"/images/hashmap/jdk1.7-hashMap%E6%AD%BB%E5%BE%AA%E7%8E%AF%E4%BE%8B%E5%9B%BE1.png\" alt=\"jdk1.7 hashMap死循环例图1\"></p>\n<p>注意，Thread1的 e 指向了key(3)，而next指向了key(7)，其在线程二rehash后，指向了线程二重组后的链表。</p>\n<p>线程一被调度回来执行，先是执行 newTalbe[i] = e， 然后是e = next，导致了e指向了key(7)，而下一次循环的next = e.next导致了next指向了key(3)。</p>\n<p><img data-src=\"/images/hashmap/jdk1.7-hashMap%E6%AD%BB%E5%BE%AA%E7%8E%AF%E4%BE%8B%E5%9B%BE2.png\" alt=\"jdk1.7 hashMap死循环例图2\"></p>\n<p><img data-src=\"/images/hashmap/jdk1.7-hashMap%E6%AD%BB%E5%BE%AA%E7%8E%AF%E4%BE%8B%E5%9B%BE3.png\" alt=\"jdk1.7 hashMap死循环例图3\"></p>\n<p>e.next = newTable[i] 导致 key(3).next 指向了 key(7)。注意：此时的key(7).next 已经指向了key(3)， 环形链表就这样出现了。</p>\n<p><img data-src=\"/images/hashmap/jdk1.7-hashMap%E6%AD%BB%E5%BE%AA%E7%8E%AF%E4%BE%8B%E5%9B%BE4.png\" alt=\"jdk1.7 hashMap死循环例图4\"></p>\n<p>于是，当我们用线程一调用map.get(11)时，悲剧就出现了—— <code>Infinite Loop</code> 。</p>\n<h2 id=\"JDK1-8与JDK1-7的性能对比\"><a href=\"#JDK1-8与JDK1-7的性能对比\" class=\"headerlink\" title=\"JDK1.8与JDK1.7的性能对比\"></a>JDK1.8与JDK1.7的性能对比</h2><p>HashMap中，如果key经过hash算法得出的数组索引位置全部不相同，即Hash算法非常好，那样的话，getKey方法的时间复杂度就是O(1)，如果Hash算法技术的结果碰撞非常多，假如Hash算极其差，所有的Hash算法结果得出的索引位置一样，那样所有的键值对都集中到一个桶中，或者在一个链表中，或者在一个红黑树中，时间复杂度分别为O(n)和O(logn)。 鉴于JDK1.8做了多方面的优化，总体性能优于JDK1.7。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ol>\n<li><p>扩容是一个特别耗性能的操作，所以当程序员在使用HashMap的时候，估算map的大小，初始化的时候给一个大致的数值，避免map进行频繁的扩容。</p>\n</li>\n<li><p>负载因子是可以修改的，也可以大于1，但是建议不要轻易修改，除非情况非常特殊。</p>\n</li>\n<li><p>HashMap是线程不安全的，不要在并发的环境中同时操作HashMap，建议使用ConcurrentHashMap。</p>\n</li>\n<li><p>JDK1.8引入红黑树大程度优化了HashMap的性能。</p>\n</li>\n</ol>\n","tags":["Java"]},{"title":"Java Enum","url":"/2017/07/22/java-enum/","content":"<p>Java 中enum的书写方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">EnumColumn</span> &#123;</span><br><span class=\"line\">  key1(valve1), key2(valve2), key3(valve2);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> String type;</span><br><span class=\"line\"></span><br><span class=\"line\">  EnumColumn(String type) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.type = type;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> String.valueOf(<span class=\"built_in\">this</span>.type);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"type\">EnumColumn</span> <span class=\"variable\">enumColumn1</span> <span class=\"operator\">=</span> EnumColumn.valueOf(key1);</span><br><span class=\"line\">  <span class=\"type\">EnumColumn</span> <span class=\"variable\">enumColumn2</span> <span class=\"operator\">=</span> EnumColumn.key2;</span><br><span class=\"line\">    </span><br><span class=\"line\">  System.out.println(groupColumn1.name());<span class=\"comment\">//key1</span></span><br><span class=\"line\">  System.out.println(groupColumn1.toString());<span class=\"comment\">//valve1</span></span><br><span class=\"line\">  System.out.println(groupColumn1.type);<span class=\"comment\">//valve1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","tags":["Java"]},{"title":"java-foreach","url":"/2017/07/25/java-foreach/","content":"<h2 id=\"查看反编译代码\"><a href=\"#查看反编译代码\" class=\"headerlink\" title=\"查看反编译代码\"></a>查看反编译代码</h2><p>对以下代码进行反编译：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (Integer i : list) &#123;</span><br><span class=\"line\">  System.out.println(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>反编译后：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Integer i;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">Iterator</span> <span class=\"variable\">iterator</span> <span class=\"operator\">=</span> list.iterator(); iterator.hasNext(); System.out.println(i))&#123;</span><br><span class=\"line\">  i = (Integer)iterator.next();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>我们按照执行顺序拆解一下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Integer i; 定义一个临时变量 i</span><br><span class=\"line\">Iterator iterator = list.iterator(); 获取 List 的迭代器</span><br><span class=\"line\">iterator.hasNext(); 判断迭代器中是否有未遍历过的元素</span><br><span class=\"line\">i = (Integer)iterator.next(); 获取第一个未遍历的元素, 赋值给临时变量 i</span><br><span class=\"line\">System.out.println(i) 输出临时变量 i 的值</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>如此循环往复, 直到遍历完 List 中的所有元素。</p>\n<p>通过反编译, 我们看到, 其实 JAVA 中的增强 for 循环底层是通过迭代器模式来实现的。</p>\n<h2 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h2><p>既然增强for循环通过迭代器实现, 那么必然有迭代器的特性, 在使用迭代器遍历元素的时候, 在对集合进行删除的时候一定要注意, 使用不当有可能发生<code>ConcurrentModificationException</code>, 如以下代码, 会抛出<code>ConcurrentModificationException</code>异常:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (Student stu : students) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (stu.getId() == <span class=\"number\">2</span>)</span><br><span class=\"line\">    students.remove(stu);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Iterator 是工作在一个独立的线程中, 并且拥有一个 mutex 锁。 Iterator 被创建之后会建立一个指向原来对象的单链索引表, 当原来的对象数量发生变化时, 这个索引表的内容不会同步改变, 所以当索引指针往后移动的时候就找不到要迭代的对象, 所以按照 fail-fast 原则 Iterator 会马上抛出java.util.ConcurrentModificationException异常。</p>\n</blockquote>\n<p>所以 Iterator 在工作的时候是不允许被迭代的对象被改变的。但你可以使用 Iterator 本身的方法 remove() 来删除对象, Iterator.remove() 方法会在删除当前迭代对象的同时维护索引的一致性。</p>\n<p>正确的在遍历的同时删除元素的方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Iterator&lt;Student&gt; stuIter = students.iterator();</span><br><span class=\"line\"><span class=\"keyword\">while</span> (stuIter.hasNext()) &#123;</span><br><span class=\"line\">  <span class=\"type\">Student</span> <span class=\"variable\">student</span> <span class=\"operator\">=</span> stuIter.next();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (student.getId() == <span class=\"number\">2</span>)</span><br><span class=\"line\">    stuIter.remove();<span class=\"comment\">//这里要使用Iterator的remove方法移除当前对象, 如果使用List的remove方法, 则同样会出现ConcurrentModificationException</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","tags":["Java"]},{"title":"JDK 命令行工具及可视化工具","url":"/2017/08/28/jdk-command/","content":"<h2 id=\"JDK-命令行的工具\"><a href=\"#JDK-命令行的工具\" class=\"headerlink\" title=\"JDK 命令行的工具\"></a>JDK 命令行的工具</h2><h3 id=\"JPS-：虚拟机进程状况工具\"><a href=\"#JPS-：虚拟机进程状况工具\" class=\"headerlink\" title=\"JPS ：虚拟机进程状况工具\"></a>JPS ：虚拟机进程状况工具</h3><p>-q 只输出 LVMID, 省略主类的名称。<br>-m 输出虚拟机进程启动时传递给主类 main() 函数的参数。<br>-l 输出主类的全名, 如果进程执行的是 Jar 包, 输出 Jar 路径。<br>-v 输出虚拟机进程启动 JVM 参数。</p>\n<h3 id=\"jstat：虚拟机统计信息监视工具\"><a href=\"#jstat：虚拟机统计信息监视工具\" class=\"headerlink\" title=\"jstat：虚拟机统计信息监视工具\"></a>jstat：虚拟机统计信息监视工具</h3><p>可以显示本地或远程虚拟机进程中的类装载、内存、垃圾收集、JIT 编译等运行数据。<br>命令格式 jstat [option vmid [interval[s|ms] [count]]]<br>如果是远程虚拟机进程 那么 VMID 格式：[protocol:][//]lvmid[@hostname[:port]/servername]<br>参数 interval 和 count 代表查询间隔和次数, 如果省略了这两个参数, 说明只查询一次。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"jinfo：Java-配置信息工具\"><a href=\"#jinfo：Java-配置信息工具\" class=\"headerlink\" title=\"jinfo：Java 配置信息工具\"></a>jinfo：Java 配置信息工具</h3><p>jinfo 是作用是实时查看和调整虚拟机的各项参数。使用 jps -v 参数可以查看虚拟机启动时显示执行的参数列表。<br>jinfo -flag PretenureSizeThreshold 7832<br>-XX:PretenureSizeThreshold=0</p>\n<h3 id=\"jmap：Java-内存映像工具\"><a href=\"#jmap：Java-内存映像工具\" class=\"headerlink\" title=\"jmap：Java 内存映像工具\"></a>jmap：Java 内存映像工具</h3><p>jmap（Memory Map for Java）命令用于生成堆转储快照（一般称为 heapdump 或 dump 文件）。<br>-dump 生成 Java 堆转储快照。<br>-finalizerinfo 显示在 F-Queue 中等待 Finalizer 线程执行 finalize 方法的对象。<br>-heap 显示 Java 堆详细信息。<br>-histo 显示堆中对象统计信息。<br>-permstat 以 ClassLoader 为统计口径显示永久代内存状态。<br>-F 当虚拟机进程对 - dump 选项没有响应时, 可使用这个选项强制生成 dump 快照。</p>\n<h3 id=\"jhat：虚拟机堆转储快照分析工具\"><a href=\"#jhat：虚拟机堆转储快照分析工具\" class=\"headerlink\" title=\"jhat：虚拟机堆转储快照分析工具\"></a>jhat：虚拟机堆转储快照分析工具</h3><p>与 jmap 搭配使用, 来分析 jmap 生成的堆 转储快照。</p>\n<h3 id=\"jstack：Java-堆栈跟踪工具\"><a href=\"#jstack：Java-堆栈跟踪工具\" class=\"headerlink\" title=\"jstack：Java 堆栈跟踪工具\"></a>jstack：Java 堆栈跟踪工具</h3><p>jstack（Stack Trace for Java）命令用于生成虚拟机当前时刻的线程快照（一般称为 threaddump 或 javacore 文件）。<br>-f 当正常输出的请求不被响应时, 强制输出线程堆栈。<br>-l 除堆栈外, 显示锁的附件信息。<br>-m 如果调用到本地方法的话, 可以显示 C/C++ 的堆栈。</p>\n<h2 id=\"JDK-的可视化工具\"><a href=\"#JDK-的可视化工具\" class=\"headerlink\" title=\"JDK 的可视化工具\"></a>JDK 的可视化工具</h2><h3 id=\"JConsole\"><a href=\"#JConsole\" class=\"headerlink\" title=\"JConsole\"></a>JConsole</h3><p>JConsole 工具在 JDK/bin 目录下, 启动 JConsole 后, 将自动搜索本机运行的 jvm 进程, 不需要 jps 命令来查询指定。双击其中一个 jvm 进程即可开始监控, 也可使用 “远程进程” 来连接远程服务器。</p>\n<h3 id=\"VisualVM\"><a href=\"#VisualVM\" class=\"headerlink\" title=\"VisualVM\"></a>VisualVM</h3><p>VisualVM 是一个集成多个 JDK 命令行工具的可视化工具。VisualVM 基于 NetBeans 平台开发, 它具备了插件扩展功能的特性, 通过插件的扩展, 可用于显示虚拟机进程及进程的配置和环境信息 (jps, jinfo), 监视应用程序的 CPU、GC、堆、方法区及线程的信息 (jstat、jstack) 等。VisualVM 在 JDK/bin 目录下。</p>\n","tags":["Java虚拟机"]},{"title":"Java内存区域","url":"/2017/08/28/jvm/","content":"<h2 id=\"运行时数据区域\"><a href=\"#运行时数据区域\" class=\"headerlink\" title=\"运行时数据区域\"></a>运行时数据区域</h2><p><img data-src=\"/images/jvm/jvmdata.png\" alt=\"运行时数据区域\"></p>\n<h3 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h3><p>字节码解释器通过更改这个计数器的值来选取下一条需要执行的字节码指令。每条线程都需要一个独立的程序计数器, 线程之间, 互不影响。<strong>Java虚拟机规范中唯一一个没有规定任何OutOfMemoryError情况的区域</strong>。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"Java虚拟机栈\"><a href=\"#Java虚拟机栈\" class=\"headerlink\" title=\"Java虚拟机栈\"></a>Java虚拟机栈</h3><p>线程私有, 生命周期与线程相同。局部变量表存放编译器可知的基本数据类型, 对象引用, 和returnAddress类型。</p>\n<p>局部变量表所需要的内存空间在编译期间完成分配, 当进入一个方法时, 在方法运行期间不会改变局部变量表的大小。</p>\n<p>这个区域有两种异常：</p>\n<ol>\n<li>当线程请求的栈深度大于虚拟机所允许的深度, 将抛出Stackoverflow异常。</li>\n<li>当虚拟机可以动态扩展, 但无法申请到足够的内存, 将抛出OutOfMemoryError异常。</li>\n</ol>\n<h4 id=\"局部变量表\"><a href=\"#局部变量表\" class=\"headerlink\" title=\"局部变量表\"></a>局部变量表</h4><p>局部变量表是一组变量值存储空间, 用于存放方法参数和方法内部定义的局部变量, 其中存放的数据的类型是编译期可知的各种基本数据类型、对象引用（reference）和 returnAddress 类型（它指向了一条字节码指令的地址）。局部变量表所需的内存空间在编译期间完成分配, 即在 Java 程序被编译成 Class 文件时, 就确定了所需分配的最大局部变量表的容量。当进入一个方法时, 这个方法需要在栈中分配多大的局部变量空间是完全确定的, 在方法运行期间不会改变局部变量表的大小。</p>\n<p>局部变量表的容量以变量槽（Slot）为最小单位。在虚拟机规范中并没有明确指明一个 Slot 应占用的内存空间大小（允许其随着处理器、操作系统或虚拟机的不同而发生变化）, 一个 Slot 可以存放一个32位以内的数据类型：boolean、byte、char、short、int、float、reference 和 returnAddresss。reference 是对象的引用类型, returnAddress 是为字节指令服务的, 它执行了一条字节码指令的地址。对于 64 位的数据类型（long和double）, 虚拟机会以高位在前的方式为其分配两个连续的 Slot 空间。</p>\n<p>虚拟机通过索引定位的方式使用局部变量表, 索引值的范围是从 0 开始到局部变量表最大的 Slot 数量, 对于 32 位数据类型的变量, 索引 n 代表第 n 个 Slot, 对于 64 位的, 索引 n 代表第 n 和第 n+1 两个 Slot。</p>\n<p>在方法执行时, 虚拟机是使用局部变量表来完成参数值到参数变量列表的传递过程的, 如果是实例方法（非static）, 则局部变量表中的第 0 位索引的 Slot 默认是用于传递方法所属对象实例的引用, 在方法中可以通过关键字“this”来访问这个隐含的参数。其余参数则按照参数表的顺序来排列, 占用从1开始的局部变量 Slot, 参数表分配完毕后, 再根据方法体内部定义的变量顺序和作用域分配其余的 Slot。</p>\n<p>局部变量表中的 Slot 是可重用的, 方法体中定义的变量, 作用域并不一定会覆盖整个方法体, 如果当前字节码PC计数器的值已经超过了某个变量的作用域, 那么这个变量对应的 Slot 就可以交给其他变量使用。这样的设计不仅仅是为了节省空间, 在某些情况下 Slot 的复用会直接影响到系统的而垃圾收集行为。</p>\n<h4 id=\"操作数栈\"><a href=\"#操作数栈\" class=\"headerlink\" title=\"操作数栈\"></a>操作数栈</h4><p>操作数栈又常被称为操作栈, 操作数栈的最大深度也是在编译的时候就确定了。32 位数据类型所占的栈容量为 1,64 位数据类型所占的栈容量为 2。当一个方法开始执行时, 它的操作栈是空的, 在方法的执行过程中, 会有各种字节码指令（比如：加操作、赋值元算等）向操作栈中写入和提取内容, 也就是入栈和出栈操作。</p>\n<p>Java 虚拟机的解释执行引擎称为“基于栈的执行引擎”, 其中所指的“栈”就是操作数栈。因此我们也称 Java 虚拟机是基于栈的, 这点不同于 Android 虚拟机, Android 虚拟机是基于寄存器的。</p>\n<p>基于栈的指令集最主要的优点是可移植性强, 主要的缺点是执行速度相对会慢些；而由于寄存器由硬件直接提供, 所以基于寄存器指令集最主要的优点是执行速度快, 主要的缺点是可移植性差。</p>\n<h4 id=\"动态连接\"><a href=\"#动态连接\" class=\"headerlink\" title=\"动态连接\"></a>动态连接</h4><p>每个栈帧都包含一个指向运行时常量池（在方法区中, 后面介绍）中该栈帧所属方法的引用, 持有这个引用是为了支持方法调用过程中的动态连接。Class 文件的常量池中存在有大量的符号引用, 字节码中的方法调用指令就以常量池中指向方法的符号引用为参数。这些符号引用, 一部分会在类加载阶段或第一次使用的时候转化为直接引用（如 final、static 域等）, 称为静态解析, 另一部分将在每一次的运行期间转化为直接引用, 这部分称为动态连接。</p>\n<h4 id=\"方法返回地址\"><a href=\"#方法返回地址\" class=\"headerlink\" title=\"方法返回地址\"></a>方法返回地址</h4><p>当一个方法被执行后, 有两种方式退出该方法：执行引擎遇到了任意一个方法返回的字节码指令或遇到了异常, 并且该异常没有在方法体内得到处理。无论采用何种退出方式, 在方法退出之后, 都需要返回到方法被调用的位置, 程序才能继续执行。方法返回时可能需要在栈帧中保存一些信息, 用来帮助恢复它的上层方法的执行状态。一般来说, 方法正常退出时, 调用者的 PC 计数器的值就可以作为返回地址, 栈帧中很可能保存了这个计数器值, 而方法异常退出时, 返回地址是要通过异常处理器来确定的, 栈帧中一般不会保存这部分信息。</p>\n<p>方法退出的过程实际上等同于把当前栈帧出站, 因此退出时可能执行的操作有：恢复上层方法的局部变量表和操作数栈, 如果有返回值, 则把它压入调用者栈帧的操作数栈中, 调整 PC 计数器的值以指向方法调用指令后面的一条指令。</p>\n<h3 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h3><p>和Java虚拟机栈类似, 不过Java虚拟机栈为字节码服务, 而本地方法栈为虚拟机使用的Native方法服务。<br>这个区域也有可能抛出Stackoverflow异常和OutOfMemoryError异常。</p>\n<h3 id=\"Java堆\"><a href=\"#Java堆\" class=\"headerlink\" title=\"Java堆\"></a>Java堆</h3><p>Java堆是Java虚拟机管理内存中最大的一块, 被所有线程共享, 在虚拟机启动时创建, 用于存储对象实例。</p>\n<p>Java堆是垃圾回收的主要区域。从内存回收角度, Java堆可以细分为：新生代和老年代；新生代再细致一点分为：Eden空间, From Survivor空间, To Survivor空间。从内存分配角度, Java堆可能划分出多个线程私有的分配缓冲区（TLAB）。</p>\n<p>可以通过 jvm 选项设定堆容量：</p>\n<ol>\n<li>-Xms20M</li>\n</ol>\n<p>表示设置堆容量的最小值为 20M, 必须以 M 为单位</p>\n<ol start=\"2\">\n<li>-Xmx20M</li>\n</ol>\n<p>表示设置堆容量的最大值为 20M, 必须以 M 为单位</p>\n<h3 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h3><p>线程共享, 用于存储已被虚拟机加载的类信息, 常量, 静态变量, 编译后的代码等。有可能抛出OutOfMemoryError异常。</p>\n<h4 id=\"运行时常量池\"><a href=\"#运行时常量池\" class=\"headerlink\" title=\"运行时常量池\"></a>运行时常量池</h4><p>方法区的一部分, 用于存放编译器生成的Class文件中各种字面量和符号引用, 运行期间也可能将新的常量放入池中。</p>\n<h3 id=\"直接内存\"><a href=\"#直接内存\" class=\"headerlink\" title=\"直接内存\"></a>直接内存</h3><p>直接内存并不是虚拟机运行时区域的一部分, 也不是Java虚拟机规范定义的内存区域。JDK 1.4中新加入的NIO类, 引入了一种基于通道和缓冲区的I/O方式, 它可以使用native函数库直接分配堆外内存, 然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。这样做是为了能在一些场景中显著提高性能, 因为避免了Java堆和native堆来回复制数据。  </p>\n<p>本机直接内存的分配不受到Java堆的大小限制, 但会受到物理内存和操作系统的限制。</p>\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><h3 id=\"对象的创建\"><a href=\"#对象的创建\" class=\"headerlink\" title=\"对象的创建\"></a>对象的创建</h3><p>对内存分配情况分析最常见的示例便是对象实例化:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Object obj = new Object();</span><br></pre></td></tr></table></figure>\n<p>obj 会作为引用类型（reference）的数据保存在 Java 栈的本地变量表中, 而在 Java 堆中保存该引用的实例化对象, Java 堆中还必须包含能查找到此对象类型数据的地址信息（如对象类型、父类、实现的接口、方法等）, 这些类型数据则保存在方法区中。</p>\n<p>虚拟机遇到一条new指令时, 首先将去检查这个指令的参数是否能在常氮池中定位到一 个类的符号引用, 并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有, 那必须先执行相应的类加载过程。</p>\n<p>在类加载检查通过后, 接下来虚拟机将为新生对象分配内存。对象所需内存的大小在类加载完成后便可完全确定, 为对象分配空间的任务等同于把一块确定大小的内存从Java堆中划分出来。</p>\n<p>如果Java堆中内存是绝对规整的, 那么分配内存就只需要把指针移动一个对象大小的距离, 这种分配方式叫<code>指针碰撞</code>；如果已使用的内存和空闲内存相互交错, 虚拟机就需要维护一个空闲内存的列表, 在分配的时候从列表中找到一个足够大的内存分配给对象, 并更新列表, 这种分配方式叫<code>空闲列表</code>。</p>\n","tags":["Java虚拟机"]},{"title":"Maven入门知识","url":"/2019/06/06/maven-knowledge/","content":"<blockquote>\n<p>Maven 是 Apache 下的一个纯 Java 开发的项目管理工具，可以对 Java 项目进行构建、依赖管理。</p>\n</blockquote>\n<h2 id=\"约定配置\"><a href=\"#约定配置\" class=\"headerlink\" title=\"约定配置\"></a>约定配置</h2><p>Maven 提倡使用一个共同的标准目录结构，Maven 使用约定优于配置的原则，大家尽可能的遵守这样的目录结构。如下所示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">目录</th>\n<th align=\"center\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">${basedir}</td>\n<td align=\"center\">存放pom.xml和所有的子目录</td>\n</tr>\n<tr>\n<td align=\"center\">${basedir}/src/main/java</td>\n<td align=\"center\">项目的java源代码</td>\n</tr>\n<tr>\n<td align=\"center\">${basedir}/src/main/resources</td>\n<td align=\"center\">项目的资源，比如说property文件，springmvc.xml</td>\n</tr>\n<tr>\n<td align=\"center\">${basedir}/src/test/java</td>\n<td align=\"center\">项目的测试类，比如说Junit代码</td>\n</tr>\n<tr>\n<td align=\"center\">${basedir}/src/test/resources</td>\n<td align=\"center\">测试用的资源</td>\n</tr>\n<tr>\n<td align=\"center\">${basedir}/src/main/webapp/WEB-INF</td>\n<td align=\"center\">web应用文件目录，web项目的信息，比如存放web.xml、本地图片、jsp视图页面</td>\n</tr>\n<tr>\n<td align=\"center\">${basedir}/target</td>\n<td align=\"center\">打包输出目录</td>\n</tr>\n<tr>\n<td align=\"center\">${basedir}/target/classes</td>\n<td align=\"center\">编译输出目录</td>\n</tr>\n<tr>\n<td align=\"center\">${basedir}/target/test-classes</td>\n<td align=\"center\">测试编译输出目录</td>\n</tr>\n</tbody></table>\n<span id=\"more\"></span>\n\n<h2 id=\"Maven-POM\"><a href=\"#Maven-POM\" class=\"headerlink\" title=\"Maven POM\"></a>Maven POM</h2><p>POM( Project Object Model，项目对象模型 ) 是 Maven 工程的基本工作单元，是一个XML文件，包含了项目的基本信息，用于描述项目如何构建，声明项目依赖，等等。</p>\n<p>执行任务或目标时，Maven 会在当前目录中查找 POM。它读取 POM，获取所需的配置信息，然后执行目标。</p>\n<p>所有 POM 文件都需要 project 元素和三个必需字段：groupId，artifactId，version。</p>\n<p>样例</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span> = <span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:xsi</span> = <span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xsi:schemaLocation</span> = <span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">    http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 模型版本 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.58suo.mes<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>718mes<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 版本号 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">节点</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">project</td>\n<td align=\"center\">工程的根标签</td>\n</tr>\n<tr>\n<td align=\"center\">modelVersion</td>\n<td align=\"center\">模型版本需要设置为 4.0</td>\n</tr>\n<tr>\n<td align=\"center\">groupId</td>\n<td align=\"center\">这是工程组的标识。它在一个组织或者项目中通常是唯一的<br />一般是网站域名的反写</td>\n</tr>\n<tr>\n<td align=\"center\">artifactId</td>\n<td align=\"center\">这是工程的标识</td>\n</tr>\n<tr>\n<td align=\"center\">version</td>\n<td align=\"center\">工程的版本号</td>\n</tr>\n</tbody></table>\n<h2 id=\"Maven-构建生命周期\"><a href=\"#Maven-构建生命周期\" class=\"headerlink\" title=\"Maven 构建生命周期\"></a>Maven 构建生命周期</h2><p>不同的生命周期一般还有不同的阶段，当我们执行 mvn post-clean 命令时，Maven 调用 clean 生命周期，它包含以下阶段：</p>\n<ul>\n<li>pre-clean：执行一些需要在clean之前完成的工作</li>\n<li>clean：移除所有上一次构建生成的文件</li>\n<li>post-clean：执行一些需要在clean之后立刻完成的工作</li>\n</ul>\n<p>mvn clean 中的 clean 就是上面的 clean，在一个生命周期中，运行某个阶段的时候，它之前的所有阶段都会被运行，但不包含之后的周期。</p>\n<p>重要的周期如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">生命周期</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">validate</td>\n<td align=\"center\">检查工程配置是否正确，完成构建过程的所有必要信息是否能够获取到。</td>\n</tr>\n<tr>\n<td align=\"center\">initialize</td>\n<td align=\"center\">初始化构建状态，例如设置属性。</td>\n</tr>\n<tr>\n<td align=\"center\">generate-sources</td>\n<td align=\"center\">生成编译阶段需要包含的任何源码文件。</td>\n</tr>\n<tr>\n<td align=\"center\">process-sources</td>\n<td align=\"center\">处理源代码，例如，过滤任何值（filter any value）。</td>\n</tr>\n<tr>\n<td align=\"center\">generate-resources</td>\n<td align=\"center\">生成工程包中需要包含的资源文件。</td>\n</tr>\n<tr>\n<td align=\"center\">process-resources</td>\n<td align=\"center\">拷贝和处理资源文件到目的目录中，为打包阶段做准备。</td>\n</tr>\n<tr>\n<td align=\"center\">compile</td>\n<td align=\"center\">编译工程源码。</td>\n</tr>\n<tr>\n<td align=\"center\">process-classes</td>\n<td align=\"center\">处理编译生成的文件，例如 Java Class 字节码的加强和优化。</td>\n</tr>\n<tr>\n<td align=\"center\">generate-test-sources</td>\n<td align=\"center\">生成编译阶段需要包含的任何测试源代码。</td>\n</tr>\n<tr>\n<td align=\"center\">process-test-sources</td>\n<td align=\"center\">处理测试源代码，例如，过滤任何值（filter any values)。</td>\n</tr>\n<tr>\n<td align=\"center\">test-compile</td>\n<td align=\"center\">编译测试源代码到测试目的目录。</td>\n</tr>\n<tr>\n<td align=\"center\">process-test-classes</td>\n<td align=\"center\">处理测试代码文件编译后生成的文件。</td>\n</tr>\n<tr>\n<td align=\"center\">test</td>\n<td align=\"center\">使用适当的单元测试框架（例如JUnit）运行测试。</td>\n</tr>\n<tr>\n<td align=\"center\">prepare-package</td>\n<td align=\"center\">在真正打包之前，为准备打包执行任何必要的操作。</td>\n</tr>\n<tr>\n<td align=\"center\">package</td>\n<td align=\"center\">获取编译后的代码，并按照可发布的格式进行打包，例如 JAR、WAR 或者 EAR 文件。</td>\n</tr>\n<tr>\n<td align=\"center\">pre-integration-test</td>\n<td align=\"center\">在集成测试执行之前，执行所需的操作。例如，设置所需的环境变量。</td>\n</tr>\n<tr>\n<td align=\"center\">integration-test</td>\n<td align=\"center\">处理和部署必须的工程包到集成测试能够运行的环境中。</td>\n</tr>\n<tr>\n<td align=\"center\">post-integration-test</td>\n<td align=\"center\">在集成测试被执行后执行必要的操作。例如，清理环境。</td>\n</tr>\n<tr>\n<td align=\"center\">verify</td>\n<td align=\"center\">运行检查操作来验证工程包是有效的，并满足质量要求。</td>\n</tr>\n<tr>\n<td align=\"center\">install</td>\n<td align=\"center\">安装工程包到本地仓库中，该仓库可以作为本地其他工程的依赖。</td>\n</tr>\n<tr>\n<td align=\"center\">deploy</td>\n<td align=\"center\">拷贝最终的工程包到远程仓库中，以共享给其他开发人员和工程。</td>\n</tr>\n</tbody></table>\n<h2 id=\"Maven-不同环境配置\"><a href=\"#Maven-不同环境配置\" class=\"headerlink\" title=\"Maven 不同环境配置\"></a>Maven 不同环境配置</h2><p>maven pom文件中包含了<code>&lt;profiles&gt;</code>节点，以此来为不同的环境设置不同的配置文件，构建过程等，例如开发环境，测试环境，生产环境等。</p>\n<p>profiles 节点样例：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\">       <span class=\"comment\">&lt;!--根据环境参数或命令行参数激活某个构建处理 --&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">           <span class=\"comment\">&lt;!--构建配置的唯一标识符。即用于命令行激活，也用于在继承时合并具有相同标识符的profile。 --&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">id</span> /&gt;</span></span><br><span class=\"line\">           <span class=\"comment\">&lt;!--自动触发profile的条件逻辑。Activation是profile的开启钥匙。profile的力量来自于它 能够在某些特定的环境中自动使用某些特定的值；这些环境通过activation元素指定。activation元素并不是激活profile的唯一方式。 --&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">               <span class=\"comment\">&lt;!--profile默认是否激活的标志 --&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">activeByDefault</span> /&gt;</span></span><br><span class=\"line\">               <span class=\"comment\">&lt;!--当匹配的jdk被检测到，profile被激活。例如，1.4激活JDK1.4，1.4.0_2，而!1.4激活所有版本不是以1.4开头的JDK。 --&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">jdk</span> /&gt;</span></span><br><span class=\"line\">               <span class=\"comment\">&lt;!--当匹配的操作系统属性被检测到，profile被激活。os元素可以定义一些操作系统相关的属性。 --&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">os</span>&gt;</span></span><br><span class=\"line\">                   <span class=\"comment\">&lt;!--激活profile的操作系统的名字 --&gt;</span></span><br><span class=\"line\">                   <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Windows XP<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">                   <span class=\"comment\">&lt;!--激活profile的操作系统所属家族(如 &#x27;windows&#x27;) --&gt;</span></span><br><span class=\"line\">                   <span class=\"tag\">&lt;<span class=\"name\">family</span>&gt;</span>Windows<span class=\"tag\">&lt;/<span class=\"name\">family</span>&gt;</span></span><br><span class=\"line\">                   <span class=\"comment\">&lt;!--激活profile的操作系统体系结构 --&gt;</span></span><br><span class=\"line\">                   <span class=\"tag\">&lt;<span class=\"name\">arch</span>&gt;</span>x86<span class=\"tag\">&lt;/<span class=\"name\">arch</span>&gt;</span></span><br><span class=\"line\">                   <span class=\"comment\">&lt;!--激活profile的操作系统版本 --&gt;</span></span><br><span class=\"line\">                   <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.2600<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;/<span class=\"name\">os</span>&gt;</span></span><br><span class=\"line\">               <span class=\"comment\">&lt;!--如果Maven检测到某一个属性（其值可以在POM中通过$&#123;名称&#125;引用），其拥有对应的名称和值，Profile就会被激活。如果值 字段是空的，那么存在属性名称字段就会激活profile，否则按区分大小写方式匹配属性值字段 --&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">                   <span class=\"comment\">&lt;!--激活profile的属性的名称 --&gt;</span></span><br><span class=\"line\">                   <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mavenVersion<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">                   <span class=\"comment\">&lt;!--激活profile的属性的值 --&gt;</span></span><br><span class=\"line\">                   <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>2.0.3<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">               <span class=\"comment\">&lt;!--提供一个文件名，通过检测该文件的存在或不存在来激活profile。missing检查文件是否存在，如果不存在则激活 profile。另一方面，exists则会检查文件是否存在，如果存在则激活profile。 --&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">file</span>&gt;</span></span><br><span class=\"line\">                   <span class=\"comment\">&lt;!--如果指定的文件存在，则激活profile。 --&gt;</span></span><br><span class=\"line\">                   <span class=\"tag\">&lt;<span class=\"name\">exists</span>&gt;</span>/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/</span><br><span class=\"line\">                   <span class=\"tag\">&lt;/<span class=\"name\">exists</span>&gt;</span></span><br><span class=\"line\">                   <span class=\"comment\">&lt;!--如果指定的文件不存在，则激活profile。 --&gt;</span></span><br><span class=\"line\">                   <span class=\"tag\">&lt;<span class=\"name\">missing</span>&gt;</span>/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/</span><br><span class=\"line\">                   <span class=\"tag\">&lt;/<span class=\"name\">missing</span>&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">build</span>/&gt;</span><span class=\"comment\">&lt;!--构建项目所需要的信息。参见Maven构建一节。--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Maven-构建\"><a href=\"#Maven-构建\" class=\"headerlink\" title=\"Maven 构建\"></a>Maven 构建</h2><p><strong>pom.xml中的两种build</strong></p>\n<ul>\n<li>Project Build, <code>&lt;project&gt;</code>的直接子元素<code>&lt;build&gt;</code></li>\n<li>Profile Build, <code>&lt;profile&gt;</code> 的子元素<code>&lt;build&gt;</code></li>\n</ul>\n<p>Profile Build包含了基本的build元素，而Project Build还包含两个特殊的元素，即各种&lt;…Directory&gt;和&lt;…extensions&gt;。</p>\n<h3 id=\"共有节点\"><a href=\"#共有节点\" class=\"headerlink\" title=\"共有节点\"></a>共有节点</h3><h4 id=\"直接子节点\"><a href=\"#直接子节点\" class=\"headerlink\" title=\"直接子节点\"></a>直接子节点</h4><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">defaultGoal</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">defaultGoal</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>说明：</p>\n<ul>\n<li>defaultGoal，执行构建时默认的goal或phase，如jar:jar或者package等</li>\n<li>directory，构建的结果所在的路径，默认为${basedir}/target目录</li>\n<li>finalName，构建的最终结果的名字，该名字可能在其他plugin中被改变</li>\n</ul>\n<h4 id=\"resources节点\"><a href=\"#resources节点\" class=\"headerlink\" title=\"resources节点\"></a>resources节点</h4><p>资源往往不是代码，无需编译，而是一些properties或XML配置文件，构建过程中会往往会将资源文件从源路径复制到指定的目标路径。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filters</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filters</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">targetPath</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">targetPath</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclude</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">testResources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">testResources</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>说明：</p>\n<ul>\n<li><p>resources，build过程中涉及的资源文件</p>\n</li>\n<li><p>targetPath，资源文件的目标路径</p>\n</li>\n<li><p>filtering，构建过程中是否对资源进行过滤，默认false</p>\n</li>\n<li><p>directory，资源文件的路径，默认位于${basedir}/src/main/resources/目录下</p>\n</li>\n<li><p>includes，一组文件名的匹配模式，被匹配的资源文件将被构建过程处理</p>\n</li>\n<li><p>excludes，一组文件名的匹配模式，被匹配的资源文件将被构建过程忽略。同时被includes和excludes匹配的资源文件，将被忽略。</p>\n</li>\n<li><p>filters，给出对资源文件进行过滤的属性文件的路径，默认位于${basedir}/src/main/filters/目录下。属性文件中定义若干键值对。在构建过程中，对于资源文件中出现的变量（键），将使用属性文件中该键对应的值替换。</p>\n</li>\n<li><p>testResources，test过程中涉及的资源文件，默认位于${basedir}/src/test/resources/目录下。这里的资源文件不会被构建到目标构件中</p>\n</li>\n</ul>\n<h4 id=\"plugins节点\"><a href=\"#plugins节点\" class=\"headerlink\" title=\"plugins节点\"></a>plugins节点</h4><p><code>&lt;plugins&gt;</code>给出构建过程中所用到的插件，例如maven-assembly这个插件, 可以打包成zip、tar.gz等格式：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-assembly-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">encoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">encoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">descriptors</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">descriptor</span>&gt;</span>src/main/assembly/package.xml<span class=\"tag\">&lt;/<span class=\"name\">descriptor</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">descriptors</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">outputDirectory</span>&gt;</span>c:\\\\<span class=\"tag\">&lt;/<span class=\"name\">outputDirectory</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>make-assembly<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>single<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Project-Build特有的-lt-…Directory-gt\"><a href=\"#Project-Build特有的-lt-…Directory-gt\" class=\"headerlink\" title=\"Project Build特有的&lt;…Directory&gt;\"></a>Project Build特有的&lt;…Directory&gt;</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">sourceDirectory</span>&gt;</span>$&#123;basedir&#125;/src/main/java<span class=\"tag\">&lt;/<span class=\"name\">sourceDirectory</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scriptSourceDirectory</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">scriptSourceDirectory</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">testSourceDirectory</span>&gt;</span>src/test/java<span class=\"tag\">&lt;/<span class=\"name\">testSourceDirectory</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">outputDirectory</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">outputDirectory</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">testOutputDirectory</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">testOutputDirectory</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>目录可以使用绝对路径；如果使用相对路径，则所有的相对路径都是在${basedir}目录下。</p>\n<h2 id=\"Project-Build特有的-lt-extensions-gt\"><a href=\"#Project-Build特有的-lt-extensions-gt\" class=\"headerlink\" title=\"Project Build特有的&lt;extensions&gt;\"></a>Project Build特有的<code>&lt;extensions&gt;</code></h2><p><code>&lt;extensions&gt;</code>是执行构建过程中可能用到的其他工具，在执行构建的过程中被加入到classpath中。</p>\n<p>也可以通过<code>&lt;extensions&gt;</code>激活构建插件，从而改变构建的过程。</p>\n<p>通常，通过<code>&lt;extensions&gt;</code>给出通用插件的一个具体实现，用于构建过程。</p>\n<h2 id=\"Maven仓库\"><a href=\"#Maven仓库\" class=\"headerlink\" title=\"Maven仓库\"></a>Maven仓库</h2><p>Maven 仓库有三种类型：</p>\n<ul>\n<li>本地（local）</li>\n<li>中央（central）</li>\n<li>远程（remote）</li>\n</ul>\n<h3 id=\"本地仓库\"><a href=\"#本地仓库\" class=\"headerlink\" title=\"本地仓库\"></a>本地仓库</h3><p>运行 Maven 的时候，Maven 所需要的任何构件都是直接从本地仓库获取的。如果本地仓库没有，它会首先尝试从远程仓库下载构件至本地仓库，然后再使用本地仓库的构件。</p>\n<p>默认情况下，不管Linux还是 Windows，每个用户在自己的用户目录下都有一个路径名为 .m2/respository/ 的仓库目录。</p>\n<p>Maven 本地仓库默认被创建在 %USER_HOME% 目录下。要修改默认位置，在 %M2_HOME%\\conf 目录中的 Maven 的 settings.xml 文件中定义另一个路径。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/SETTINGS/1.0.0</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">   http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">localRepository</span>&gt;</span>C:/MyLocalRepository<span class=\"tag\">&lt;/<span class=\"name\">localRepository</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"中央仓库\"><a href=\"#中央仓库\" class=\"headerlink\" title=\"中央仓库\"></a>中央仓库</h3><p>Maven 中央仓库是由 Maven 社区提供的仓库，其中包含了大量常用的库。</p>\n<p>中央仓库包含了绝大多数流行的开源Java构件，以及源码、作者信息、SCM、信息、许可证信息等。一般来说，简单的Java项目依赖的构件都可以在这里下载到。</p>\n<p>中央仓库的关键概念：</p>\n<ul>\n<li>这个仓库由 Maven 社区管理。</li>\n<li>不需要配置。</li>\n<li>需要通过网络才能访问。</li>\n</ul>\n<p>要浏览中央仓库的内容，maven 社区提供了一个 URL：<a href=\"http://search.maven.org/#browse\">http://search.maven.org/#browse</a>。使用这个仓库，开发人员可以搜索所有可以获取的代码库。</p>\n<h3 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h3><p>如果 Maven 在中央仓库中也找不到依赖的文件，它会停止构建过程并输出错误信息到控制台。为避免这种情况，Maven 提供了远程仓库的概念，它是开发人员自己定制仓库，包含了所需要的代码库或者其他工程中用到的 jar 文件。</p>\n<p>举例说明，使用下面的 pom.xml，Maven 将从远程仓库中下载该 pom.xml 中声明的所依赖的（在中央仓库中获取不到的）文件。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">   http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.companyname.projectgroup<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>project<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.companyname.common-lib<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>common-lib<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>companyname.lib1<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://download.companyname.org/maven2/lib1<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Maven-依赖搜索顺序\"><a href=\"#Maven-依赖搜索顺序\" class=\"headerlink\" title=\"Maven 依赖搜索顺序\"></a>Maven 依赖搜索顺序</h3><p>当我们执行 Maven 构建命令时，Maven 开始按照以下顺序查找依赖的库：</p>\n<ul>\n<li><strong>步骤 1</strong> － 在本地仓库中搜索，如果找不到，执行步骤 2，如果找到了则执行其他操作。</li>\n<li><strong>步骤 2</strong> － 在中央仓库中搜索，如果找不到，并且有一个或多个远程仓库已经设置，则执行步骤 4，如果找到了则下载到本地仓库中以备将来引用。</li>\n<li><strong>步骤 3</strong> － 如果远程仓库没有被设置，Maven 将简单的停滞处理并抛出错误（无法找到依赖的文件）。</li>\n<li><strong>步骤 4</strong> － 在一个或多个远程仓库中搜索依赖的文件，如果找到则下载到本地仓库以备将来引用，否则 Maven 将停止处理并抛出错误（无法找到依赖的文件）。</li>\n</ul>\n<p>在我们的maven配置里面访问的maven私服就属于中心仓库的一个镜像。如果联网一般会使用阿里的maven仓库：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirrors</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>alimaven<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>aliyun maven<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","tags":["maven"]},{"title":"Semaphore -- 信号量","url":"/2018/03/21/semaphore/","content":"<h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><ol>\n<li>Semaphore就是一个信号量，它的作用是限制某段代码块的并发数。</li>\n<li>Semaphore有一个构造函数，可以传入一个int型整数n，表示某段代码最多只有n个线程可以访问</li>\n<li>如果超出了n，那么请等待，等到某个线程执行完毕这段代码块，下一个线程再进入。</li>\n<li>由此可以看出如果Semaphore构造函数中传入的int型整数n=1，相当于变成了一个synchronized了。</li>\n</ol>\n<p>Semaphore类位于java.util.concurrent包下，它提供了2个构造器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//参数permits表示许可数目，即同时可以允许多少线程进行访问</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">Semaphore</span><span class=\"params\">(<span class=\"type\">int</span> <span class=\"keyword\">permits</span>)</span> &#123;</span><br><span class=\"line\">  sync = <span class=\"keyword\">new</span> <span class=\"title class_\">NonfairSync</span>(<span class=\"keyword\">permits</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//这个多了一个参数fair表示是否是公平的，即等待时间越久的越先获取许可</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">Semaphore</span><span class=\"params\">(<span class=\"type\">int</span> <span class=\"keyword\">permits</span>, <span class=\"type\">boolean</span> fair)</span> &#123;</span><br><span class=\"line\">  sync = (fair)? <span class=\"keyword\">new</span> <span class=\"title class_\">FairSync</span>(<span class=\"keyword\">permits</span>) : <span class=\"keyword\">new</span> <span class=\"title class_\">NonfairSync</span>(<span class=\"keyword\">permits</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Semaphore类中比较重要的几个方法，首先是acquire()、release()方法：</p>\n<ol>\n<li>acquire()用来获取一个许可，若无许可能够获得，则会一直等待，直到获得许可。</li>\n<li>release()用来释放许可。注意，在释放许可之前，必须先获获得许可。</li>\n</ol>\n<p>acquire()方法会被阻塞，如果想立即得到执行结果，可以使用下面几个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//尝试获取一个许可，若获取成功，则立即返回true，若获取失败，则立即返回false</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryAcquire</span><span class=\"params\">()</span> &#123; &#125;;</span><br><span class=\"line\"><span class=\"comment\">//尝试获取一个许可，若在指定的时间内获取成功，则立即返回true，否则则立即返回false</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryAcquire</span><span class=\"params\">(<span class=\"type\">long</span> timeout, TimeUnit unit)</span> <span class=\"keyword\">throws</span> InterruptedException &#123; &#125;;</span><br><span class=\"line\"><span class=\"comment\">//尝试获取permits个许可，若获取成功，则立即返回true，若获取失败，则立即返回false</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryAcquire</span><span class=\"params\">(<span class=\"type\">int</span> <span class=\"keyword\">permits</span>)</span> &#123; &#125;;</span><br><span class=\"line\"><span class=\"comment\">//尝试获取permits个许可，若在指定的时间内获取成功，则立即返回true</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryAcquire</span><span class=\"params\">(<span class=\"type\">int</span> <span class=\"keyword\">permits</span>, <span class=\"type\">long</span> timeout, TimeUnit unit)</span> <span class=\"keyword\">throws</span> InterruptedException &#123; &#125;;</span><br><span class=\"line\"><span class=\"comment\">//得到当前可用的许可数目</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">availablePermits</span><span class=\"params\">()</span>;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>假若一个工厂有5台机器，但是有8个工人，一台机器同时只能被一个工人使用，只有使用完了，其他工人才能继续使用。那么我们就可以通过Semaphore来实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">N</span> <span class=\"operator\">=</span> <span class=\"number\">8</span>; <span class=\"comment\">//工人数</span></span><br><span class=\"line\">        <span class=\"type\">Semaphore</span> <span class=\"variable\">semaphore</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Semaphore</span>(<span class=\"number\">5</span>); <span class=\"comment\">//机器数目</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;N;i++)</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Worker</span>(i,semaphore).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Worker</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> num;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Semaphore semaphore;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Worker</span><span class=\"params\">(<span class=\"type\">int</span> num,Semaphore semaphore)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.num = num;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.semaphore = semaphore;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                semaphore.acquire();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;工人&quot;</span>+<span class=\"built_in\">this</span>.num+<span class=\"string\">&quot;占用一个机器在生产...&quot;</span>);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;工人&quot;</span>+<span class=\"built_in\">this</span>.num+<span class=\"string\">&quot;释放出机器&quot;</span>);</span><br><span class=\"line\">                semaphore.release();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">工人<span class=\"number\">0</span>占用一个机器在生产...</span><br><span class=\"line\">工人<span class=\"number\">1</span>占用一个机器在生产...</span><br><span class=\"line\">工人<span class=\"number\">2</span>占用一个机器在生产...</span><br><span class=\"line\">工人<span class=\"number\">4</span>占用一个机器在生产...</span><br><span class=\"line\">工人<span class=\"number\">5</span>占用一个机器在生产...</span><br><span class=\"line\">工人<span class=\"number\">0</span>释放出机器</span><br><span class=\"line\">工人<span class=\"number\">2</span>释放出机器</span><br><span class=\"line\">工人<span class=\"number\">3</span>占用一个机器在生产...</span><br><span class=\"line\">工人<span class=\"number\">7</span>占用一个机器在生产...</span><br><span class=\"line\">工人<span class=\"number\">4</span>释放出机器</span><br><span class=\"line\">工人<span class=\"number\">5</span>释放出机器</span><br><span class=\"line\">工人<span class=\"number\">1</span>释放出机器</span><br><span class=\"line\">工人<span class=\"number\">6</span>占用一个机器在生产...</span><br><span class=\"line\">工人<span class=\"number\">3</span>释放出机器</span><br><span class=\"line\">工人<span class=\"number\">7</span>释放出机器</span><br><span class=\"line\">工人<span class=\"number\">6</span>释放出机器</span><br></pre></td></tr></table></figure>\n","tags":["Java","Concurrency"]},{"title":"Java 单例模式的两种高效写法","url":"/2018/03/22/singleton/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在Java对象的创建时，单例模式使用尤其多，同时也是个面试必问的基础题。很多时候面试官想问的无非是懒汉式的双重检验锁。但是其实还有两种更加直观高效的写法，也是《Effective Java》中所推荐的写法。</p>\n<h2 id=\"静态内部类-static-nested-class\"><a href=\"#静态内部类-static-nested-class\" class=\"headerlink\" title=\"静态内部类(static nested class)\"></a>静态内部类(static nested class)</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SingletonHolder</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Singleton</span> <span class=\"variable\">INSTANCE</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> SingletonHolder.INSTANCE;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种写法仍然使用JVM本身机制保证了线程安全问题；由于 SingletonHolder 是私有的，除了 getInstance() 之外没有办法访问它，因此它是懒汉式的；同时读取实例的时候不会进行同步，没有性能缺陷；也不依赖 JDK 版本。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"枚举-Enum\"><a href=\"#枚举-Enum\" class=\"headerlink\" title=\"枚举 Enum\"></a>枚举 Enum</h2><p>在《Effective Java》最后推荐了这样一个写法，简直有点颠覆，不仅超级简单，而且保证了现场安全。这里引用一下，此方法无偿提供了序列化机制，绝对防止多次实例化，及时面对复杂的序列化或者反射攻击。单元素枚举类型已经成为实现Singleton的最佳方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\">  INSTANCE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于一个标准的enum单例模式，最优秀的写法还是实现接口的形式:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义单例模式中需要完成的代码逻辑</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MySingleton</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">doSomething</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Singleton</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MySingleton</span> &#123;</span><br><span class=\"line\">  INSTANCE &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doSomething</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;complete singleton&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MySingleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Singleton.INSTANCE;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","tags":["Java"]},{"title":"SpringMVC执行流程及工作原理","url":"/2018/04/26/spring-mvc-execution-process/","content":"<p>图解SpringMVC执行流程:</p>\n<p><img data-src=\"/images/spring/spring-mvc-process.png\" alt=\"SpringMVC执行流程\"></p>\n<p>SpringMVC执行流程:</p>\n<ol>\n<li>用户发送请求至前端控制器DispatcherServlet</li>\n<li>DispatcherServlet收到请求调用处理器映射器HandlerMapping。</li>\n<li>处理器映射器根据请求url找到具体的处理器，生成处理器执行链HandlerExecutionChain(包括处理器对象和处理器拦截器)一并返回给DispatcherServlet。</li>\n<li>DispatcherServlet根据处理器Handler获取处理器适配器HandlerAdapter执行HandlerAdapter处理一系列的操作，如：参数封装，数据格式转换，数据验证等操作</li>\n<li>执行处理器Handler(Controller，也叫页面控制器)。</li>\n<li>Handler执行完成返回ModelAndView</li>\n<li>HandlerAdapter将Handler执行结果ModelAndView返回到DispatcherServlet</li>\n<li>DispatcherServlet将ModelAndView传给ViewReslover视图解析器</li>\n<li>ViewReslover解析后返回具体View</li>\n<li>DispatcherServlet对View进行渲染视图（即将模型数据model填充至视图中）。</li>\n<li>DispatcherServlet响应用户。</li>\n</ol>\n","tags":["Java"]},{"title":"maven依赖非pom导入的额外Jar包","url":"/2018/02/08/maven-extdirs/","content":"<p>非pom导入的额外Jar包, 在 <code>maven clean install</code> 的时候是会报错的, <code>程序包 *.*.* 不存在</code>, 需要配置 <code>pom.xml</code>。</p>\n<blockquote>\n<p>我们将额外Jar包放在一个统一的目录 <code>$&#123;dirs&#125;</code> 下面。</p>\n</blockquote>\n<p><code>dependency</code> 加上 <code>&lt;scope&gt;system&lt;/scope&gt;</code> 以及 Jar包位置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>$&#123;groupId&#125;<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>$&#123;artifactId&#125;<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>system<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">systemPath</span>&gt;</span>$&#123;project.basedir&#125;/$&#123;dirs&#125;/target1.jar<span class=\"tag\">&lt;/<span class=\"name\">systemPath</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>$&#123;groupId&#125;<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>$&#123;artifactId&#125;<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>system<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">systemPath</span>&gt;</span>$&#123;project.basedir&#125;/$&#123;dirs&#125;/target2.jar<span class=\"tag\">&lt;/<span class=\"name\">systemPath</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p><code>build</code> 时, 把Jar包加入 <code>manifestEntries</code> - <code>Class-Path</code> (我的配置文件将配置文件, lib, webApp等都打包在Jar包外)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-dependency-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>copy-dependencies<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>copy-dependencies<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/lib<span class=\"tag\">&lt;/<span class=\"name\">outputDirectory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">overWriteReleases</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">overWriteReleases</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">overWriteSnapshots</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">overWriteSnapshots</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">excludeScope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">excludeScope</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>$&#123;java.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>$&#123;java.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">compilerArgument</span>&gt;</span>-proc:none<span class=\"tag\">&lt;/<span class=\"name\">compilerArgument</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">encoding</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-resources-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>copy-web<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>copy-resources<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">encoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">encoding</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/webApp<span class=\"tag\">&lt;/<span class=\"name\">outputDirectory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>webApp<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>copy-conf<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>copy-resources<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">encoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">encoding</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;<span class=\"tag\">&lt;/<span class=\"name\">outputDirectory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>copy-authFile<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>copy-resources<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">encoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">encoding</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;<span class=\"tag\">&lt;/<span class=\"name\">outputDirectory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>settings.txt<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>copy-lib<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>copy-resources<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/lib<span class=\"tag\">&lt;/<span class=\"name\">outputDirectory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>$&#123;dirs&#125;<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-jar-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">classesDirectory</span>&gt;</span>target/classes/<span class=\"tag\">&lt;/<span class=\"name\">classesDirectory</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">archive</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">addMavenDescriptor</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">addMavenDescriptor</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">manifest</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">addClasspath</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">addClasspath</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">classpathPrefix</span>&gt;</span>lib/<span class=\"tag\">&lt;/<span class=\"name\">classpathPrefix</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">mainClass</span>&gt;</span>$&#123;mainClass&#125;<span class=\"tag\">&lt;/<span class=\"name\">mainClass</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">manifestEntries</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Class-Path</span>&gt;</span></span><br><span class=\"line\">                lib/target1.jar lib/target2.jar</span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">Class-Path</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">manifestEntries</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">archive</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","tags":["maven"]},{"title":"账户余额项目总结","url":"/2021/11/25/spring-mvc-mybatis-vue/","content":"<h2 id=\"使用p6spy展示sql\"><a href=\"#使用p6spy展示sql\" class=\"headerlink\" title=\"使用p6spy展示sql\"></a>使用<code>p6spy</code>展示sql</h2><h3 id=\"pom-xml中引入p6spy\"><a href=\"#pom-xml中引入p6spy\" class=\"headerlink\" title=\"pom.xml中引入p6spy\"></a><code>pom.xml</code>中引入<code>p6spy</code></h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>p6spy<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>p6spy<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;p6spy.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"application-yml中数据源设置p6spy\"><a href=\"#application-yml中数据源设置p6spy\" class=\"headerlink\" title=\"application.yml中数据源设置p6spy\"></a><code>application.yml</code>中数据源设置<code>p6spy</code></h3><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">dynamic:</span></span><br><span class=\"line\">      <span class=\"attr\">p6spy:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h3 id=\"spy-properties\"><a href=\"#spy-properties\" class=\"headerlink\" title=\"spy.properties\"></a>spy.properties</h3><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">module.log</span>=<span class=\"string\">com.p6spy.engine.logging.P6LogFactory</span></span><br><span class=\"line\"><span class=\"comment\"># 单行日志</span></span><br><span class=\"line\"><span class=\"attr\">logMessageFormat</span>=<span class=\"string\">com.monezhao.config.CustomSqlFormat</span></span><br><span class=\"line\"><span class=\"comment\">#logMessageFormat=com.baomidou.mybatisplus.extension.p6spy.P6SpyLogger</span></span><br><span class=\"line\"><span class=\"comment\"># 使用Slf4J记录sql</span></span><br><span class=\"line\"><span class=\"attr\">appender</span>=<span class=\"string\">com.p6spy.engine.spy.appender.Slf4JLogger</span></span><br><span class=\"line\"><span class=\"comment\"># 是否开启慢SQL记录</span></span><br><span class=\"line\"><span class=\"attr\">outagedetection</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 慢SQL记录标准，单位秒</span></span><br><span class=\"line\"><span class=\"attr\">outagedetectioninterval</span>=<span class=\"string\">2</span></span><br><span class=\"line\"><span class=\"comment\"># 日期格式</span></span><br><span class=\"line\"><span class=\"attr\">dateformat</span>=<span class=\"string\">yyyy-MM-dd HH:mm:ss</span></span><br><span class=\"line\"><span class=\"comment\"># 过滤Quartz和Flowable的SQL</span></span><br><span class=\"line\"><span class=\"attr\">filter</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"attr\">exclude</span>=<span class=\"string\">QRTZ_*,ACT_*,FLW_*</span></span><br><span class=\"line\"><span class=\"attr\">excludecategories</span>=<span class=\"string\">info,debug,result,commit,resultset</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义输出sql格式\"><a href=\"#自定义输出sql格式\" class=\"headerlink\" title=\"自定义输出sql格式\"></a>自定义输出sql格式</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomSqlFormat</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MessageFormattingStrategy</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">formatMessage</span><span class=\"params\">(<span class=\"type\">int</span> connectionId, String now, <span class=\"type\">long</span> elapsed, String category,</span></span><br><span class=\"line\"><span class=\"params\">                                String prepared, String sql, String url)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CommonUtil.isEmptyStr(sql)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (elapsed &gt; <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">                log.info(<span class=\"string\">&quot;用时超过200ms!!!&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;\\n# &quot;</span> + now + <span class=\"string\">&quot; | 执行sql用时 &quot;</span> + elapsed + <span class=\"string\">&quot;ms&quot;</span> + <span class=\"string\">&quot;\\n==&gt;    SQl开始:\\n&quot;</span> + sql + <span class=\"string\">&quot;\\n&lt;==    SQL结束&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据乐观锁\"><a href=\"#数据乐观锁\" class=\"headerlink\" title=\"数据乐观锁\"></a>数据乐观锁</h2><h3 id=\"数据库新增version字段\"><a href=\"#数据库新增version字段\" class=\"headerlink\" title=\"数据库新增version字段\"></a>数据库新增<code>version</code>字段</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> $&#123;tableName&#125; <span class=\"keyword\">ADD</span> <span class=\"keyword\">COLUMN</span> `version` <span class=\"type\">int</span>(<span class=\"number\">6</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">1</span> COMMENT <span class=\"string\">&#x27;乐观锁&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"表对应table-entity新增字段\"><a href=\"#表对应table-entity新增字段\" class=\"headerlink\" title=\"表对应table entity新增字段\"></a>表对应<code>table entity</code>新增字段</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Version</span></span><br><span class=\"line\"><span class=\"meta\">@ExcelIgnore</span></span><br><span class=\"line\"><span class=\"meta\">@ApiModelProperty(hidden = true)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> version;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MybatisPlusConfig中设置乐观锁\"><a href=\"#MybatisPlusConfig中设置乐观锁\" class=\"headerlink\" title=\"MybatisPlusConfig中设置乐观锁\"></a><code>MybatisPlusConfig</code>中设置乐观锁</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> OptimisticLockerInterceptor <span class=\"title function_\">optimisticLockerInterceptor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OptimisticLockerInterceptor</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>MybatisPlus</code>会自动处理乐观锁的冲突, 因此按照之前的方式save, update即可</p>\n</blockquote>\n<h2 id=\"Nginx前后端分离部署\"><a href=\"#Nginx前后端分离部署\" class=\"headerlink\" title=\"Nginx前后端分离部署\"></a>Nginx前后端分离部署</h2><h3 id=\"后端开启CROS\"><a href=\"#后端开启CROS\" class=\"headerlink\" title=\"后端开启CROS\"></a>后端开启CROS</h3><p><code>WebMvcConfigurer</code>中配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebMvcConfig</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WebMvcConfigurer</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> CorsFilter <span class=\"title function_\">corsFilter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"type\">UrlBasedCorsConfigurationSource</span> <span class=\"variable\">urlBasedCorsConfigurationSource</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UrlBasedCorsConfigurationSource</span>();</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"type\">CorsConfiguration</span> <span class=\"variable\">corsConfiguration</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CorsConfiguration</span>();</span><br><span class=\"line\">      <span class=\"comment\">/* 是否允许请求带有验证信息 */</span></span><br><span class=\"line\">      corsConfiguration.setAllowCredentials(<span class=\"literal\">true</span>);</span><br><span class=\"line\">      <span class=\"comment\">/* 允许访问的客户端域名 */</span></span><br><span class=\"line\">      corsConfiguration.addAllowedOrigin(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">/* 允许服务端访问的客户端请求头 */</span></span><br><span class=\"line\">      corsConfiguration.addAllowedHeader(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">/* 允许访问的方法名,GET POST等 */</span></span><br><span class=\"line\">      corsConfiguration.addAllowedMethod(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">      urlBasedCorsConfigurationSource.registerCorsConfiguration(<span class=\"string\">&quot;/**&quot;</span>, corsConfiguration);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CorsFilter</span>(urlBasedCorsConfigurationSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"前端vue配置\"><a href=\"#前端vue配置\" class=\"headerlink\" title=\"前端vue配置\"></a>前端vue配置</h3><p><code>vue.config.js</code>项目配置中<code>publicPath</code>设置为后端的<code>context-path</code>, 例如<code>/bar/</code></p>\n<p><code>.env</code>文件里面<code>VUE_APP_BASE_API</code>后缀加上<code>/api</code>, 方便<code>Nginx</code>区分前端资源还是后台API</p>\n<h3 id=\"Nginx配置\"><a href=\"#Nginx配置\" class=\"headerlink\" title=\"Nginx配置\"></a>Nginx配置</h3><p>nginx.conf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">user  root;</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    #设置Nginx网络连接序列化</span><br><span class=\"line\">    accept_mutex on;</span><br><span class=\"line\">    #设置Nginx的worker进程是否可以同时接收多个请求</span><br><span class=\"line\">    multi_accept on;</span><br><span class=\"line\">    #设置Nginx的worker进程最大的连接数</span><br><span class=\"line\">    worker_connections 1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    # 开启压缩</span><br><span class=\"line\">    gzip on;</span><br><span class=\"line\">    # 开启静态文件压缩</span><br><span class=\"line\">    gzip_static on;</span><br><span class=\"line\">    # 设置为on会在Header里增加 &quot;Vary: Accept-Encoding&quot;</span><br><span class=\"line\">    gzip_vary on;</span><br><span class=\"line\">    # 代理结果数据的压缩</span><br><span class=\"line\">    gzip_proxied any;</span><br><span class=\"line\">    # gzip压缩比（1~9），越小压缩效果越差，但是越大处理越慢，所以一般取中间值</span><br><span class=\"line\">    gzip_comp_level 5;</span><br><span class=\"line\">    # 获取多少内存用于缓存压缩结果,拿出 4 个 128K 用来缓存压缩的文件</span><br><span class=\"line\">    gzip_buffers 4 128k;</span><br><span class=\"line\">    # 识别http协议的版本</span><br><span class=\"line\">    gzip_http_version 1.1;</span><br><span class=\"line\">    # 设置允许压缩的页面最小字节数，超过10k的文件会被压缩</span><br><span class=\"line\">    gzip_min_length 10k;</span><br><span class=\"line\">    include /root/balance.conf;</span><br><span class=\"line\">    include /usr/local/etc/nginx/servers/*.conf;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>balance.conf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">    server localhost:8080 weight=2;</span><br><span class=\"line\">    #server localhost:18080 backup;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 8686;</span><br><span class=\"line\">    server_name localhost;</span><br><span class=\"line\">    add_header Cache-Control no-cache;</span><br><span class=\"line\">    location ^~ /balance/api/ &#123;</span><br><span class=\"line\">        proxy_pass http://backend/balance/;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location /balance &#123;</span><br><span class=\"line\">        alias /Users/monezhao/Movies/balance/dist;</span><br><span class=\"line\">        try_files $uri $uri/  /balance/index.html;</span><br><span class=\"line\">        index index.html index.htm;</span><br><span class=\"line\">        expires 7d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"spring-MVC接口测试\"><a href=\"#spring-MVC接口测试\" class=\"headerlink\" title=\"spring MVC接口测试\"></a>spring MVC接口测试</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(SpringRunner.class)</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Transactional</span> <span class=\"comment\">//测试结束后使用事务回滚,不影响现有数据库</span></span><br><span class=\"line\"><span class=\"meta\">@Ignore</span> <span class=\"comment\">//maven打包时需要忽略与数据库操作相关的测试</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">XXControllerTest</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Druid-Spring-监控\"><a href=\"#Druid-Spring-监控\" class=\"headerlink\" title=\"Druid Spring 监控\"></a>Druid Spring 监控</h2><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># properties配置</span></span><br><span class=\"line\"><span class=\"attr\">spring.datasource.druid.aop-patterns</span>=<span class=\"string\">&quot;com.monezhao.mapper.*&quot;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yml配置</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">druid:</span></span><br><span class=\"line\">      <span class=\"attr\">aop-patterns:</span> <span class=\"string\">&quot;com.monezhao.mapper.*&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Mybatis-XML常用语法\"><a href=\"#Mybatis-XML常用语法\" class=\"headerlink\" title=\"Mybatis XML常用语法\"></a>Mybatis XML常用语法</h2><h3 id=\"验证字符串\"><a href=\"#验证字符串\" class=\"headerlink\" title=\"验证字符串\"></a>验证字符串</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">-- 验证字符串不为空</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;entity.codeInfoId != null and entity.codeInfoId !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">-- 验证字符串为某个值</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&#x27;entity.countType != null and entity.countType == &quot;0&quot;&#x27;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"foreach并验证集合不为空\"><a href=\"#foreach并验证集合不为空\" class=\"headerlink\" title=\"foreach并验证集合不为空\"></a>foreach并验证集合不为空</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;entity.orgList != null and entity.orgList.size &gt; 0 &quot;</span>&gt;</span></span><br><span class=\"line\">    and a.org_id  in</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">foreach</span> <span class=\"attr\">collection</span>=<span class=\"string\">&quot;entity.orgList&quot;</span> <span class=\"attr\">item</span> =<span class=\"string\">&quot;deptId&quot;</span> <span class=\"attr\">index</span>=<span class=\"string\">&quot;i&quot;</span> <span class=\"attr\">open</span>=<span class=\"string\">&quot;(&quot;</span> <span class=\"attr\">close</span>=<span class=\"string\">&quot;)&quot;</span> <span class=\"attr\">separator</span>=<span class=\"string\">&quot;,&quot;</span>&gt;</span></span><br><span class=\"line\">        #&#123;deptId&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">foreach</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查询结果默认值\"><a href=\"#查询结果默认值\" class=\"headerlink\" title=\"查询结果默认值\"></a>查询结果默认值</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> IFNULL(a.count_type, &quot;1&quot;) <span class=\"keyword\">AS</span> countType <span class=\"keyword\">from</span> a;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"where-标签\"><a href=\"#where-标签\" class=\"headerlink\" title=\"where 标签\"></a>where 标签</h3><blockquote>\n<p>where 1=1 也会走索引，不影响查询效率, 但毕竟mysql优化器也是需要时间的，当数据量很大时，还是会有影响的</p>\n</blockquote>\n<p>where标签的两个特性：</p>\n<ol>\n<li>只有if标签有内容的情况下才会插入where子句;</li>\n<li>若子句的开头为<code>and</code>或<code>or</code>, where标签会将它替换去除;</li>\n</ol>\n<p>在动态构造sql时, 为防止注入或防止语句不当时会使用where 1=1</p>\n<p>原本的SQL语句</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">WHERE 1 = 1</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;entity.codeInfoId != null and entity.codeInfoId !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\">    &lt;![CDATA[    AND b.code_info_id = #&#123;entity.codeInfoId&#125;    ]]&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&#x27;entity.countType != null and entity.countType == &quot;0&quot;&#x27;</span>&gt;</span></span><br><span class=\"line\">    &lt;![CDATA[    AND a.count_type = #&#123;entity.countType&#125;    ]]&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在使用where标签可以简化这条语句</p>\n<p><strong>注意，每条if语句都以and或or开头</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;entity.codeInfoId != null and entity.codeInfoId !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\">        &lt;![CDATA[    AND b.code_info_id = #&#123;entity.codeInfoId&#125;    ]]&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&#x27;entity.countType != null and entity.countType == &quot;0&quot;&#x27;</span>&gt;</span></span><br><span class=\"line\">        &lt;![CDATA[    AND a.count_type = #&#123;entity.countType&#125;    ]]&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">where</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ehcarts获取图表点击的列\"><a href=\"#ehcarts获取图表点击的列\" class=\"headerlink\" title=\"ehcarts获取图表点击的列\"></a>ehcarts获取图表点击的列</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">chart</span>.<span class=\"title function_\">getZr</span>().<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"params\">params</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pointInPixel = [params.<span class=\"property\">offsetX</span>, params.<span class=\"property\">offsetY</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">chart</span>.<span class=\"title function_\">containPixel</span>(<span class=\"string\">&#x27;grid&#x27;</span>, pointInPixel)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获得图表中点击的列</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> xIndex = <span class=\"variable language_\">this</span>.<span class=\"property\">chart</span>.<span class=\"title function_\">convertFromPixel</span>(&#123; <span class=\"attr\">seriesIndex</span>: <span class=\"number\">0</span> &#125;, [params.<span class=\"property\">offsetX</span>, params.<span class=\"property\">offsetY</span>])[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">const</span> handleIndex = <span class=\"title class_\">Number</span>(xIndex)</span><br><span class=\"line\">        <span class=\"keyword\">const</span> xValue = <span class=\"variable language_\">this</span>.<span class=\"property\">chart</span>.<span class=\"title function_\">getOption</span>().<span class=\"property\">xAxis</span>[<span class=\"number\">0</span>].<span class=\"property\">data</span>[handleIndex]</span><br><span class=\"line\">        <span class=\"keyword\">const</span> yValue = <span class=\"variable language_\">this</span>.<span class=\"property\">chart</span>.<span class=\"title function_\">getOption</span>().<span class=\"property\">series</span>[<span class=\"number\">0</span>].<span class=\"property\">data</span>[handleIndex]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n","tags":["Java","Vue"]},{"title":"tcp三次握手四次挥手","url":"/2019/07/26/tcp-handshake/","content":"<p>建立TCP需要三次握手才能建立，而断开连接则需要四次挥手。整个过程如下图所示：</p>\n<p><img data-src=\"/images/tcp/tcp.png\" alt=\"图示\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h2><p>假定主机A运行的是客户端，B运行服务端。最初两端的TCP进程都处于CLOESD状态。连接建立的握手环节:</p>\n<ol>\n<li><p>第一次握手：A将SYN置1，选择一个seq=x（序号，起始发送位）。SYN报文段不能携带数据，但要消耗掉一个序号。这时TCP进程进入SYN-SENT（同步已发送）状态。</p>\n</li>\n<li><p>第二次握手：B收到请求报文段后，若同意则向A发送确认。在确认报文段中把SYN和ACK都置1，确认号是ack = x+1，同时也为自己选择一个初始序号seq=y。这个报文段也不能携带数据，但同样要消耗掉一个序号。TCP服务器进程进入SYN-RCVD（同步收到）状态。</p>\n</li>\n<li><p>第三次握手：TCP客户进程收到B的确认后，还要向B给出确认。确认报文段的ACK置1（连接建立，两边ACK必须全部置1），确认号ack = y+1，而自己的序号seq = x+1。TCP的标准规定，ACK报文段可以携带数据。但如果不携带数据则不消耗序号。在这种情况下，下一个数据报文段的序号仍是seq=x+1.这时TCP连接已经建立，A进入ESABLISHED（已建立连接）状态。</p>\n</li>\n</ol>\n<h3 id=\"为什么需要三次握手\"><a href=\"#为什么需要三次握手\" class=\"headerlink\" title=\"为什么需要三次握手\"></a>为什么需要三次握手</h3><p>防止失效的连接请求报文段被服务端接收，从而产生错误。</p>\n<p>PS：失效的连接请求：若客户端向服务端发送的连接请求丢失，客户端等待应答超时后就会再次发送连接请求，此时，上一个连接请求就是『失效的』。</p>\n<p>若建立连接只需两次握手，客户端并没有太大的变化，仍然需要获得服务端的应答后才进入ESTABLISHED状态，而服务端在收到连接请求后就进入ESTABLISHED状态。此时如果网络拥塞，客户端发送的连接请求迟迟到不了服务端，客户端便超时重发请求，如果服务端正确接收并确认应答，双方便开始通信，通信结束后释放连接。此时，如果那个失效的连接请求抵达了服务端，由于只有两次握手，服务端收到请求就会进入ESTABLISHED状态，等待发送数据或主动发送数据。但此时的客户端早已进入CLOSED状态，服务端将会一直等待下去，这样浪费服务端连接资源。</p>\n<h2 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h2><p>TCP连接的释放一共需要四步，因此称为『四次挥手』。</p>\n<p>我们知道，TCP连接是双向的，因此在四次挥手中，前两次挥手用于断开一个方向的连接，后两次挥手用于断开另一方向的连接。</p>\n<ol>\n<li><p>第一次挥手 若A认为数据发送完成，则它需要向B发送连接释放请求。该请求只有报文头，头中携带的主要参数为： FIN=1，seq=u。此时，A将进入FIN-WAIT-1状态。PS1：FIN=1表示该报文段是一个连接释放请求。PS2：seq=u，u-1是A向B发送的最后一个字节的序号。</p>\n</li>\n<li><p>第二次挥手 B收到连接释放请求后，会通知相应的应用程序，告诉它A向B这个方向的连接已经释放。此时B进入CLOSE-WAIT状态，并向A发送连接释放的应答，其报文头包含： ACK=1，seq=v，ack=u+1。PS1：ACK=1：除TCP连接请求报文段以外，TCP通信过程中所有数据报的ACK都为1，表示应答。PS2：seq=v，v-1是B向A发送的最后一个字节的序号。PS3：ack=u+1表示希望收到从第u+1个字节开始的报文段，并且已经成功接收了前u个字节。A收到该应答，进入FIN-WAIT-2状态，等待B发送连接释放请求。第二次挥手完成后，A到B方向的连接已经释放，B不会再接收数据，A也不会再发送数据。但B到A方向的连接仍然存在，B可以继续向A发送数据。</p>\n</li>\n<li><p>第三次挥手 当B向A发完所有数据后，向A发送连接释放请求，请求头：FIN=1，ACK=1，seq=w，ack=u+1。B便进入LAST-ACK状态。</p>\n</li>\n<li><p>第四次挥手 A收到释放请求后，向B发送确认应答，此时A进入TIME-WAIT状态。该状态会持续2MSL时间，若该时间段内没有B的重发请求的话，就进入CLOSED状态，撤销TCB。当B收到确认应答后，也便进入CLOSED状态，撤销TCB。</p>\n</li>\n</ol>\n<h3 id=\"为什么A在TIME-WAIT状态必须等待2MSL的时间呢\"><a href=\"#为什么A在TIME-WAIT状态必须等待2MSL的时间呢\" class=\"headerlink\" title=\"为什么A在TIME-WAIT状态必须等待2MSL的时间呢\"></a>为什么A在TIME-WAIT状态必须等待2MSL的时间呢</h3><p>有两个理由：</p>\n<ol>\n<li><p>为了保证A发送的最后一个ACK报文段能够到达B。这个ACK报文段有可能丢失，因而使处在LAST-ACK状态的收不到对己发送的FIN+ACK报文段的确认。B会超时重传这个FIN+ACK报文段，而A就能在2MSL时间内收到这个重传的FIN+ACK报文段。接着A重传一次确认，重新启动2MSL计时器。</p>\n</li>\n<li><p>防止“已失效的连接请求报文段”出现在本连接中。A在发送完最后一个ACK报文段后，再经过时间2MSL，就可以使得本连接持续的时间所产生的的所有报文段都从网络中消失。这样下一个新的连接不会出现旧的失效的报文段。</p>\n</li>\n</ol>\n","tags":["tcp/ip"]},{"title":"nodejs","url":"/2017/09/08/nodejs/","content":"<h2 id=\"npm使用淘宝源\"><a href=\"#npm使用淘宝源\" class=\"headerlink\" title=\"npm使用淘宝源\"></a>npm使用淘宝源</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npmmirror.com/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"npmrc\"><a href=\"#npmrc\" class=\"headerlink\" title=\".npmrc\"></a>.npmrc</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">registry=https://registry.npmmirror.com/</span><br><span class=\"line\">sass_binary_site=https://npm.taobao.org/mirrors/node-sass/</span><br><span class=\"line\">electron_mirror=https://npm.taobao.org/mirrors/electron/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用cnpm\"><a href=\"#使用cnpm\" class=\"headerlink\" title=\"使用cnpm\"></a>使用cnpm</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm@6.2.0 --registry=https://registry.npmmirror.com</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"yarnrc\"><a href=\"#yarnrc\" class=\"headerlink\" title=\".yarnrc\"></a>.yarnrc</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.</span></span><br><span class=\"line\"><span class=\"comment\"># yarn lockfile v1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">registry <span class=\"string\">&quot;https://registry.npmmirror.com/&quot;</span></span><br><span class=\"line\">electron_mirror <span class=\"string\">&quot;https://npm.taobao.org/mirrors/electron/&quot;</span></span><br><span class=\"line\">lastUpdateCheck 1692882092809</span><br><span class=\"line\">sass_binary_site <span class=\"string\">&quot;https://npm.taobao.org/mirrors/node-sass/&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用nvm管理node版本\"><a href=\"#使用nvm管理node版本\" class=\"headerlink\" title=\"使用nvm管理node版本\"></a>使用nvm管理node版本</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出node版本</span></span><br><span class=\"line\">nvm <span class=\"built_in\">ls</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#切换node版本</span></span><br><span class=\"line\">nvm use 16.20.1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Fixing-npm-permissions\"><a href=\"#Fixing-npm-permissions\" class=\"headerlink\" title=\"Fixing npm permissions\"></a>Fixing npm permissions</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">chown</span> -R $(<span class=\"built_in\">whoami</span>) $(npm config get prefix)/&#123;lib/node_modules,bin,share&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>This changes the permissions of the sub-folders used by npm and some other tools (lib/node_modules, bin, and share).</em></p>\n","tags":["Node.js"]},{"title":"线程的基本状态以及状态之间的关系","url":"/2018/03/12/thread/","content":"<h2 id=\"什么是线程\"><a href=\"#什么是线程\" class=\"headerlink\" title=\"什么是线程\"></a>什么是线程</h2><p>一个线程是进程的一个顺序执行流。同类的多个线程共享一块内存空间和一组系统资源，线程本身有一个供程序执行时的堆栈。线程在切换时负荷小，因此，线程也被称为轻负荷进程。一个进程中可以包含多个线程。</p>\n<h2 id=\"进程与线程的区别\"><a href=\"#进程与线程的区别\" class=\"headerlink\" title=\"进程与线程的区别\"></a>进程与线程的区别</h2><p>一个进程至少有一个线程。线程的划分尺度小于进程，使得多线程程序的并发性高。另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。</p>\n<p>线程在执行过程中与进程的区别在于每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。</p>\n<p>从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用来实现进程的调度和管理以及资源分配。</p>\n<h2 id=\"并发原理\"><a href=\"#并发原理\" class=\"headerlink\" title=\"并发原理\"></a>并发原理</h2><p>多个线程或进程”同时”运行只是我们感官上的一种表现。事实上进程和线程是并发运行的，OS的线程调度机制将时间划分为很多时间片段（时间片），尽可能均匀分配给正在运行的程序，获取CPU时间片的线程或进程得以被执行，其他则等待。而CPU则在这些进程或线程上来回切换运行。微观上所有进程和线程是走走停停的，宏观上都在运行，这种都运行的现象叫并发，但是不是绝对意义上的“同时发生。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"线程状态\"><a href=\"#线程状态\" class=\"headerlink\" title=\"线程状态\"></a>线程状态</h2><p><img data-src=\"/images/thread/thread.png\" alt=\"线程状态\"></p>\n<h3 id=\"1-新建-NEW\"><a href=\"#1-新建-NEW\" class=\"headerlink\" title=\"1. 新建(NEW)\"></a>1. 新建(NEW)</h3><p>用new语句 <code>new Thread(r)</code> 创建的线程对象处于新建状态，此时它和其他java对象一样，仅被分配了内存。</p>\n<h3 id=\"2-就绪-RUNNABLE\"><a href=\"#2-就绪-RUNNABLE\" class=\"headerlink\" title=\"2. 就绪(RUNNABLE)\"></a>2. 就绪(RUNNABLE)</h3><p>当start()方法被调用时，线程就进入RUNNABLE状态。处于这个状态的线程位于Java虚拟机的可运行池中，等待cpu的使用权。</p>\n<h3 id=\"3-运行-RUNNING\"><a href=\"#3-运行-RUNNING\" class=\"headerlink\" title=\"3. 运行(RUNNING)\"></a>3. 运行(RUNNING)</h3><p>处于这个状态的线程占用CPU，执行程序代码。在并发运行环境中，如果计算机只有一个CPU，那么任何时刻只会有一个线程处于这个状态。</p>\n<p>当前线程时间片用完了，调用当前线程的yield()方法，当前线程进入 <code>就绪状态</code>。</p>\n<blockquote>\n<p>只有处于就绪状态的线程才有机会转到运行状态。</p>\n</blockquote>\n<h3 id=\"4-阻塞-BLOCKED\"><a href=\"#4-阻塞-BLOCKED\" class=\"headerlink\" title=\"4. 阻塞(BLOCKED)\"></a>4. 阻塞(BLOCKED)</h3><p>阻塞状态是指线程因为某些原因放弃CPU，暂时停止运行。当线程处于阻塞状态时，Java虚拟机不会给线程分配CPU，直到线程重新进入就绪状态，它才会有机会获得运行状态。</p>\n<p>阻塞状态分为三种:</p>\n<ol>\n<li><p>等待阻塞:运行的线程执行wait（）方法，JVM会把该线程放入等待池中。</p>\n</li>\n<li><p>同步阻塞:运行的线程在获取对象同步锁时，若该同步锁被别的线程占用，则JVM会把线程放入锁池中。</p>\n</li>\n<li><p>其他阻塞:运行的线程执行Sleep（）方法，或者发出I/O请求时，JVM会把线程设为阻塞状态。当Sleep（）状态超时、或者I/O处理完毕时，线程重新转入就绪状态。</p>\n</li>\n</ol>\n<h3 id=\"5-死亡-DEAD\"><a href=\"#5-死亡-DEAD\" class=\"headerlink\" title=\"5. 死亡(DEAD)\"></a>5. 死亡(DEAD)</h3><p>当线程执行完run()方法中的代码，或者遇到了未捕获的异常，就会退出run()方法，此时就进入死亡状态，该线程结束生命周期，等待JVM GC 回收内存。</p>\n","tags":["Java","Concurrency"]},{"title":"Ubuntu 18.04 清华源","url":"/2017/07/22/ubuntu-apt-sources/","content":"<h2 id=\"备份sources-list\"><a href=\"#备份sources-list\" class=\"headerlink\" title=\"备份sources.list\"></a>备份sources.list</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bk</span><br><span class=\"line\">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"修改内容如下\"><a href=\"#修改内容如下\" class=\"headerlink\" title=\"修改内容如下\"></a>修改内容如下</h2><p>清华源：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span></span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span></span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span></span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">预发布软件源，不建议启用</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span></span><br></pre></td></tr></table></figure>\n","tags":["Ubuntu"]},{"title":"vnc连接Mac卡顿","url":"/2025/08/02/vnc2mac-slow/","content":"<p>使用Windows设备通过VNC远程桌面Mac的时候如果发现界面流畅度很低, 可以使用以下命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo sysctl net.inet.tcp.delayed_ack=0</span><br></pre></td></tr></table></figure>\n","tags":["VNC"]},{"title":"Webpack打包优化","url":"/2022/09/02/webpack-gzip-and-remove-console/","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>随着项目的功能不断增加, <code>webpack</code>打包后文件体积变得非常大, 超过1M的文件让首次访问加载页面时比较慢, 耗时6.5s左右, 所以需要优化一下.</p>\n<p>同时, 项目中有很多<code>console.log</code>, <code>debugger</code>, 需要在打包的时候去掉.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"GZIP压缩\"><a href=\"#GZIP压缩\" class=\"headerlink\" title=\"GZIP压缩\"></a>GZIP压缩</h2><h3 id=\"安装插件依赖\"><a href=\"#安装插件依赖\" class=\"headerlink\" title=\"安装插件依赖\"></a>安装插件依赖</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i --save-dev compression-webpack-plugin@1.1.12</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vue-config-js中配置压缩\"><a href=\"#vue-config-js中配置压缩\" class=\"headerlink\" title=\"vue.config.js中配置压缩\"></a><code>vue.config.js</code>中配置压缩</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CompressionWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;compression-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">transpileDependencies</span>: [<span class=\"string\">&#x27;element-ui&#x27;</span>],</span><br><span class=\"line\">  <span class=\"title function_\">chainWebpack</span>(<span class=\"params\">config</span>) &#123;</span><br><span class=\"line\">    config</span><br><span class=\"line\">      .<span class=\"title function_\">when</span>(process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;development&#x27;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 对超过10kb的文件gzip压缩</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"params\">config</span> =&gt;</span> config.<span class=\"title function_\">plugin</span>(<span class=\"string\">&#x27;compressionPlugin&#x27;</span>).<span class=\"title function_\">use</span>(</span><br><span class=\"line\">          <span class=\"keyword\">new</span> <span class=\"title class_\">CompressionWebpackPlugin</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(js|css|html|png|svg|woff2|eot|woff|ttf)$/</span>, <span class=\"comment\">// 匹配文件名</span></span><br><span class=\"line\">            <span class=\"attr\">threshold</span>: <span class=\"number\">10240</span></span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        )</span><br><span class=\"line\">      )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"压缩效果\"><a href=\"#压缩效果\" class=\"headerlink\" title=\"压缩效果\"></a>压缩效果</h3><p>js效果图<br><img data-src=\"/images/webpack/js_gzip.png\" alt=\"js效果图\"></p>\n<p>css效果图<br><img data-src=\"/images/webpack/css_gzip.png\" alt=\"css效果图\"></p>\n<h3 id=\"Nginx中配置gzip\"><a href=\"#Nginx中配置gzip\" class=\"headerlink\" title=\"Nginx中配置gzip\"></a><code>Nginx</code>中配置gzip</h3><p>在<code>Nginx</code>的<code>http</code>配置中加入<code>gzip_static on;</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\">    #keepalive_timeout  0;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    gzip_static on;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"去console和debugger\"><a href=\"#去console和debugger\" class=\"headerlink\" title=\"去console和debugger\"></a>去console和debugger</h2><blockquote>\n<p><code>vue-cli</code>工具中已经引入了<code>terser-webpack-plugin</code>, 因此在项目中可以直接引入<code>terser-webpack-plugin</code>, 无需安装.</p>\n</blockquote>\n<p><code>vue.config.js</code>中配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TerserPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;terser-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">configureWebpack</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">performance</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">hints</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">minimize</span>: process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> === <span class=\"string\">&#x27;production&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">minimizer</span>: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">TerserPlugin</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">parallel</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">terserOptions</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">compress</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">drop_console</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 移除所有console相关代码；</span></span><br><span class=\"line\">              <span class=\"attr\">drop_debugger</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 移除自动断点功能；</span></span><br><span class=\"line\">              <span class=\"attr\">pure_funcs</span>: [<span class=\"string\">&#x27;console.log&#x27;</span>, <span class=\"string\">&#x27;console.error&#x27;</span>]<span class=\"comment\">// 配置移除指定的指令，如console.log,alert等</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">format</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">comments</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"attr\">extractComments</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","tags":["Vue","Node.js","Webpack"]}]